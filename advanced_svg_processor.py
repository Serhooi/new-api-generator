#!/usr/bin/env python3
"""
–£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–° –ì–ï–ù–ï–†–ê–¶–ò–ò SVG –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
========================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ SVG —à–∞–±–ª–æ–Ω–æ–≤:
1. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
2. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ dyno.* –ø–æ–ª–µ–π
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG
"""

import os
import requests
import cairosvg
from PIL import Image, ImageDraw, ImageFont
import io
import re
import base64
from urllib.parse import urlparse
import tempfile

def download_image(url, max_size=(800, 600)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL —Å —Ä–µ—Å–∞–π–∑–æ–º"""
    try:
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(url, timeout=10, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        response.raise_for_status()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(io.BytesIO(response.content))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
            img = background
        
        # –†–µ—Å–∞–π–∑–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.size[0] > max_size[0] or img.size[1] > max_size[1]:
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        img_data = buffer.getvalue()
        img_base64 = base64.b64encode(img_data).decode('utf-8')
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {img.size}")
        return f"data:image/jpeg;base64,{img_base64}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def wrap_text(text, max_length=30):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if len(text) <= max_length:
        return text
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
    words = text.split()
    if len(words) <= 1:
        return text
    
    lines = []
    current_line = []
    current_length = 0
    
    for word in words:
        if current_length + len(word) + len(current_line) <= max_length:
            current_line.append(word)
            current_length += len(word)
        else:
            if current_line:
                lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
            else:
                lines.append(word)
    
    if current_line:
        lines.append(' '.join(current_line))
    
    return '\n'.join(lines)

def process_svg_with_images(svg_content, replacements):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –∑–∞–º–µ–Ω–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    result = svg_content
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é SVG —à–∞–±–ª–æ–Ω...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—ã
    for key, value in replacements.items():
        clean_key = key.replace('dyno.', '')
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        patterns = [
            f"{{{{dyno.{clean_key}}}}}",
            f"{{{{{key}}}}}",
            f"{{{{dyno.{key}}}}}",
            f"{{{{{clean_key}}}}}"
        ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if 'image' in clean_key.lower() or 'photo' in clean_key.lower():
            if isinstance(value, str) and (value.startswith('http') or value.startswith('https')):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_data = download_image(value)
                if image_data:
                    # –ó–∞–º–µ–Ω—è–µ–º –≤ SVG
                    for pattern in patterns:
                        if pattern in result:
                            # –°–æ–∑–¥–∞–µ–º image —ç–ª–µ–º–µ–Ω—Ç
                            image_element = f'<image href="{image_data}" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"/>'
                            result = result.replace(pattern, image_element)
                            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {clean_key}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º placeholder
                    for pattern in patterns:
                        result = result.replace(pattern, f"Image: {clean_key}")
            else:
                # –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ–Ω–∞
                for pattern in patterns:
                    result = result.replace(pattern, str(value))
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            processed_value = str(value)
            if 'address' in clean_key.lower() and len(processed_value) > 30:
                processed_value = wrap_text(processed_value, 25)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            for pattern in patterns:
                if pattern in result:
                    result = result.replace(pattern, processed_value)
                    print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ: {clean_key} = {processed_value[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    remaining_vars = re.findall(r'\{\{[^}]+\}\}', result)
    if remaining_vars:
        print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {remaining_vars}")
        # –ó–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ placeholder
        for var in remaining_vars:
            result = result.replace(var, "")
    
    return result

def generate_png_from_svg_advanced(svg_content, output_path, width=800, height=600):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG –∏–∑ SVG —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é PNG: {output_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å SVG
        if not svg_content.strip().startswith('<svg'):
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SVG –∫–æ–Ω—Ç–µ–Ω—Ç")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º namespace –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'xmlns=' not in svg_content:
            svg_content = svg_content.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(output_path, 'wb') as f:
            f.write(png_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(output_path)
        print(f"‚úÖ PNG —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {file_size} –±–∞–π—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            img = Image.new('RGB', (width, height), color='white')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–± –æ—à–∏–±–∫–µ
            try:
                font = ImageFont.load_default()
            except:
                font = None
            
            error_text = f"Error generating image\n{str(e)[:100]}"
            draw.text((50, height//2), error_text, fill='red', font=font)
            
            img.save(output_path, 'PNG')
            print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω fallback PNG")
            return True
            
        except Exception as fallback_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback: {fallback_error}")
            return False

def test_svg_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SVG...")
    
    test_svg = '''<svg width="800" height="600" viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
        <rect width="800" height="600" fill="#f8f9fa"/>
        <text x="400" y="100" text-anchor="middle" fill="#2c3e50" font-family="Arial" font-size="24">
            {{dyno.propertyaddress}}
        </text>
        <text x="400" y="200" text-anchor="middle" fill="#e74c3c" font-family="Arial" font-size="32">
            {{dyno.price}}
        </text>
        <rect x="200" y="300" width="400" height="200" fill="#ecf0f1"/>
        <text x="400" y="410" text-anchor="middle" fill="#7f8c8d" font-family="Arial" font-size="16">
            {{dyno.imagePath}}
        </text>
    </svg>'''
    
    test_replacements = {
        'dyno.propertyaddress': '123 Very Long Property Address That Should Be Wrapped, Beverly Hills, CA 90210',
        'dyno.price': '$2,500,000',
        'dyno.imagePath': 'https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=400&h=300&fit=crop'
    }
    
    processed_svg = process_svg_with_images(test_svg, test_replacements)
    
    test_output = '/tmp/test_generation.png'
    success = generate_png_from_svg_advanced(processed_svg, test_output)
    
    if success and os.path.exists(test_output):
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: {test_output}")
        return True
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False

if __name__ == "__main__":
    test_svg_generation()

