#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è –ø–æ –ª–æ–≥–∞–º
"""

import requests
import time

def check_deploy_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ–ø–ª–æ–∏–ª–∏—Å—å –ª–∏ –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –î–ï–ü–õ–û–Ø")
    print("=" * 30)
    
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    test_data = {
        "main_template_id": "9cb08943-8d1e-440c-a712-92111ec23048",
        "photo_template_id": "f6ed8d52-3bbf-495e-8b67-61dc7d4ff47d", 
        "data": {
            "propertyaddress": "Deploy Test",
            "price": "$1,234,567",
            "beds": "4",
            "baths": "3",
            "propertyimage2": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
        }
    }
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤...")
        response = requests.post(api_url, json=test_data, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            format_type = result.get('format', 'unknown')
            print(f"üìã –§–æ—Ä–º–∞—Ç: {format_type}")
            
            if format_type == 'png':
                print("üéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù! PNG —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            elif format_type == 'svg':
                print("‚è≥ –î–µ–ø–ª–æ–π –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –≤—Å–µ –µ—â–µ SVG —Ñ–æ—Ä–º–∞—Ç")
                print("üí° –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ")
                return False
            
            # –ò—â–µ–º PNG URLs
            png_found = False
            for key, value in result.items():
                if 'png' in key.lower() and isinstance(value, str):
                    print(f"üñºÔ∏è PNG –Ω–∞–π–¥–µ–Ω: {key}")
                    png_found = True
            
            if png_found:
                print("üéâ PNG URLs –Ω–∞–π–¥–µ–Ω—ã - –¥–µ–ø–ª–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print("‚è≥ PNG URLs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –¥–µ–ø–ª–æ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                return False
        
        else:
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def monitor_deploy():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–µ–ø–ª–æ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    
    print("üîÑ –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–ü–õ–û–Ø")
    print("=" * 25)
    
    max_attempts = 10  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    
    for attempt in range(1, max_attempts + 1):
        print(f"\nüîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
        
        if check_deploy_status():
            print("\nüéâ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            return True
        
        if attempt < max_attempts:
            print("‚è≥ –ñ–¥—É 30 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            time.sleep(30)
    
    print("\n‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
    print("üí° –í–æ–∑–º–æ–∂–Ω–æ –¥–µ–ø–ª–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏")
    return False

if __name__ == "__main__":
    monitor_deploy()