#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤
"""
import requests
import json

BASE_URL = "https://new-api-generator.onrender.com"

def test_template_previews_correct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–µ–≤—å—é"""
    
    print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints)")
    print("=" * 50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å –ø—Ä–µ–≤—å—é
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å –ø—Ä–µ–≤—å—é")
    try:
        response = requests.get(f"{BASE_URL}/api/templates/all-previews", timeout=30)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_list = templates if isinstance(templates, list) else [templates]
            for i, template in enumerate(templates_list[:5]):  # –ü–µ—Ä–≤—ã–µ 5 —à–∞–±–ª–æ–Ω–æ–≤
                print(f"\nüìã –®–∞–±–ª–æ–Ω {i+1}:")
                print(f"   ID: {template.get('id', '–ù–ï–¢ ID')}")
                print(f"   Name: {template.get('name', '–ù–ï–¢ –ò–ú–ï–ù–ò')}")
                print(f"   Role: {template.get('role', '–ù–ï–¢ –†–û–õ–ò')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—å—é –ø–æ–ª—è
                preview_fields = ['preview_url', 'preview_path', 'preview_filename', 'has_preview']
                for field in preview_fields:
                    if field in template:
                        value = template[field]
                        print(f"   {field}: {value}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ URL –ø—Ä–µ–≤—å—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                        if field == 'preview_url' and value:
                            try:
                                preview_response = requests.head(value, timeout=10)
                                print(f"   üìÑ Preview –¥–æ—Å—Ç—É–ø–µ–Ω: {preview_response.status_code}")
                                content_type = preview_response.headers.get('content-type', '–ù–ï –£–ö–ê–ó–ê–ù')
                                print(f"   üìÑ Content-Type: {content_type}")
                                
                                if '.png' in value:
                                    print(f"   üñºÔ∏è PNG –ø—Ä–µ–≤—å—é")
                                elif '.svg' in value:
                                    print(f"   üé® SVG –ø—Ä–µ–≤—å—é")
                                    
                            except Exception as e:
                                print(f"   ‚ùå Preview –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                
                print(f"   " + "-" * 40)
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
    
    return templates

def test_individual_template_preview(templates):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    if not templates:
        print("\n‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–±–ª–æ–Ω–∞
    templates_list = templates if isinstance(templates, list) else [templates]
    for template in templates_list[:3]:
        template_id = template.get('id')
        if not template_id:
            continue
            
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: {template_id}")
        
        try:
            response = requests.get(f"{BASE_URL}/api/templates/{template_id}/preview", timeout=30)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                print(f"   ‚úÖ –ü—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω–æ!")
                print(f"   üìÑ Content-Type: {content_type}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
                
                if 'image' in content_type:
                    print(f"   üñºÔ∏è –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                elif 'svg' in content_type:
                    print(f"   üé® –≠—Ç–æ SVG!")
                elif 'json' in content_type:
                    try:
                        result = response.json()
                        print(f"   üìÑ JSON –æ—Ç–≤–µ—Ç: {json.dumps(result, indent=2)[:200]}...")
                    except:
                        print(f"   üìÑ JSON –æ—Ç–≤–µ—Ç (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å)")
                        
            elif response.status_code == 404:
                print(f"   ‚ùå –ü—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_preview_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é"""
    
    print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
    test_template_id = "propertyimage2"
    
    print(f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è: {test_template_id}")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é
        response = requests.get(f"{BASE_URL}/api/templates/{test_template_id}/preview", timeout=30)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            content_type = response.headers.get('content-type', '')
            print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            print(f"üìÑ Content-Type: {content_type}")
            print(f"üìè –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if 'image' in content_type:
                extension = 'png' if 'png' in content_type else 'jpg'
                filename = f"preview_{test_template_id}.{extension}"
                with open(filename, 'wb') as f:
                    f.write(response.content)
                print(f"üíæ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    templates = test_template_previews_correct()
    test_individual_template_preview(templates)
    test_preview_generation()
    
    print(f"\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")