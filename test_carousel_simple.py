#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –±–µ–∑ Cairo
"""

import sqlite3
import uuid
import json
import os
from test_simple_propertyimage2 import simple_process_svg

DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'

def generate_carousel_simple():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Cairo"""
    
    print("üé† –ü–†–û–°–¢–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–£–°–ï–õ–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(f'{OUTPUT_DIR}/carousel', exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, name, svg_content FROM templates WHERE template_role = 'main' LIMIT 1")
    main_result = cursor.fetchone()
    
    cursor.execute("SELECT id, name, svg_content FROM templates WHERE template_role = 'photo' LIMIT 1")
    photo_result = cursor.fetchone()
    
    if not main_result or not photo_result:
        print("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    main_id, main_name, main_svg = main_result
    photo_id, photo_name, photo_svg = photo_result
    
    print(f"üìÑ Main —à–∞–±–ª–æ–Ω: {main_name} ({main_id})")
    print(f"üìÑ Photo —à–∞–±–ª–æ–Ω: {photo_name} ({photo_id})")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        # –î–ª—è main —Å–ª–∞–π–¥–∞
        "dyno.propertyimage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1080&h=600&fit=crop",
        "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
        
        # –î–ª—è photo —Å–ª–∞–π–¥–∞
        "dyno.propertyimage2": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop",
        
        # –û–±—â–∏–µ –ø–æ–ª—è
        "dyno.propertyaddress": "123 Main Street, Beverly Hills, CA 90210",
        "dyno.price": "$450,000",
        "dyno.name": "John Smith",
        "dyno.phone": "(555) 123-4567"
    }
    
    carousel_id = str(uuid.uuid4())
    
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é main —Å–ª–∞–π–¥...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º main —Å–ª–∞–π–¥
    main_replacements = {k: v for k, v in test_data.items() if k != 'dyno.propertyimage2'}
    processed_main_svg = simple_process_svg(main_svg, main_replacements)
    
    main_filename = f"carousel_{carousel_id}_main.svg"
    main_path = f"{OUTPUT_DIR}/carousel/{main_filename}"
    
    with open(main_path, 'w', encoding='utf-8') as f:
        f.write(processed_main_svg)
    
    print(f"‚úÖ Main —Å–ª–∞–π–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_filename}")
    
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é photo —Å–ª–∞–π–¥...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º photo —Å–ª–∞–π–¥
    photo_replacements = test_data.copy()  # –í—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è dyno.propertyimage2
    processed_photo_svg = simple_process_svg(photo_svg, photo_replacements)
    
    photo_filename = f"carousel_{carousel_id}_photo.svg"
    photo_path = f"{OUTPUT_DIR}/carousel/{photo_filename}"
    
    with open(photo_path, 'w', encoding='utf-8') as f:
        f.write(processed_photo_svg)
    
    print(f"‚úÖ Photo —Å–ª–∞–π–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {photo_filename}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç photo —Å–ª–∞–π–¥–∞...")
    
    if test_data['dyno.propertyimage2'].replace('&', '&amp;') in processed_photo_svg:
        print(f"‚úÖ dyno.propertyimage2 –Ω–∞–π–¥–µ–Ω –≤ photo —Å–ª–∞–π–¥–µ!")
    else:
        print(f"‚ùå dyno.propertyimage2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ photo —Å–ª–∞–π–¥–µ")
        
        # –ò—â–µ–º —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å
        import re
        image_urls = re.findall(r'href="([^"]*)"', processed_photo_svg)
        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_urls}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—É—Å–µ–ª–∏
    result = {
        "carousel_id": carousel_id,
        "slides": [
            {"filename": main_filename, "path": main_path, "type": "main"},
            {"filename": photo_filename, "path": photo_path, "type": "photo"}
        ]
    }
    
    result_filename = f"carousel_{carousel_id}_info.json"
    with open(f"{OUTPUT_DIR}/carousel/{result_filename}", 'w', encoding='utf-8') as f:
        json.dump(result, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!")
    print(f"   ID: {carousel_id}")
    print(f"   Main —Å–ª–∞–π–¥: {main_filename}")
    print(f"   Photo —Å–ª–∞–π–¥: {photo_filename}")
    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {result_filename}")
    
    conn.close()
    return result

if __name__ == "__main__":
    generate_carousel_simple()