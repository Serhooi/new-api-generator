#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è headshot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import re

def fix_headshot_aspect_ratio(svg_content):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç preserveAspectRatio –¥–ª—è headshot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é preserveAspectRatio –¥–ª—è headshot...")
    
    # –ò—â–µ–º –≤—Å–µ image —ç–ª–µ–º–µ–Ω—Ç—ã —Å preserveAspectRatio="none"
    image_pattern = r'(<image[^>]*preserveAspectRatio=")none("[^>]*>)'
    
    def fix_aspect_ratio(match):
        # –ó–∞–º–µ–Ω—è–µ–º "none" –Ω–∞ "xMidYMid slice" –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—Ä–æ–ø–∞
        return match.group(1) + 'xMidYMid slice' + match.group(2)
    
    fixed_svg = re.sub(image_pattern, fix_aspect_ratio, svg_content)
    
    changes = len(re.findall(image_pattern, svg_content))
    if changes > 0:
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {changes} image —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å preserveAspectRatio")
        return fixed_svg
    else:
        print("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ image —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å preserveAspectRatio='none'")
        return svg_content

def analyze_headshot_structure(svg_content):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É headshot —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ HEADSHOT")
    print("=" * 40)
    
    # –ò—â–µ–º dyno.agentheadshot –≥—Ä—É–ø–ø—É
    headshot_pattern = r'<g[^>]*id="[^"]*agentheadshot[^"]*"[^>]*>'
    headshot_match = re.search(headshot_pattern, svg_content, re.IGNORECASE)
    
    if headshot_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ headshot –≥—Ä—É–ø–ø–∞: {headshot_match.group()}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã
        group_start = headshot_match.end()
        group_end_match = re.search(r'</g>', svg_content[group_start:])
        
        if group_end_match:
            group_content = svg_content[group_start:group_start + group_end_match.start()]
            print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã: {group_content.strip()}")
            
            # –ò—â–µ–º fill pattern
            fill_match = re.search(r'fill="url\(#([^)]+)\)"', group_content)
            if fill_match:
                pattern_id = fill_match.group(1)
                print(f"‚úÖ Pattern ID: {pattern_id}")
                
                # –ò—â–µ–º pattern
                pattern_pattern = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                pattern_match = re.search(pattern_pattern, svg_content, re.DOTALL)
                
                if pattern_match:
                    pattern_content = pattern_match.group(1)
                    print(f"üìã Pattern —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {pattern_content.strip()}")
                    
                    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç
                    use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"[^>]*transform="([^"]+)"', pattern_content)
                    if use_match:
                        image_id = use_match.group(1)
                        transform = use_match.group(2)
                        print(f"‚úÖ Image ID: {image_id}")
                        print(f"üìê Transform: {transform}")
                        
                        # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç
                        image_pattern = rf'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                        image_match = re.search(image_pattern, svg_content)
                        
                        if image_match:
                            image_element = image_match.group()
                            print(f"üñºÔ∏è Image —ç–ª–µ–º–µ–Ω—Ç: {image_element}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º preserveAspectRatio
                            aspect_match = re.search(r'preserveAspectRatio="([^"]+)"', image_element)
                            if aspect_match:
                                aspect_ratio = aspect_match.group(1)
                                print(f"üìè preserveAspectRatio: {aspect_ratio}")
                                
                                if aspect_ratio == "none":
                                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: preserveAspectRatio='none' –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ!")
                                    print("üí° –†–ï–®–ï–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'xMidYMid slice' –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫—Ä–æ–ø–∞")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
                            width_match = re.search(r'width="([^"]+)"', image_element)
                            height_match = re.search(r'height="([^"]+)"', image_element)
                            
                            if width_match and height_match:
                                width = width_match.group(1)
                                height = height_match.group(1)
                                print(f"üìè –†–∞–∑–º–µ—Ä—ã image: {width}x{height}")
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                                try:
                                    w = float(width)
                                    h = float(height)
                                    ratio = w / h
                                    print(f"üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {ratio:.3f}")
                                    
                                    if ratio != 1.0:
                                        print(f"‚ö†Ô∏è Image –Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π ({w}x{h}), –Ω–æ headshot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 120x120")
                                except:
                                    pass

def test_headshot_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ headshot"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø HEADSHOT")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º main.svg
    try:
        with open('main.svg', 'r', encoding='utf-8') as f:
            svg_content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª main.svg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    analyze_headshot_structure(svg_content)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    fixed_svg = fix_headshot_aspect_ratio(svg_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if fixed_svg != svg_content:
        with open('main_fixed_headshot.svg', 'w', encoding='utf-8') as f:
            f.write(fixed_svg)
        
        print(f"\n‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: main_fixed_headshot.svg")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å
        if 'preserveAspectRatio="xMidYMid slice"' in fixed_svg:
            print("‚úÖ preserveAspectRatio –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ 'xMidYMid slice'")
        else:
            print("‚ùå preserveAspectRatio –Ω–µ –±—ã–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        print("\n‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω")

if __name__ == "__main__":
    test_headshot_fix()