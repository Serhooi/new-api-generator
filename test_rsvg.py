#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º rsvg-convert –¥–ª—è SVG ‚Üí PNG
"""

import subprocess
import os
import tempfile

def test_rsvg_convert():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º rsvg-convert"""
    
    print("üé® –¢–ï–°–¢ RSVG-CONVERT")
    print("=" * 25)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rsvg-convert —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        result = subprocess.run(['rsvg-convert', '--version'], 
                              capture_output=True, text=True, timeout=5)
        
        if result.returncode == 0:
            print(f"‚úÖ rsvg-convert –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
        else:
            print("‚ùå rsvg-convert –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π SVG
        test_svg = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="#e3f2fd"/>
            <rect x="20" y="20" width="360" height="260" fill="white" stroke="#1976d2" stroke-width="3"/>
            <text x="200" y="80" text-anchor="middle" font-size="28" fill="#1976d2" font-weight="bold">RSVG Convert</text>
            <text x="200" y="120" text-anchor="middle" font-size="18" fill="#666">Fast SVG to PNG</text>
            <rect x="50" y="140" width="300" height="80" fill="#4caf50"/>
            <text x="200" y="190" text-anchor="middle" font-size="24" fill="white" font-weight="bold">SUCCESS!</text>
            <text x="200" y="250" text-anchor="middle" font-size="14" fill="#333">Native Performance</text>
        </svg>'''
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(mode='w', suffix='.svg', delete=False) as svg_file:
            svg_file.write(test_svg)
            svg_path = svg_file.name
        
        png_path = 'test_rsvg.png'
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ rsvg-convert
        print("üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG —á–µ—Ä–µ–∑ rsvg-convert...")
        
        cmd = [
            'rsvg-convert',
            '--format', 'png',
            '--width', '400',
            '--height', '300',
            '--output', png_path,
            svg_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SVG
        os.unlink(svg_path)
        
        if result.returncode == 0:
            if os.path.exists(png_path):
                size = os.path.getsize(png_path)
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {size} bytes")
                
                if size > 3000:
                    print("üéâ RSVG-CONVERT –†–ê–ë–û–¢–ê–ï–¢!")
                    os.remove(png_path)
                    return True
                else:
                    print("‚ö†Ô∏è PNG —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π")
            else:
                print("‚ùå PNG —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ rsvg-convert: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç rsvg-convert")
    except FileNotFoundError:
        print("‚ùå rsvg-convert –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

def create_rsvg_function():
    """–°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rsvg-convert"""
    
    function_code = '''
def convert_svg_to_png_rsvg(svg_content, output_path, width=1080, height=1350):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG —á–µ—Ä–µ–∑ rsvg-convert (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    """
    import subprocess
    import tempfile
    import os
    
    try:
        print(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG —á–µ—Ä–µ–∑ rsvg-convert...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SVG —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.svg', delete=False) as svg_file:
            svg_file.write(svg_content)
            svg_path = svg_file.name
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ rsvg-convert
        cmd = [
            'rsvg-convert',
            '--format', 'png',
            '--width', str(width),
            '--height', str(height),
            '--output', output_path,
            svg_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SVG
        os.unlink(svg_path)
        
        if result.returncode == 0:
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ rsvg-convert: {output_path}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ rsvg-convert: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ rsvg-convert: {e}")
        return False

def convert_svg_to_png_ultimate_rsvg(svg_content, output_path, width=1080, height=1350):
    """
    –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å rsvg-convert –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
    """
    
    # –ú–µ—Ç–æ–¥ 1: rsvg-convert (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –Ω–∞—Ç–∏–≤–Ω—ã–π)
    if convert_svg_to_png_rsvg(svg_content, output_path, width, height):
        return True
    
    # –ú–µ—Ç–æ–¥ 2: Playwright (–µ—Å–ª–∏ rsvg-convert –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    try:
        from playwright.sync_api import sync_playwright
        print("üé≠ –ü—Ä–æ–±—É—é Playwright...")
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ 
                    margin: 0; 
                    padding: 0; 
                    background: white;
                    width: {width}px;
                    height: {height}px;
                    overflow: hidden;
                }}
                svg {{ 
                    width: {width}px; 
                    height: {height}px; 
                    display: block;
                }}
            </style>
        </head>
        <body>
            {svg_content}
        </body>
        </html>
        """
        
        with sync_playwright() as p:
            browser = p.chromium.launch()
            page = browser.new_page(viewport={{'width': width, 'height': height}})
            page.set_content(html_content)
            page.wait_for_load_state('networkidle')
            page.screenshot(path=output_path, full_page=False)
            browser.close()
        
        print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Playwright: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Playwright: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: PIL fallback
    try:
        from PIL import Image, ImageDraw, ImageFont
        import re
        
        print("üé® –°–æ–∑–¥–∞—é PNG —á–µ—Ä–µ–∑ PIL fallback...")
        
        img = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(img)
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        colors = re.findall(r'fill="([^"]+)"', svg_content)
        texts = re.findall(r'<text[^>]*>([^<]+)</text>', svg_content)
        
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            font = ImageFont.load_default()
        
        y_pos = 50
        for text in texts[:5]:
            if text.strip():
                draw.text((50, y_pos), text.strip(), fill='black', font=font)
                y_pos += 40
        
        draw.rectangle([10, 10, width-10, height-10], outline='gray', width=2)
        img.save(output_path, 'PNG', quality=95)
        
        print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PIL: {e}")
    
    return False
'''
    
    with open('rsvg_functions.py', 'w') as f:
        f.write(function_code)
    
    print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª rsvg_functions.py")

def test_rsvg_with_dyno():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º rsvg-convert —Å dyno –ø–æ–ª—è–º–∏"""
    
    print("\nüîÑ –¢–ï–°–¢ RSVG –° DYNO –ü–û–õ–Ø–ú–ò")
    print("=" * 30)
    
    import sys
    sys.path.append('.')
    
    try:
        from app import create_preview_svg
        
        # SVG —Å dyno –ø–æ–ª—è–º–∏
        svg_with_dyno = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="#f0f8ff"/>
            <rect x="20" y="20" width="360" height="260" fill="white" stroke="#1976d2" stroke-width="2"/>
            <text x="200" y="60" text-anchor="middle" font-size="20" fill="#1976d2" font-weight="bold">{{dyno.agentName}}</text>
            <text x="200" y="90" text-anchor="middle" font-size="14" fill="#666">{{dyno.propertyAddress}}</text>
            <rect x="50" y="110" width="300" height="60" fill="#4caf50"/>
            <text x="200" y="150" text-anchor="middle" font-size="22" fill="white" font-weight="bold">{{dyno.price}}</text>
            <text x="200" y="200" text-anchor="middle" font-size="12" fill="#333">{{dyno.bedrooms}} bed ‚Ä¢ {{dyno.bathrooms}} bath</text>
            <text x="200" y="220" text-anchor="middle" font-size="12" fill="#333">{{dyno.sqft}} sq ft</text>
        </svg>'''
        
        # –ó–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª—è
        preview_svg = create_preview_svg(svg_with_dyno)
        print("‚úÖ Dyno –ø–æ–ª—è –∑–∞–º–µ–Ω–µ–Ω—ã")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ rsvg-convert
        with tempfile.NamedTemporaryFile(mode='w', suffix='.svg', delete=False) as svg_file:
            svg_file.write(preview_svg)
            svg_path = svg_file.name
        
        png_path = 'test_rsvg_dyno.png'
        
        cmd = [
            'rsvg-convert',
            '--format', 'png',
            '--width', '400',
            '--height', '300',
            '--output', png_path,
            svg_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        os.unlink(svg_path)
        
        if result.returncode == 0 and os.path.exists(png_path):
            size = os.path.getsize(png_path)
            print(f"‚úÖ PNG —Å dyno –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω: {size} bytes")
            os.remove(png_path)
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RSVG-CONVERT")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º rsvg-convert
    rsvg_ok = test_rsvg_convert()
    dyno_ok = test_rsvg_with_dyno()
    
    print("\n" + "=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üé® rsvg-convert: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if rsvg_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üîÑ rsvg + Dyno: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dyno_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if rsvg_ok and dyno_ok:
        print("\nüéâ RSVG-CONVERT –ì–û–¢–û–í!")
        print("‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        print("‚úÖ –¢–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ SVG")
        print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ dyno –ø–æ–ª–µ–π")
        print("‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç Python –±–∏–±–ª–∏–æ—Ç–µ–∫")
        
        create_rsvg_function()
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è app.py")
        
        print("\nüìã –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ rsvg-convert:")
        print("‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ (–Ω–∞—Ç–∏–≤–Ω—ã–π C)")
        print("‚Ä¢ –¢–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ SVG")
        print("‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å rsvg-convert")