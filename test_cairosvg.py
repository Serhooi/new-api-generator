#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º CairoSVG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG
"""

import os

def test_cairosvg():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º CairoSVG"""
    
    print("üé® –¢–ï–°–¢ CAIROSVG")
    print("=" * 30)
    
    try:
        import cairosvg
        print("‚úÖ CairoSVG –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π SVG
        test_svg = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="#e3f2fd"/>
            <rect x="20" y="20" width="360" height="260" fill="white" stroke="#1976d2" stroke-width="3"/>
            <text x="200" y="80" text-anchor="middle" font-size="28" fill="#1976d2" font-weight="bold">Real Estate</text>
            <text x="200" y="120" text-anchor="middle" font-size="18" fill="#666">123 Main Street</text>
            <rect x="50" y="140" width="300" height="80" fill="#4caf50"/>
            <text x="200" y="190" text-anchor="middle" font-size="24" fill="white" font-weight="bold">$750,000</text>
            <text x="200" y="240" text-anchor="middle" font-size="16" fill="#333">3 bed ‚Ä¢ 2 bath ‚Ä¢ 2,500 sq ft</text>
        </svg>'''
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        output_file = 'test_cairosvg.png'
        
        print("üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG —á–µ—Ä–µ–∑ CairoSVG...")
        
        cairosvg.svg2png(
            bytestring=test_svg.encode('utf-8'),
            write_to=output_file,
            output_width=400,
            output_height=300
        )
        
        if os.path.exists(output_file):
            size = os.path.getsize(output_file)
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {size} bytes")
            
            if size > 5000:
                print("‚úÖ CairoSVG —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
                os.remove(output_file)
                return True
            else:
                print("‚ö†Ô∏è PNG —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π")
        else:
            print("‚ùå PNG —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
    except ImportError:
        print("‚ùå CairoSVG –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CairoSVG: {e}")
    
    return False

def test_cairosvg_with_dyno():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º CairoSVG —Å dyno –ø–æ–ª—è–º–∏"""
    
    print("\nüîÑ –¢–ï–°–¢ CAIROSVG –° DYNO –ü–û–õ–Ø–ú–ò")
    print("=" * 35)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–º–µ–Ω—ã dyno –ø–æ–ª–µ–π
    import sys
    sys.path.append('.')
    
    try:
        from app import create_preview_svg
        
        # SVG —Å dyno –ø–æ–ª—è–º–∏
        svg_with_dyno = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="#f0f8ff"/>
            <rect x="20" y="20" width="360" height="260" fill="white" stroke="#1976d2" stroke-width="2"/>
            <text x="200" y="60" text-anchor="middle" font-size="20" fill="#1976d2" font-weight="bold">{{dyno.agentName}}</text>
            <text x="200" y="90" text-anchor="middle" font-size="14" fill="#666">{{dyno.propertyAddress}}</text>
            <rect x="50" y="110" width="300" height="60" fill="#4caf50"/>
            <text x="200" y="150" text-anchor="middle" font-size="22" fill="white" font-weight="bold">{{dyno.price}}</text>
            <text x="200" y="200" text-anchor="middle" font-size="12" fill="#333">{{dyno.bedrooms}} bed ‚Ä¢ {{dyno.bathrooms}} bath</text>
            <text x="200" y="220" text-anchor="middle" font-size="12" fill="#333">{{dyno.sqft}} sq ft</text>
            <text x="200" y="260" text-anchor="middle" font-size="10" fill="#999">{{dyno.agentPhone}}</text>
        </svg>'''
        
        # –ó–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª—è
        preview_svg = create_preview_svg(svg_with_dyno)
        print("‚úÖ Dyno –ø–æ–ª—è –∑–∞–º–µ–Ω–µ–Ω—ã")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ CairoSVG
        import cairosvg
        
        output_file = 'test_cairosvg_dyno.png'
        
        cairosvg.svg2png(
            bytestring=preview_svg.encode('utf-8'),
            write_to=output_file,
            output_width=400,
            output_height=300
        )
        
        if os.path.exists(output_file):
            size = os.path.getsize(output_file)
            print(f"‚úÖ PNG —Å dyno –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω: {size} bytes")
            os.remove(output_file)
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

def create_cairosvg_function():
    """–°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å CairoSVG"""
    
    function_code = '''
def convert_svg_to_png_cairo(svg_content, output_path, width=1080, height=1350):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG —á–µ—Ä–µ–∑ CairoSVG (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥)
    """
    try:
        print(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG —á–µ—Ä–µ–∑ CairoSVG...")
        
        import cairosvg
        
        cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            write_to=output_path,
            output_width=width,
            output_height=height
        )
        
        print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ CairoSVG: {output_path}")
        return True
        
    except ImportError:
        print("‚ùå CairoSVG –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CairoSVG: {e}")
        return False

def convert_svg_to_png_ultimate(svg_content, output_path, width=1080, height=1350):
    """
    –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –º–µ—Ç–æ–¥–æ–≤:
    1. CairoSVG (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π)
    2. Playwright (–µ—Å–ª–∏ CairoSVG –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    3. –£–º–Ω—ã–π PIL fallback (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤)
    """
    
    # –ú–µ—Ç–æ–¥ 1: CairoSVG
    if convert_svg_to_png_cairo(svg_content, output_path, width, height):
        return True
    
    # –ú–µ—Ç–æ–¥ 2: Playwright
    try:
        from playwright.sync_api import sync_playwright
        print("üé≠ –ü—Ä–æ–±—É—é Playwright...")
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ 
                    margin: 0; 
                    padding: 0; 
                    background: white;
                    width: {width}px;
                    height: {height}px;
                    overflow: hidden;
                }}
                svg {{ 
                    width: {width}px; 
                    height: {height}px; 
                    display: block;
                }}
            </style>
        </head>
        <body>
            {svg_content}
        </body>
        </html>
        """
        
        with sync_playwright() as p:
            browser = p.chromium.launch()
            page = browser.new_page(viewport={{'width': width, 'height': height}})
            page.set_content(html_content)
            page.wait_for_load_state('networkidle')
            page.screenshot(path=output_path, full_page=False)
            browser.close()
        
        print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Playwright: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Playwright: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: –£–º–Ω—ã–π PIL fallback
    try:
        from PIL import Image, ImageDraw, ImageFont
        import re
        
        print("üé® –°–æ–∑–¥–∞—é PNG —á–µ—Ä–µ–∑ —É–º–Ω—ã–π PIL fallback...")
        
        img = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(img)
        
        # –ü–∞—Ä—Å–∏–º —Ü–≤–µ—Ç–∞ –∏–∑ SVG
        colors = re.findall(r'fill="([^"]+)"', svg_content)
        bg_colors = [c for c in colors if c not in ['none', 'transparent']]
        
        if bg_colors:
            try:
                bg_color = bg_colors[0]
                if bg_color.startswith('#'):
                    img = Image.new('RGB', (width, height), color=bg_color)
                    draw = ImageDraw.Draw(img)
            except:
                pass
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        texts = re.findall(r'<text[^>]*>([^<]+)</text>', svg_content)
        
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            font = ImageFont.load_default()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        y_pos = 50
        for text in texts[:5]:
            if text.strip():
                try:
                    draw.text((50, y_pos), text.strip(), fill='black', font=font)
                    y_pos += 40
                except:
                    pass
        
        # –†–∞–º–∫–∞
        draw.rectangle([10, 10, width-10, height-10], outline='gray', width=2)
        
        img.save(output_path, 'PNG', quality=95)
        print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PIL fallback: {e}")
    
    print("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return False
'''
    
    return function_code

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CAIROSVG")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CairoSVG
    cairo_ok = test_cairosvg()
    dyno_ok = test_cairosvg_with_dyno()
    
    print("\n" + "=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üé® CairoSVG: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if cairo_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üîÑ CairoSVG + Dyno: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dyno_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if cairo_ok and dyno_ok:
        print("\nüéâ CAIROSVG –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∏ —Ç–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG ‚Üí PNG")
        print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ dyno –ø–æ–ª–µ–π")
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("\nüìã –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ CairoSVG:")
        print("‚Ä¢ –í 10x –±—ã—Å—Ç—Ä–µ–µ —á–µ–º Playwright")
        print("‚Ä¢ –¢–æ—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ SVG")
        print("‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
        print("‚Ä¢ –ú–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
        
        print("\nüîß –ì–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–∏—Ç—å app.py —Å CairoSVG!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å CairoSVG")