#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª—è–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Playwright –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º PIL fallback
"""

import subprocess
import sys
import os

def install_playwright():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Playwright"""
    print("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Playwright...")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º playwright
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'playwright'], check=True)
        print("‚úÖ Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
        subprocess.run([sys.executable, '-m', 'playwright', 'install', 'chromium'], check=True)
        print("‚úÖ Chromium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright: {e}")
        return False

def create_improved_svg_to_png():
    """–°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG"""
    
    function_code = '''
def convert_svg_to_png_improved(svg_content, output_path, width=1080, height=1350):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG —Å Playwright –∏ —É–º–Ω—ã–º PIL fallback
    """
    try:
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG...")
        
        # –ü—Ä–æ–±—É–µ–º Playwright
        try:
            from playwright.sync_api import sync_playwright
            
            # –°–æ–∑–¥–∞–µ–º HTML —Å SVG
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <style>
                    body {{ 
                        margin: 0; 
                        padding: 0; 
                        background: white;
                        width: {width}px;
                        height: {height}px;
                        overflow: hidden;
                    }}
                    svg {{ 
                        width: {width}px; 
                        height: {height}px; 
                        display: block;
                    }}
                </style>
            </head>
            <body>
                {svg_content}
            </body>
            </html>
            """
            
            with sync_playwright() as p:
                browser = p.chromium.launch()
                page = browser.new_page(viewport={{'width': width, 'height': height}})
                page.set_content(html_content)
                page.wait_for_load_state('networkidle')
                page.screenshot(path=output_path, full_page=False)
                browser.close()
            
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Playwright: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Playwright –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        # –£–º–Ω—ã–π PIL fallback - –ø–∞—Ä—Å–∏–º SVG –∏ —Å–æ–∑–¥–∞–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            from PIL import Image, ImageDraw, ImageFont
            import re
            
            print("üé® –°–æ–∑–¥–∞—é PNG —á–µ—Ä–µ–∑ —É–º–Ω—ã–π PIL fallback...")
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (width, height), color='white')
            draw = ImageDraw.Draw(img)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–≤–µ—Ç–∞ –≤ SVG
            colors = re.findall(r'fill="([^"]+)"', svg_content)
            bg_colors = [c for c in colors if c not in ['none', 'transparent']]
            
            if bg_colors:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –∫–∞–∫ —Ñ–æ–Ω
                try:
                    bg_color = bg_colors[0]
                    if bg_color.startswith('#'):
                        img = Image.new('RGB', (width, height), color=bg_color)
                        draw = ImageDraw.Draw(img)
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
            for y in range(height):
                alpha = int(255 * (1 - y / height * 0.1))
                color = (240, 248, 255, alpha) if len(bg_colors) == 0 else (200, 220, 240, alpha)
                try:
                    draw.line([(0, y), (width, y)], fill=color[:3])
                except:
                    pass
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ SVG
            texts = re.findall(r'<text[^>]*>([^<]+)</text>', svg_content)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
            try:
                font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
                small_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
            except:
                try:
                    font = ImageFont.load_default()
                    small_font = font
                except:
                    font = None
                    small_font = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            y_pos = 50
            for text in texts[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–∫—Å—Ç–æ–≤
                if text.strip():
                    try:
                        if font:
                            draw.text((50, y_pos), text.strip(), fill='black', font=font)
                        else:
                            draw.text((50, y_pos), text.strip(), fill='black')
                        y_pos += 40
                    except:
                        pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            draw.rectangle([10, 10, width-10, height-10], outline='gray', width=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
            if small_font:
                draw.text((width-150, height-30), "Generated PNG", fill='lightgray', font=small_font)
            else:
                draw.text((width-150, height-30), "Generated PNG", fill='lightgray')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            img.save(output_path, 'PNG', quality=95)
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —É–º–Ω—ã–π PIL fallback: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ PIL fallback: {e}")
            
            # –°–æ–≤—Å–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
            try:
                from PIL import Image, ImageDraw
                img = Image.new('RGB', (width, height), color='lightblue')
                draw = ImageDraw.Draw(img)
                draw.rectangle([20, 20, width-20, height-20], outline='navy', width=3)
                draw.text((width//2-50, height//2), "PNG Preview", fill='navy')
                img.save(output_path, 'PNG')
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π fallback: {output_path}")
                return True
            except Exception as e2:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PNG: {e2}")
                return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False
'''
    
    return function_code

def update_app_py():
    """–û–±–Ω–æ–≤–ª—è–µ–º app.py —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π"""
    
    print("üîß –û–±–Ω–æ–≤–ª—è—é app.py...")
    
    with open('app.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é convert_svg_to_png
    import re
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    old_function_pattern = r'def convert_svg_to_png\(.*?\n    except Exception as e:\s*\n        print\(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG: \{e\}"\)\s*\n        return False'
    
    new_function = create_improved_svg_to_png().strip()
    
    content = re.sub(old_function_pattern, new_function, content, flags=re.DOTALL)
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤—ã —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é
    content = content.replace('convert_svg_to_png(', 'convert_svg_to_png_improved(')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º PIL fallback –≤ generate_carousel
    content = re.sub(
        r'# Fallback —á–µ—Ä–µ–∑ PIL\s*\n\s*# Fallback —á–µ—Ä–µ–∑ PIL\s*\n\s*if not main_png_success:\s*\n\s*try:\s*\n\s*from PIL import Image, ImageDraw\s*\n\s*img = Image\.new\(\'RGB\', \(1080, 1350\), color=\'white\'\)\s*\n\s*draw = ImageDraw\.Draw\(img\)\s*\n\s*draw\.text\(\(50, 50\), "Main Slide Preview", fill=\'black\'\)\s*\n\s*draw\.text\(\(50, 100\), f"Template: \{main_name\}", fill=\'gray\'\)\s*\n\s*draw\.rectangle\(\[20, 20, 1060, 1330\], outline=\'gray\', width=2\)\s*\n\s*img\.save\(main_png_path\)\s*\n\s*main_png_success = True\s*\n\s*print\(f"‚úÖ Main PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback"\)\s*\n\s*print\(f"‚úÖ Main PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback"\)\s*\n\s*except Exception as e:\s*\n\s*print\(f"‚ùå PIL fallback –æ—à–∏–±–∫–∞: \{e\}"\)\s*\n\s*print\(f"‚ùå PIL fallback –æ—à–∏–±–∫–∞: \{e\}"\)',
        '''# –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback —á–µ—Ä–µ–∑ convert_svg_to_png_improved
            if not main_png_success:
                main_png_success = convert_svg_to_png_improved(main_svg_processed, main_png_path)''',
        content,
        flags=re.DOTALL
    )
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è photo PNG
    content = re.sub(
        r'# Fallback —á–µ—Ä–µ–∑ PIL\s*\n\s*# Fallback —á–µ—Ä–µ–∑ PIL\s*\n\s*if not photo_png_success:\s*\n\s*try:\s*\n\s*from PIL import Image, ImageDraw\s*\n\s*img = Image\.new\(\'RGB\', \(1080, 1350\), color=\'white\'\)\s*\n\s*draw = ImageDraw\.Draw\(img\)\s*\n\s*draw\.text\(\(50, 50\), "Photo Slide Preview", fill=\'black\'\)\s*\n\s*draw\.text\(\(50, 100\), f"Template: \{photo_name\}", fill=\'gray\'\)\s*\n\s*draw\.rectangle\(\[20, 20, 1060, 1330\], outline=\'gray\', width=2\)\s*\n\s*img\.save\(photo_png_path\)\s*\n\s*photo_png_success = True\s*\n\s*print\(f"‚úÖ Photo PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback"\)\s*\n\s*print\(f"‚úÖ Photo PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback"\)\s*\n\s*except Exception as e:\s*\n\s*print\(f"‚ùå PIL fallback –æ—à–∏–±–∫–∞ –¥–ª—è photo: \{e\}"\)\s*\n\s*print\(f"‚ùå PIL fallback –æ—à–∏–±–∫–∞ –¥–ª—è photo: \{e\}"\)',
        '''# –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback —á–µ—Ä–µ–∑ convert_svg_to_png_improved
            if not photo_png_success:
                photo_png_success = convert_svg_to_png_improved(photo_svg_processed, photo_png_path)''',
        content,
        flags=re.DOTALL
    )
    
    with open('app.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π!")

def test_png_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–£–Æ PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–Æ")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π SVG —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    test_svg = '''<svg width="1080" height="1350" xmlns="http://www.w3.org/2000/svg">
        <rect width="1080" height="1350" fill="#f0f8ff"/>
        <rect x="40" y="40" width="1000" height="1270" fill="white" stroke="#1976d2" stroke-width="4"/>
        <text x="540" y="150" text-anchor="middle" font-size="48" fill="#1976d2" font-weight="bold">Real Estate</text>
        <text x="540" y="220" text-anchor="middle" font-size="32" fill="#666">Premium Property</text>
        <rect x="100" y="300" width="880" height="500" fill="#e3f2fd" stroke="#1976d2" stroke-width="2"/>
        <text x="540" y="580" text-anchor="middle" font-size="24" fill="#333">Beautiful Home</text>
        <text x="540" y="620" text-anchor="middle" font-size="20" fill="#666">3 bed ‚Ä¢ 2 bath ‚Ä¢ 2,500 sq ft</text>
        <text x="540" y="900" text-anchor="middle" font-size="36" fill="#1976d2" font-weight="bold">$750,000</text>
        <text x="540" y="1000" text-anchor="middle" font-size="18" fill="#666">Contact us today!</text>
        <text x="540" y="1200" text-anchor="middle" font-size="16" fill="#999">Generated with improved PNG system</text>
    </svg>'''
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ app.py
    exec(create_improved_svg_to_png())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_output = 'test_improved_png.png'
    
    if convert_svg_to_png_improved(test_svg, test_output):
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        if os.path.exists(test_output):
            size = os.path.getsize(test_output)
            print(f"üìä –†–∞–∑–º–µ—Ä PNG: {size} bytes")
            
            if size > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                print("‚úÖ PNG —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ!")
                return True
            else:
                print("‚ùå PNG —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π")
        else:
            print("‚ùå PNG —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    return False

if __name__ == "__main__":
    print("üöÄ –ò–°–ü–†–ê–í–õ–Ø–ï–ú PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–Æ")
    print("=" * 50)
    
    # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Playwright
    playwright_installed = install_playwright()
    
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º app.py
    update_app_py()
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º
    if test_png_conversion():
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û!")
        print("‚úÖ Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if playwright_installed else "‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ PIL fallback —É–ª—É—á—à–µ–Ω")
        print("‚úÖ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–º–Ω–æ–π PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π")
        print("‚úÖ PNG –ø—Ä–µ–≤—å—é —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏")
        print("\nüìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:")
        print("‚Ä¢ Playwright –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("‚Ä¢ PIL fallback —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏—Ç SVG –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ü–≤–µ—Ç–∞, —Ç–µ–∫—Å—Ç –∏ —Ä–∞–º–∫–∏ –≤ PNG –ø—Ä–µ–≤—å—é")
        print("‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π")
        print("–ù–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã –≤ app.py")