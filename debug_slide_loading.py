#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–∞–π–¥–æ–≤
"""

import requests
import json
import re

def test_carousel_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL —Å–ª–∞–π–¥–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–£–°–ï–õ–ò –ò –ü–†–û–í–ï–†–ö–ò URL")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_data = {
        "dyno.agentName": "–¢–µ—Å—Ç –ê–≥–µ–Ω—Ç",
        "dyno.agentPhone": "+1234567890", 
        "dyno.agentEmail": "test@example.com",
        "dyno.price": "$500,000",
        "dyno.propertyAddress": "123 Test Street",
        "dyno.bedrooms": "3",
        "dyno.bathrooms": "2",
        "dyno.date": "Aug 12, 2025",
        "dyno.time": "2:00 PM",
        "dyno.propertyimage": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300",
        "dyno.propertyimage2": "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=400&h=300", 
        "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=120&h=120&fit=crop&crop=face",
        "dyno.logo": "https://images.unsplash.com/photo-1599305445671-ac291c95aaa9?w=142&h=56",
        "dyno.propertyfeatures": "–ë–∞—Å—Å–µ–π–Ω, –≥–∞—Ä–∞–∂, —Å–∞–¥"
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏...")
        
        response = requests.post(
            'http://localhost:5000/api/carousel/create-and-generate',
            json=test_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üÜî ID –∫–∞—Ä—É—Å–µ–ª–∏: {result.get('carousel_id', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã
            slides = result.get('slides', [])
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: {len(slides)}")
            
            for i, slide in enumerate(slides):
                slide_type = slide.get('type', 'unknown')
                slide_url = slide.get('url', 'N/A')
                
                print(f"\nüìã –°–ª–∞–π–¥ {i+1} ({slide_type}):")
                print(f"   URL: {slide_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
                if slide_url and slide_url != 'N/A':
                    check_slide_url(slide_url, i+1)
                else:
                    print("   ‚ùå URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            return result
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:500]}...")
            return None
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 app.py")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def check_slide_url(url, slide_num):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL —Å–ª–∞–π–¥–∞"""
    
    try:
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–∞–π–¥–∞ {slide_num}...")
        
        response = requests.get(url, timeout=10, headers={
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        if response.status_code == 200:
            content = response.text
            size = len(content)
            print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {size} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ SVG
            if content.strip().startswith('<?xml') or content.strip().startswith('<svg'):
                print("   ‚úÖ –≠—Ç–æ SVG —Ñ–∞–π–ª")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG
                image_count = content.count('<image')
                base64_count = content.count('data:image/')
                print(f"   üìä Image —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {image_count}")
                print(f"   üìä Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {base64_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG
                width_match = re.search(r'width="([^"]*)"', content)
                height_match = re.search(r'height="([^"]*)"', content)
                if width_match and height_match:
                    print(f"   üìê –†–∞–∑–º–µ—Ä—ã: {width_match.group(1)} x {height_match.group(1)}")
                
            else:
                print("   ‚ùå –ù–µ SVG —Ñ–∞–π–ª")
                print(f"   üìÑ –ù–∞—á–∞–ª–æ: {content[:100]}...")
                
        elif response.status_code == 403:
            print("   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å CORS –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
        elif response.status_code == 404:
            print("   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except requests.exceptions.Timeout:
        print("   ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_supabase_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Supabase"""
    
    print("\nüß™ –¢–ï–°–¢ –î–û–°–¢–£–ü–ê –ö SUPABASE")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL Supabase (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ª–æ–≥–æ–≤)
    test_url = "https://vahgmyuowsilbxqdjjii.supabase.co/storage/v1/object/public/images/carousel/"
    
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ Supabase: {test_url}")
        
        response = requests.get(test_url, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω")
        elif response.status_code == 404:
            print("‚ö†Ô∏è –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Supabase: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase: {e}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É"""
    
    print("üöÄ –û–¢–õ–ê–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò –°–õ–ê–ô–î–û–í")
    print("=" * 70)
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python3 app.py")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase
    test_supabase_access()
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–∞–π–¥—ã
    result = test_carousel_creation()
    
    print("\nüéØ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    
    if result:
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ URL —Å–ª–∞–π–¥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SVG —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL")
    else:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´:")
        print("1. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()