#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ API —à–∞–±–ª–æ–Ω–æ–≤
"""
import requests
import json

BASE_URL = "https://new-api-generator.onrender.com"

def debug_templates_api():
    """–û—Ç–ª–∞–¥–∫–∞ API —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ API —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/templates/all-previews", timeout=30)
        print(f"Status: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            print(f"\nüìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:")
            raw_text = response.text
            print(f"–¢–∏–ø: {type(raw_text)}")
            print(f"–î–ª–∏–Ω–∞: {len(raw_text)}")
            print(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(raw_text[:500])
            
            print(f"\nüìÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
            try:
                data = response.json()
                print(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                
                if isinstance(data, dict):
                    print(f"–°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: {list(data.keys())}")
                    print(f"–ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:")
                    print(json.dumps(data, indent=2, ensure_ascii=False))
                    
                elif isinstance(data, list):
                    print(f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if data:
                        print(f"–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç:")
                        print(json.dumps(data[0], indent=2, ensure_ascii=False))
                else:
                    print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(data)}")
                    print(f"–î–∞–Ω–Ω—ã–µ: {data}")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_specific_template_preview():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
    
    template_ids = ["propertyimage2", "test_template", "main_template"]
    
    for template_id in template_ids:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: {template_id}")
        
        try:
            response = requests.get(f"{BASE_URL}/api/templates/{template_id}/preview", timeout=30)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                print(f"   ‚úÖ –ü—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω–æ!")
                print(f"   üìÑ Content-Type: {content_type}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
                
                if 'json' in content_type:
                    try:
                        data = response.json()
                        print(f"   üìÑ JSON –¥–∞–Ω–Ω—ã–µ:")
                        print(f"   {json.dumps(data, indent=4, ensure_ascii=False)}")
                    except:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
                        
            elif response.status_code == 404:
                print(f"   ‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    debug_templates_api()
    test_specific_template_preview()
    
    print(f"\n" + "=" * 50)
    print("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")