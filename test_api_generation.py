#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
"""

import requests
import json

def test_carousel_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ —á–µ—Ä–µ–∑ API"""
    
    print("üß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ê–†–£–°–ï–õ–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        health_response = requests.get("http://localhost:5000/api/health", timeout=5)
        print(f"üè• –°–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç—É—Å: {health_response.status_code}")
        
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    try:
        templates_response = requests.get("http://localhost:5000/api/templates/all-previews", timeout=10)
        print(f"üìã –®–∞–±–ª–æ–Ω—ã —Å—Ç–∞—Ç—É—Å: {templates_response.status_code}")
        
        if templates_response.status_code == 200:
            templates_data = templates_response.json()
            templates = templates_data.get('templates', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            
            # –ò—â–µ–º main –∏ photo —à–∞–±–ª–æ–Ω—ã
            main_template = None
            photo_template = None
            
            for template in templates:
                if template.get('template_role') == 'main':
                    main_template = template
                elif template.get('template_role') == 'photo':
                    photo_template = template
            
            if not main_template or not photo_template:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã main –∏–ª–∏ photo —à–∞–±–ª–æ–Ω—ã")
                return
                
            print(f"‚úÖ Main —à–∞–±–ª–æ–Ω: {main_template['name']} (ID: {main_template['id']})")
            print(f"‚úÖ Photo —à–∞–±–ª–æ–Ω: {photo_template['name']} (ID: {photo_template['id']})")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {templates_response.text}")
            return
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    test_data = {
        "main_template_id": main_template['id'],
        "photo_template_id": photo_template['id'],
        "data": {
            "dyno.propertyaddress": "123 Test Street, Test City",
            "dyno.price": "$500,000",
            "dyno.propertyimage": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300",
            "dyno.propertyimage2": "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=400&h=300",
            "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200",
            "dyno.name": "John Smith",
            "dyno.phone": "(555) 123-4567",
            "dyno.email": "john@example.com",
            "dyno.date": "MAY 20 2025",
            "dyno.time": "2:00 PM - 4:00 PM",
            "dyno.bedrooms": "4",
            "dyno.bathrooms": "3",
            "dyno.logo": "REALTY CO"
        }
    }
    
    print("\\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2)}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        generation_response = requests.post(
            "http://localhost:5000/api/generate/carousel",
            json=test_data,
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        )
        
        print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å: {generation_response.status_code}")
        
        if generation_response.status_code == 200:
            result = generation_response.json()
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print("\\nüìã –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:")
            print(f"üÜî Carousel ID: {result.get('carousel_id')}")
            print(f"‚úÖ Success: {result.get('success')}")
            print(f"üìä Status: {result.get('status')}")
            print(f"üî¢ Slides count: {result.get('slides_count')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if 'images' in result:
                print(f"\\nüñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ({len(result['images'])}):")
                for i, url in enumerate(result['images']):
                    print(f"  {i+1}. {url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ URL
                    try:
                        url_response = requests.head(url, timeout=10)
                        print(f"     üìä –°—Ç–∞—Ç—É—Å: {url_response.status_code}")
                        
                        if url_response.status_code == 200:
                            content_type = url_response.headers.get('content-type', 'unknown')
                            print(f"     üìÑ Content-Type: {content_type}")
                        else:
                            print(f"     ‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                            
                    except requests.exceptions.RequestException as e:
                        print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
            if 'slides' in result:
                print(f"\\nüé† SLIDES: {result['slides']}")
            
            if 'main_url' in result:
                print(f"\\nüéØ Main URL: {result['main_url']}")
            
            if 'photo_url' in result:
                print(f"üì∏ Photo URL: {result['photo_url']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\\nüîç –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
            print(json.dumps(result, indent=2))
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    test_carousel_generation()