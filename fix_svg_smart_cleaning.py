#!/usr/bin/env python3
"""
–£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –∏—Ö
"""

import re

def smart_svg_cleaning(svg_content):
    """
    –£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    print("üß† –£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    cleaned = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
    cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
    
    # 3. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏ - –ù–ï —É–¥–∞–ª—è–µ–º, –∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    # –ò—â–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ image —Ç–µ–≥–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
    def fix_image_tag(match):
        tag_content = match.group(1)
        # –ï—Å–ª–∏ —Ç–µ–≥ —É–∂–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if tag_content.endswith('/'):
            return match.group(0)
        # –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º—Å—è
        return f'<image{tag_content}/>'
    
    cleaned = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned)
    
    # 4. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
    def fix_use_tag(match):
        tag_content = match.group(1)
        if tag_content.endswith('/'):
            return match.group(0)
        return f'<use{tag_content}/>'
    
    cleaned = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
    self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
    
    for tag in self_closing_tags:
        def fix_tag(match):
            tag_content = match.group(1)
            if tag_content.endswith('/'):
                return match.group(0)
            return f'<{tag}{tag_content}/>'
        
        cleaned = re.sub(f'<{tag}([^>]*?)>', fix_tag, cleaned)
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    
    print(f"üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return cleaned

def update_app_with_smart_cleaning():
    """–û–±–Ω–æ–≤–ª—è–µ–º app.py —Å —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    
    print("üìù –ß–∏—Ç–∞—é app.py...")
    
    with open('app.py', 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ä–∞–¥–∏–∫–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –Ω–∞ —É–º–Ω—É—é
    old_cleaning = '''            # –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG - –£–ë–ò–†–ê–ï–ú –í–°–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–ì–ò
            print("üî• –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - —É–±–∏—Ä–∞—é –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –†–ê–î–ò–ö–ê–õ–¨–ù–û - –£–ë–ò–†–ê–ï–ú –í–°–ï IMAGE –¢–ï–ì–ò –ü–û–õ–ù–û–°–¢–¨–Æ
            print("üö® –£–±–∏—Ä–∞—é –≤—Å–µ image —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é...")
            cleaned_svg = re.sub(r'<image[^>]*/?>', '', cleaned_svg)
            
            # 4. –£–ë–ò–†–ê–ï–ú –í–°–ï USE –¢–ï–ì–ò –ü–û–õ–ù–û–°–¢–¨–Æ
            print("üö® –£–±–∏—Ä–∞—é –≤—Å–µ use —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é...")
            cleaned_svg = re.sub(r'<use[^>]*/?>', '', cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
            self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
            
            for tag in self_closing_tags:
                cleaned_svg = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\\\1/>', cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üî• –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    new_cleaning = '''            # –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –¢–ï–ì–ò, –ù–û –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
            print("üß† –£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏ - –ù–ï —É–¥–∞–ª—è–µ–º, –∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            def fix_image_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<image{tag_content}/>'
            
            cleaned_svg = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned_svg)
            
            # 4. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
            def fix_use_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<use{tag_content}/>'
            
            cleaned_svg = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
            self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
            
            for tag in self_closing_tags:
                def fix_tag_func(match):
                    tag_content = match.group(1)
                    if tag_content.endswith('/'):
                        return match.group(0)
                    return f'<{tag}{tag_content}/>'
                
                cleaned_svg = re.sub(f'<{tag}([^>]*?)>', fix_tag_func, cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥
    if old_cleaning in content:
        content = content.replace(old_cleaning, new_cleaning)
        print("‚úÖ –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —É–º–Ω—É—é!")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open('app.py', 'w') as f:
        f.write(content)
    
    print("üíæ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
    return True

def test_smart_cleaning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É –Ω–∞ main.svg...")
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π main.svg
    with open('main.svg', 'r') as f:
        svg_content = f.read()
    
    print(f"üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    image_tags_before = len(re.findall(r'<image[^>]*>', svg_content))
    use_tags_before = len(re.findall(r'<use[^>]*>', svg_content))
    
    print(f"üîç –î–æ –æ—á–∏—Å—Ç–∫–∏: {image_tags_before} image —Ç–µ–≥–æ–≤, {use_tags_before} use —Ç–µ–≥–æ–≤")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    cleaned = smart_svg_cleaning(svg_content)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    image_tags_after = len(re.findall(r'<image[^>]*>', cleaned))
    use_tags_after = len(re.findall(r'<use[^>]*>', cleaned))
    
    print(f"üîç –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {image_tags_after} image —Ç–µ–≥–æ–≤, {use_tags_after} use —Ç–µ–≥–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('smart_cleaned_main.svg', 'w') as f:
        f.write(cleaned)
    
    print("üíæ –£–º–Ω–æ –æ—á–∏—â–µ–Ω–Ω—ã–π SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: smart_cleaned_main.svg")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å
    if image_tags_after > 0:
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã!")
    
    return image_tags_after > 0

if __name__ == "__main__":
    print("üß† –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    success = test_smart_cleaning()
    
    if success:
        print("\n‚úÖ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        print("üìù –û–±–Ω–æ–≤–ª—è—é app.py...")
        update_app_with_smart_cleaning()
    else:
        print("\n‚ùå –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")