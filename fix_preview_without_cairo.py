#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –±–µ–∑ Cairo - –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG –Ω–∞–ø—Ä—è–º—É—é
"""

import os
import re

def fix_preview_functions():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–≤—å—é –≤ app.py"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–≤—å—é...")
    
    # –ß–∏—Ç–∞–µ–º app.py
    with open('app.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    new_functions = '''
# –†–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ preview_system –±–µ–∑ Cairo
def generate_svg_preview(svg_content, width=400, height=600):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –ø—Ä–µ–≤—å—é (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º SVG)"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SVG —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        # –ò—â–µ–º width –∏ height –≤ SVG
        svg_with_size = re.sub(
            r'<svg([^>]*?)width="[^"]*"([^>]*?)height="[^"]*"([^>]*?)>',
            f'<svg\\1width="{width}"\\2height="{height}"\\3>',
            svg_content
        )
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ width/height, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if 'width=' not in svg_with_size or 'height=' not in svg_with_size:
            svg_with_size = re.sub(
                r'<svg([^>]*?)>',
                f'<svg\\1 width="{width}" height="{height}" viewBox="0 0 {width} {height}">',
                svg_with_size
            )
        
        return svg_with_size
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG –ø—Ä–µ–≤—å—é: {e}")
        return svg_content

def create_preview_with_data(svg_content, data, width=400, height=600):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SVG
        processed_svg = svg_content
        for key, value in data.items():
            if isinstance(value, str):
                # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                processed_svg = processed_svg.replace(f">{key}<", f">{value}<")
        
        return generate_svg_preview(processed_svg, width, height)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return generate_svg_preview(svg_content, width, height)

def cleanup_old_previews():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–≤—å—é"""
    try:
        preview_dir = os.path.join(OUTPUT_DIR, 'previews')
        if os.path.exists(preview_dir):
            import time
            current_time = time.time()
            for filename in os.listdir(preview_dir):
                file_path = os.path.join(preview_dir, filename)
                if os.path.isfile(file_path):
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                    if current_time - os.path.getmtime(file_path) > 24 * 3600:
                        os.remove(file_path)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–≤—å—é: {e}")
        return False

def replace_image_in_svg(svg_content, field_name, image_url):
    """–ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ preview_system –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        from preview_system import replace_image_in_svg as original_replace
        return original_replace(svg_content, field_name, image_url)
    except ImportError:
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –µ—Å–ª–∏ preview_system –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {field_name}")
        return svg_content
'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    content = re.sub(
        r'# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π preview_system.*?def replace_image_in_svg\(svg_content, field_name, image_url\):\s*return svg_content',
        new_functions.strip(),
        content,
        flags=re.DOTALL
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('app.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

def fix_preview_endpoints():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º API endpoints –¥–ª—è –ø—Ä–µ–≤—å—é"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é API endpoints –ø—Ä–µ–≤—å—é...")
    
    with open('app.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
    # –ó–∞–º–µ–Ω—è–µ–º cairosvg.svg2png –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SVG
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_template_preview
    content = re.sub(
        r'png_data = cairosvg\.svg2png\([^)]+\)',
        'svg_data = preview_svg.encode("utf-8")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SVG –≤–º–µ—Å—Ç–æ PNG',
        content
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º PNG –Ω–∞ SVG –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    content = re.sub(
        r'return Response\(png_data, mimetype=\'image/png\'\)',
        'return Response(svg_data, mimetype="image/svg+xml")',
        content
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤
    content = re.sub(
        r'with open\(preview_path, \'wb\'\) as f:\s*f\.write\(png_data\)',
        'with open(preview_path.replace(".png", ".svg"), "w", encoding="utf-8") as f:\n                    f.write(preview_svg)',
        content
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—å—é
    content = re.sub(
        r'preview_filename = f"preview_\{template_id\}_\{timestamp\}\.png"',
        'preview_filename = f"preview_{template_id}_{timestamp}.svg"',
        content
    )
    
    with open('app.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ API endpoints –ø—Ä–µ–≤—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–í–¨–Æ –ë–ï–ó CAIRO")
    print("=" * 50)
    
    fix_preview_functions()
    fix_preview_endpoints()
    
    print("\nüéâ –ü—Ä–µ–≤—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è SVG –≤–º–µ—Å—Ç–æ PNG")
    print("üìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:")
    print("  - –ü—Ä–µ–≤—å—é –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ SVG —Ñ–∞–π–ª—ã")
    print("  - –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è Cairo")
    print("  - API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SVG –≤–º–µ—Å—Ç–æ PNG")
    print("  - –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–ª—É—á–∏—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–µ–≤—å—é")