#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:9999"

def test_templates_endpoint():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/templates/all-previews")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(data.get('templates', []))}")
            for template in data.get('templates', []):
                print(f"  - {template['name']} ({template['id']})")
            return True
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_carousel_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ"""
    print("\nüé† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    property_photos = [
        "https://images.unsplash.com/photo-1560518883-ce09059eeffa",  # –≠–∫—Å—Ç–µ—Ä—å–µ—Ä
        "https://images.unsplash.com/photo-1570129477492-45c003edd2be",  # –ì–æ—Å—Ç–∏–Ω–∞—è
        "https://images.unsplash.com/photo-1586023492125-27b2c045efd7",  # –ö—É—Ö–Ω—è
        "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2",   # –°–ø–∞–ª—å–Ω—è
        "https://images.unsplash.com/photo-1560448075-bb485b067938",   # –í–∞–Ω–Ω–∞—è
        "https://images.unsplash.com/photo-1560448204-61dc36dc98c8",   # –°—Ç–æ–ª–æ–≤–∞—è
    ]
    
    carousel_data = {
        "name": "Test Property Carousel - Full Version",
        "slides": [
            # Main —Å–ª–∞–π–¥
            {
                "templateId": "open-house-main",
                "replacements": {
                    "dyno.agentName": "John Smith",
                    "dyno.propertyAddress": "123 Main Street, Beverly Hills, CA 90210",
                    "dyno.price": "$450,000",
                    "dyno.bedrooms": "3",
                    "dyno.bathrooms": "2",
                    "dyno.sqft": "1,850",
                    "dyno.agentPhone": "(555) 123-4567",
                    "dyno.agentEmail": "john@realty.com",
                    "dyno.openHouseDate": "Saturday, June 8th",
                    "dyno.openHouseTime": "2:00 PM - 4:00 PM",
                    "dyno.agentPhoto": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d"
                },
                "imagePath": property_photos[0]
            }
        ]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–ª–∞–π–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ dyno.propertyimage2, dyno.propertyimage3, etc.
    for i, photo_url in enumerate(property_photos):
        carousel_data["slides"].append({
            "templateId": "open-house-photo",
            "replacements": {
                f"dyno.propertyimage{i + 2}": photo_url  # dyno.propertyimage2, dyno.propertyimage3, etc.
            },
            "imagePath": photo_url
        })
    
    print(f"üìä –°–æ–∑–¥–∞—é –∫–∞—Ä—É—Å–µ–ª—å —Å {len(carousel_data['slides'])} —Å–ª–∞–π–¥–∞–º–∏:")
    print(f"   - 1 main —Å–ª–∞–π–¥")
    print(f"   - {len(property_photos)} —Ñ–æ—Ç–æ —Å–ª–∞–π–¥–æ–≤ (dyno.propertyimage2-{len(property_photos)+1})")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/carousel/create-and-generate",
            json=carousel_data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            carousel_id = data.get('carousel_id')
            print(f"–ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
            return carousel_id
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

def test_carousel_status(carousel_id, max_attempts=15):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—É—Å–µ–ª–∏"""
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—É—Å–µ–ª–∏ {carousel_id}...")
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{API_BASE_URL}/api/carousel/{carousel_id}/slides")
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status', 'unknown')
                slides = data.get('slides', [])
                
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°—Ç–∞—Ç—É—Å = {status}")
                
                completed_slides = [s for s in slides if s.get('status') == 'completed']
                print(f"–ì–æ—Ç–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤: {len(completed_slides)}/{len(slides)}")
                
                if status == 'completed':
                    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    for slide in slides:
                        print(f"  –°–ª–∞–π–¥ {slide['slide_number']}: {slide['image_url']}")
                    return data
                elif status == 'error':
                    print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    return None
                
                time.sleep(2)
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return None
    
    print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    if not test_templates_endpoint():
        print("‚ùå –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏
    carousel_id = test_carousel_creation()
    if not carousel_id:
        print("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # 3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    result = test_carousel_status(carousel_id)
    if result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for slide in result.get('slides', []):
            print(f"  –°–ª–∞–π–¥ {slide['slide_number']}: {slide['image_url']}")
    else:
        print("‚ùå –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω")

if __name__ == "__main__":
    main()

