#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import time
import subprocess
import os

def test_real_carousel_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_data = {
        "main_template_id": "9cb08943-8d1e-440c-a712-92111ec23048",
        "photo_template_id": "f6ed8d52-3bbf-495e-8b67-61dc7d4ff47d", 
        "data": {
            "propertyaddress": "1234 Sunset Boulevard, Los Angeles, CA 90028",
            "price": "$2,500,000",
            "beds": "4",
            "baths": "3",
            "sqft": "2,800",
            "propertyfeatures": "Pool, Garage, Garden, Modern Kitchen",
            "name": "John Smith",
            "phone": "+1 (555) 123-4567",
            "email": "john.smith@realestate.com",
            "date": "March 15, 2025",
            "time": "2:00 PM - 5:00 PM",
            "propertyimage2": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1200&h=800&fit=crop",
            "agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face"
        }
    }
    
    print("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏...")
    print(f"üè† –ê–¥—Ä–µ—Å: {test_data['data']['propertyaddress']}")
    print(f"üí∞ –¶–µ–Ω–∞: {test_data['data']['price']}")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: propertyimage2 + agentheadshot")
    
    try:
        start_time = time.time()
        response = requests.post(api_url, json=test_data, timeout=120)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"Response: {response.text[:1000]}")
            return False
        
        result = response.json()
        
        print(f"‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if result.get('success'):
            print("‚úÖ success: True")
        else:
            print("‚ùå success: False")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URLs
        if 'urls' in result and len(result['urls']) >= 2:
            print(f"‚úÖ URLs: {len(result['urls'])} —Ñ–∞–π–ª–æ–≤")
            main_svg_url = result['urls'][0]
            photo_svg_url = result['urls'][1]
            
            print(f"üìÑ Main SVG: {main_svg_url}")
            print(f"üìÑ Photo SVG: {photo_svg_url}")
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ URLs –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PNG URLs
        png_urls = []
        if 'images_detailed' in result:
            for img in result['images_detailed']:
                if 'png_url' in img:
                    png_urls.append(img['png_url'])
        
        print(f"üñºÔ∏è PNG URLs: {len(png_urls)}")
        for i, png_url in enumerate(png_urls):
            print(f"  {i+1}: {png_url}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤...")
        
        # –¢–µ—Å—Ç 1: Main SVG
        print("üìÑ –¢–µ—Å—Ç–∏—Ä—É—é Main SVG...")
        svg_response = requests.get(main_svg_url, timeout=10)
        if svg_response.status_code == 200:
            main_svg_content = svg_response.text
            print(f"‚úÖ Main SVG –¥–æ—Å—Ç—É–ø–µ–Ω: {len(main_svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if 'data:image/' in main_svg_content:
                print("‚úÖ Main SVG —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è Main SVG –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if test_data['data']['propertyaddress'] in main_svg_content:
                print("‚úÖ Main SVG —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å")
            if test_data['data']['price'] in main_svg_content:
                print("‚úÖ Main SVG —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É")
        else:
            print(f"‚ùå Main SVG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {svg_response.status_code}")
            return False
        
        # –¢–µ—Å—Ç 2: Photo SVG
        print("\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é Photo SVG...")
        svg_response = requests.get(photo_svg_url, timeout=10)
        if svg_response.status_code == 200:
            photo_svg_content = svg_response.text
            print(f"‚úÖ Photo SVG –¥–æ—Å—Ç—É–ø–µ–Ω: {len(photo_svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if 'data:image/' in photo_svg_content:
                print("‚úÖ Photo SVG —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è Photo SVG –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        else:
            print(f"‚ùå Photo SVG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {svg_response.status_code}")
            return False
        
        # –¢–µ—Å—Ç 3: PNG —Ñ–∞–π–ª—ã
        print("\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é PNG —Ñ–∞–π–ª—ã...")
        png_success = 0
        for i, png_url in enumerate(png_urls):
            try:
                png_response = requests.get(png_url, timeout=10)
                if png_response.status_code == 200:
                    png_size = len(png_response.content)
                    print(f"‚úÖ PNG {i+1} –¥–æ—Å—Ç—É–ø–µ–Ω: {png_size} –±–∞–π—Ç")
                    
                    if png_size > 50000:  # –ë–æ–ª—å—à–µ 50KB = –≤–µ—Ä–æ—è—Ç–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                        print(f"üéâ PNG {i+1} –±–æ–ª—å—à–æ–π - —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                    else:
                        print(f"‚ö†Ô∏è PNG {i+1} –º–∞–ª–µ–Ω—å–∫–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    
                    png_success += 1
                else:
                    print(f"‚ùå PNG {i+1} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {png_response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ PNG {i+1}: {e}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        total_score = 0
        max_score = 6
        
        if result.get('success'):
            total_score += 1
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if len(result.get('urls', [])) >= 2:
            total_score += 1
            print("‚úÖ SVG —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        if 'data:image/' in main_svg_content:
            total_score += 1
            print("‚úÖ Main SVG —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        if 'data:image/' in photo_svg_content:
            total_score += 1
            print("‚úÖ Photo SVG —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        if png_success >= 1:
            total_score += 1
            print("‚úÖ PNG —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        if png_success == len(png_urls) and png_success >= 2:
            total_score += 1
            print("‚úÖ –í—Å–µ PNG —Ñ–∞–π–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        print(f"\nüéØ –û–ë–©–ò–ô –°–ß–ï–¢: {total_score}/{max_score}")
        
        if total_score == max_score:
            print("üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            return True
        elif total_score >= 4:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
            return True
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_png_conversion_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é API"""
    
    print("\nüñºÔ∏è –¢–ï–°–¢ PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
    print("=" * 30)
    
    api_url = "https://new-api-generator.onrender.com/api/convert-to-png"
    
    # –ü—Ä–æ—Å—Ç–æ–π SVG –¥–ª—è —Ç–µ—Å—Ç–∞
    test_svg = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="white"/>
        <text x="200" y="150" text-anchor="middle" font-size="24" fill="black">PNG Test</text>
        <circle cx="200" cy="200" r="50" fill="blue"/>
    </svg>'''
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö SVG URL
    test_data = {
        "svg_url": "https://vahgmyuowsilbxqdjjii.supabase.co/storage/v1/object/public/carousel-assets/carousel/carousel_ac98294f-2e10-4d94-816b-4ac84a39b411_main.svg",
        "width": 400,
        "height": 300
    }
    
    try:
        response = requests.post(api_url, json=test_data, timeout=30)
        
        print(f"üìä PNG API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'png_url' in result:
                png_url = result['png_url']
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {png_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                png_response = requests.get(png_url, timeout=10)
                if png_response.status_code == 200:
                    png_size = len(png_response.content)
                    print(f"‚úÖ PNG –¥–æ—Å—Ç—É–ø–µ–Ω: {png_size} –±–∞–π—Ç")
                    return True
                else:
                    print(f"‚ùå PNG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {png_response.status_code}")
            else:
                print(f"‚ùå –ù–µ—Ç png_url –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
        else:
            print(f"‚ùå PNG API –æ—à–∏–±–∫–∞: {response.text[:500]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PNG —Ç–µ—Å—Ç–∞: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –°–ò–°–¢–ï–ú–´")
    print("üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏
    carousel_success = test_real_carousel_generation()
    
    # –¢–µ—Å—Ç 2: PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    png_success = test_png_conversion_api()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    print(f"üé† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if carousel_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"üñºÔ∏è PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if png_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if carousel_success and png_success:
        print("\nüéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    elif carousel_success:
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚ö†Ô∏è PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    else:
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()