#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SVG –ü–†–û–¶–ï–°–°–û–† –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ü–û–ò–°–ö–û–ú DYNO –ü–û–õ–ï–ô
=========================================================

–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º dyno –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ id="dyno.field"
"""

import re

def has_dyno_fields_fixed(svg_content):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    
    –ò—â–µ—Ç dyno –ø–æ–ª—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
    1. {{dyno.field}} - –≤ —Ç–µ–∫—Å—Ç–µ
    2. {dyno.field} - –≤ —Ç–µ–∫—Å—Ç–µ  
    3. id="dyno.field" - –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    4. dyno.field - –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
    """
    
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field (–∫–∞–∫ ID –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ)
    ]
    
    found_fields = []
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        if matches:
            found_fields.extend(matches)
    
    return len(found_fields) > 0, found_fields

def extract_dyno_fields_from_svg(svg_content):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ dyno –ø–æ–ª—è –∏–∑ SVG —Å –∏—Ö —Ç–∏–ø–∞–º–∏
    """
    
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    id_pattern = r'id="(dyno\.[^"]*)"'
    id_matches = re.findall(id_pattern, svg_content)
    
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
    text_patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',
        r'\{(dyno\.[^}]+)\}'
    ]
    
    text_matches = []
    for pattern in text_patterns:
        text_matches.extend(re.findall(pattern, svg_content))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    all_fields = list(set(id_matches + text_matches))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
    field_types = {}
    for field in all_fields:
        if any(img_keyword in field.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot']):
            field_types[field] = 'image'
        else:
            field_types[field] = 'text'
    
    return {
        'fields': all_fields,
        'types': field_types,
        'count': len(all_fields),
        'has_dyno': len(all_fields) > 0
    }

def process_svg_with_id_replacement(svg_content, replacements):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SVG —Å –∑–∞–º–µ–Ω–æ–π dyno –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ id="dyno.field"
    """
    
    result = svg_content
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é SVG —Å ID –∑–∞–º–µ–Ω–∞–º–∏...")
    
    for key, value in replacements.items():
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å dyno. –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        clean_key = key.replace('dyno.', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
        possible_keys = [
            f'dyno.{clean_key}',
            f'dyno.{key}',
            key,
            clean_key
        ]
        
        for possible_key in possible_keys:
            # –ó–∞–º–µ–Ω—è–µ–º –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            id_pattern = f'id="{possible_key}"'
            if id_pattern in result:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id='{possible_key}', –∑–∞–º–µ–Ω—è—é...")
                
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if any(img_keyword in possible_key.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot']):
                    # –ó–∞–º–µ–Ω—è–µ–º href –∏–ª–∏ xlink:href –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö image
                    image_pattern = f'<image[^>]*id="{possible_key}"[^>]*>'
                    image_match = re.search(image_pattern, result)
                    if image_match:
                        image_element = image_match.group(0)
                        # –ó–∞–º–µ–Ω—è–µ–º href –Ω–∞ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        new_image = re.sub(r'(href|xlink:href)="[^"]*"', f'href="{value}"', image_element)
                        result = result.replace(image_element, new_image)
                        print(f"   üñºÔ∏è –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {possible_key}")
                
                # –î–ª—è —Ç–µ–∫—Å—Ç–∞
                else:
                    # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º id
                    text_pattern = f'<text[^>]*id="{possible_key}"[^>]*>([^<]*)</text>'
                    text_match = re.search(text_pattern, result)
                    if text_match:
                        old_text_element = text_match.group(0)
                        old_text_content = text_match.group(1)
                        new_text_element = old_text_element.replace(old_text_content, str(value))
                        result = result.replace(old_text_element, new_text_element)
                        print(f"   üìù –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç: {possible_key} -> {value}")
                    
                    # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ tspan —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    tspan_pattern = f'<tspan[^>]*>([^<]*)</tspan>'
                    parent_pattern = f'<text[^>]*id="{possible_key}"[^>]*>(.*?)</text>'
                    parent_match = re.search(parent_pattern, result, re.DOTALL)
                    if parent_match:
                        parent_content = parent_match.group(1)
                        tspan_matches = re.findall(tspan_pattern, parent_content)
                        if tspan_matches:
                            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                            new_parent_content = re.sub(tspan_pattern, f'<tspan>{value}</tspan>', parent_content, count=1)
                            result = result.replace(parent_content, new_parent_content)
                            print(f"   üìù –ó–∞–º–µ–Ω–µ–Ω tspan: {possible_key} -> {value}")
    
    print("‚úÖ SVG –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    return result

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    test_svg = '''
    <svg>
        <text id="dyno.headline">Test Headline</text>
        <text id="dyno.price">$500,000</text>
        <image id="dyno.logo" href="old-logo.jpg"/>
    </svg>
    '''
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ dyno –ø–æ–ª–µ–π
    has_dyno, fields = has_dyno_fields_fixed(test_svg)
    print(f"Has dyno: {has_dyno}")
    print(f"Fields: {fields}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    field_info = extract_dyno_fields_from_svg(test_svg)
    print(f"Field info: {field_info}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É
    replacements = {
        'dyno.headline': 'New Headline',
        'dyno.price': '$750,000',
        'dyno.logo': 'new-logo.jpg'
    }
    
    processed = process_svg_with_id_replacement(test_svg, replacements)
    print(f"Processed SVG: {processed}")

