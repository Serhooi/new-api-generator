# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤

import re

def process_svg_font_perfect_fixed(svg_content, replacements):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG:
    1. –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
    2. –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
    3. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    print("üé® –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG")
    
    processed_svg = svg_content
    replaced_fields = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    
    for dyno_field, replacement in replacements.items():
        if dyno_field in replaced_fields:
            print(f"‚ö†Ô∏è –ü–æ–ª–µ {dyno_field} —É–∂–µ –∑–∞–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        safe_replacement = safe_escape_for_svg(str(replacement))
        
        if 'image' in dyno_field.lower() or 'headshot' in dyno_field.lower() or 'logo' in dyno_field.lower():
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º & —Å–∏–º–≤–æ–ª—ã –≤ URL –¥–ª—è XML
            safe_url = str(replacement).replace('&', '&amp;')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if 'propertyimage' in dyno_field.lower():
                aspect_ratio = 'xMidYMid slice'  # Cover —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            elif 'logo' in dyno_field.lower():
                aspect_ratio = 'xMidYMid meet'   # Contain —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
            elif 'headshot' in dyno_field.lower() or 'agent' in dyno_field.lower():
                aspect_ratio = 'xMidYMid meet'   # –ù–ï –æ–±—Ä–µ–∑–∞–µ–º –ª–∏—Ü–∞
            else:
                aspect_ratio = 'xMidYMid meet'   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é contain
            
            # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                pattern_id = match.group(1)
                image_id = pattern_id.replace("pattern", "image")
                
                # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
                image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                def replace_specific_image(img_match):
                    result = img_match.group(0)
                    result = re.sub(r'href="[^"]*"', f'href="{safe_url}"', result)
                    result = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', result)
                    result = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', result)
                    
                    if 'preserveAspectRatio=' not in result:
                        result = result.replace('/>', f' preserveAspectRatio="{aspect_ratio}"/>')
                    
                    return result
                
                processed_svg = re.sub(image_pattern, replace_specific_image, processed_svg, count=1)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
            else:
                print(f"   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        else:
            # –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê - –∑–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: {dyno_field}")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞
            patterns = [
                f'>{re.escape(dyno_field)}<',           # >dyno.field<
                f'{{{{\\s*{re.escape(dyno_field)}\\s*}}}}',  # {{dyno.field}}
                f'{{\\s*{re.escape(dyno_field)}\\s*}}',      # {dyno.field}
            ]
            
            replaced = False
            for pattern in patterns:
                if re.search(pattern, processed_svg):
                    if pattern.startswith('>'):
                        # –ó–∞–º–µ–Ω–∞ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
                        processed_svg = re.sub(pattern, f'>{safe_replacement}<', processed_svg, count=1)
                    else:
                        # –ó–∞–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                        processed_svg = re.sub(pattern, safe_replacement, processed_svg, count=1)
                    
                    print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                    replaced = True
                    break
            
            if not replaced:
                print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ –∑–∞–º–µ–Ω–µ–Ω–Ω–æ–µ
        replaced_fields.add(dyno_field)
    
    # –ù–ï –ú–ï–ù–Ø–ï–ú –®–†–ò–§–¢–´ –í–û–û–ë–©–ï!
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —à–∞–±–ª–æ–Ω–∞")
    
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return processed_svg

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG
    """
    if not text:
        return text
    
    text = str(text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

