# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫

import re

def process_svg_with_line_breaks(svg_content, replacements):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG:
    1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    """
    print("üé® –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG –° –ü–ï–†–ï–ù–û–°–û–ú –°–¢–†–û–ö")
    
    processed_svg = svg_content
    
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        safe_replacement = safe_escape_for_svg(str(replacement))
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        if 'address' in dyno_field.lower():
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            address_parts = str(replacement).split(', ')
            if len(address_parts) >= 3:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ + —É–ª–∏—Ü–∞
                line1 = address_parts[0]
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –≥–æ—Ä–æ–¥ + —à—Ç–∞—Ç + –∏–Ω–¥–µ–∫—Å
                line2 = ', '.join(address_parts[1:])
                
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è SVG
                safe_replacement = f'''<tspan x="0" dy="0">{safe_escape_for_svg(line1)}</tspan>
                                     <tspan x="0" dy="1.2em">{safe_escape_for_svg(line2)}</tspan>'''
                print(f"   üìç –ê–¥—Ä–µ—Å —Ä–∞–∑–±–∏—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏: {line1} | {line2}")
            else:
                safe_replacement = safe_escape_for_svg(str(replacement))
        
        if 'image' in dyno_field.lower() or 'headshot' in dyno_field.lower() or 'logo' in dyno_field.lower():
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            
            safe_url = str(replacement).replace('&', '&amp;')
            
            if 'propertyimage' in dyno_field.lower():
                aspect_ratio = 'xMidYMid slice'
            elif 'logo' in dyno_field.lower():
                aspect_ratio = 'xMidYMid meet'
            elif 'headshot' in dyno_field.lower() or 'agent' in dyno_field.lower():
                aspect_ratio = 'xMidYMid meet'
            else:
                aspect_ratio = 'xMidYMid meet'
            
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                pattern_id = match.group(1)
                image_id = pattern_id.replace("pattern", "image")
                
                image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                def replace_specific_image(img_match):
                    result = img_match.group(0)
                    result = re.sub(r'href="[^"]*"', f'href="{safe_url}"', result)
                    result = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', result)
                    result = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', result)
                    
                    if 'preserveAspectRatio=' not in result:
                        result = result.replace('/>', f' preserveAspectRatio="{aspect_ratio}"/>')
                    
                    return result
                
                processed_svg = re.sub(image_pattern, replace_specific_image, processed_svg, count=1)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
        
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: {dyno_field}")
            
            # –ò—â–µ–º –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ dyno –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å dyno –ø–æ–ª–µ–º
            text_element_pattern = f'<text[^>]*>([^<]*{re.escape(dyno_field)}[^<]*)</text>'
            matches = list(re.finditer(text_element_pattern, processed_svg))
            
            if matches:
                # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –ü–ï–†–í–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                match = matches[0]
                old_text = match.group(1)
                
                if 'address' in dyno_field.lower():
                    # –î–ª—è –∞–¥—Ä–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º tspan —ç–ª–µ–º–µ–Ω—Ç—ã
                    new_text = safe_replacement
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
                    new_text = old_text.replace(dyno_field, safe_replacement)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                old_element = match.group(0)
                new_element = old_element.replace(old_text, new_text)
                
                processed_svg = processed_svg.replace(old_element, new_element, 1)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç: {old_text} ‚Üí {new_text[:50]}...")
            
            else:
                # Fallback - –∏—â–µ–º –ø–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                patterns = [
                    f'>{re.escape(dyno_field)}<',
                    f'{{{{\\s*{re.escape(dyno_field)}\\s*}}}}',
                    f'{{\\s*{re.escape(dyno_field)}\\s*}}',
                ]
                
                replaced = False
                for pattern in patterns:
                    if re.search(pattern, processed_svg):
                        if pattern.startswith('>'):
                            processed_svg = re.sub(pattern, f'>{safe_replacement}<', processed_svg, count=1)
                        else:
                            processed_svg = re.sub(pattern, safe_replacement, processed_svg, count=1)
                        
                        print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ fallback –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                        replaced = True
                        break
                
                if not replaced:
                    print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —à–∞–±–ª–æ–Ω–∞")
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return processed_svg

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    text = str(text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

