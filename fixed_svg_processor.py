#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò SVG
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–º–µ–Ω—ã dyno –ø–æ–ª–µ–π
"""

import re
import html

def safe_escape_for_svg_fixed(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º & –ü–ï–†–í–´–ú (–≤–∞–∂–Ω–æ!)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('"', '&quot;')  # –ü—Ä–∞–≤–∞—è –¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
    text = text.replace('"', '&quot;')  # –õ–µ–≤–∞—è –¥–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
    text = text.replace('‚Äî', '&mdash;')  # –î–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
    text = text.replace('‚Äì', '&ndash;')  # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ç–∏—Ä–µ
    
    return text

def process_svg_completely_fixed(svg_content, replacements):
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG
    –ó–∞–º–µ–Ω—è–µ—Ç –í–°–ï dyno –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    """
    
    processed_svg = svg_content
    
    # 1. –ó–ê–ú–ï–ù–ê –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô –í TSPAN
    def replace_tspan_content(match):
        full_match = match.group(0)
        tspan_content = match.group(1)
        
        # –ò—â–µ–º dyno –ø–æ–ª–µ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        for dyno_field, replacement in replacements.items():
            if dyno_field in tspan_content:
                # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                safe_replacement = safe_escape_for_svg_fixed(str(replacement))
                new_content = tspan_content.replace(dyno_field, safe_replacement)
                return full_match.replace(tspan_content, new_content)
        
        return full_match
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ <tspan>—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</tspan>
    tspan_pattern = r'<tspan[^>]*>(.*?)</tspan>'
    processed_svg = re.sub(tspan_pattern, replace_tspan_content, processed_svg, flags=re.DOTALL)
    
    # 2. –ó–ê–ú–ï–ù–ê –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô –í TEXT (–µ—Å–ª–∏ –Ω–µ –≤ tspan)
    def replace_text_content(match):
        full_match = match.group(0)
        text_content = match.group(1)
        
        # –ò—â–µ–º dyno –ø–æ–ª–µ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        for dyno_field, replacement in replacements.items():
            if dyno_field in text_content:
                safe_replacement = safe_escape_for_svg_fixed(str(replacement))
                new_content = text_content.replace(dyno_field, safe_replacement)
                return full_match.replace(text_content, new_content)
        
        return full_match
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è text —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ tspan
    text_pattern = r'<text[^>]*>([^<]*)</text>'
    processed_svg = re.sub(text_pattern, replace_text_content, processed_svg, flags=re.DOTALL)
    
    # 3. –ó–ê–ú–ï–ù–ê ID –ê–¢–†–ò–ë–£–¢–û–í (–¥–ª—è –ø–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–º–µ–Ω–∏–ª–∏—Å—å)
    for dyno_field, replacement in replacements.items():
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å id="dyno.field"
        id_pattern = f'id="{dyno_field}"'
        if id_pattern in processed_svg:
            print(f"üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {dyno_field}")
            
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –∑–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if 'image' not in dyno_field.lower() and 'headshot' not in dyno_field.lower() and 'logo' not in dyno_field.lower():
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º ID
                element_pattern = f'<text[^>]*id="{dyno_field}"[^>]*>(.*?)</text>'
                def replace_element_content(match):
                    safe_replacement = safe_escape_for_svg_fixed(str(replacement))
                    return match.group(0).replace(match.group(1), safe_replacement)
                
                processed_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
    
    # 4. –ó–ê–ú–ï–ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í PATTERNS
    for dyno_field, replacement in replacements.items():
        if 'image' in dyno_field.lower() or 'headshot' in dyno_field.lower() or 'logo' in dyno_field.lower():
            # –ü—Ä–æ—Å—Ç—ã–µ URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è XML –æ—à–∏–±–æ–∫
            simple_url = str(replacement).split('?')[0]
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤ pattern —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            pattern_regex = r'<image[^>]*href="[^"]*"[^>]*>'
            def replace_image_href(match):
                return re.sub(r'href="[^"]*"', f'href="{simple_url}"', match.group(0))
            
            processed_svg = re.sub(pattern_regex, replace_image_href, processed_svg)
    
    return processed_svg

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_svg = '''
    <text id="dyno.date"><tspan>MAY 17 2025</tspan></text>
    <text id="dyno.price"><tspan>$5.000.000</tspan></text>
    <text id="dyno.propertyaddress"><tspan>Address</tspan></text>
    '''
    
    test_replacements = {
        'dyno.date': 'DECEMBER 15, 2025',
        'dyno.price': '$3,250,000',
        'dyno.propertyaddress': '2468 Ocean View Drive, Malibu, CA 90265'
    }
    
    result = process_svg_completely_fixed(test_svg, test_replacements)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(result)

