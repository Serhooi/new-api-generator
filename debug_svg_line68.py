#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Ç–µ–≥–æ–º image –Ω–∞ —Å—Ç—Ä–æ–∫–µ 68
"""

import requests
import re

def analyze_svg_line68():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å line 68 column 29638"""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º API
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    test_data = {
        "main_template_id": "main_template_1",
        "photo_template_id": "photo_template_1", 
        "data": {
            "propertyaddress": "123 Test Street, Test City",
            "price": "$500,000",
            "beds": "3",
            "baths": "2",
            "sqft": "1,500"
        }
    }
    
    print("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é SVG —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.post(api_url, json=test_data, timeout=30)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"Response: {response.text[:500]}")
            return
        
        result = response.json()
        
        if 'urls' not in result:
            print("‚ùå –ù–µ—Ç urls –≤ –æ—Ç–≤–µ—Ç–µ")
            print(f"Response keys: {list(result.keys())}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º SVG
        print(f"URLs type: {type(result['urls'])}")
        print(f"URLs: {result['urls']}")
        
        # –ò—â–µ–º SVG URL –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        svg_url = None
        if isinstance(result['urls'], list) and len(result['urls']) > 0:
            svg_url = result['urls'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL
        elif isinstance(result['urls'], dict):
            svg_url = result['urls'].get('main_svg')
        
        if not svg_url:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω SVG URL")
            return
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é SVG: {svg_url}")
        
        svg_response = requests.get(svg_url, timeout=10)
        svg_content = svg_response.text
        
        print(f"üìä SVG —Ä–∞–∑–º–µ—Ä: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É 68
        lines = svg_content.split('\n')
        
        if len(lines) >= 68:
            line68 = lines[67]  # 0-based index
            print(f"üîç –°—Ç—Ä–æ–∫–∞ 68 (–¥–ª–∏–Ω–∞ {len(line68)}):")
            print(f"'{line68}'")
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é 29638
            if len(line68) >= 29638:
                context_start = max(0, 29638 - 50)
                context_end = min(len(line68), 29638 + 50)
                context = line68[context_start:context_end]
                print(f"üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏ 29638:")
                print(f"'{context}'")
                
                # –ò—â–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ image
                image_tags = re.findall(r'<image[^>]*>', line68)
                print(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ image —Ç–µ–≥–æ–≤: {len(image_tags)}")
                
                for i, tag in enumerate(image_tags[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"  {i+1}: {tag}")
                    if not tag.endswith('/>'):
                        print(f"    ‚ö†Ô∏è –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥!")
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ 68 –∫–æ—Ä–æ—á–µ 29638 —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª–∏–Ω–∞: {len(line68)})")
        else:
            print(f"‚ö†Ô∏è SVG —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {len(lines)} —Å—Ç—Ä–æ–∫")
        
        # –ò—â–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ image —Ç–µ–≥–∏
        all_image_tags = re.findall(r'<image[^>]*[^/]>', svg_content)
        print(f"üîç –í—Å–µ–≥–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö image —Ç–µ–≥–æ–≤: {len(all_image_tags)}")
        
        if all_image_tags:
            print("üö® –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤:")
            for i, tag in enumerate(all_image_tags[:3]):
                print(f"  {i+1}: {tag[:100]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –æ—á–∏—Å—Ç–∫—É
        print("\nüßπ –¢–µ—Å—Ç–∏—Ä—É—é –æ—á–∏—Å—Ç–∫—É SVG...")
        
        cleaned_svg = svg_content
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ image
        cleaned_svg = re.sub(r'<image([^>]*?)(?<!/)>', r'<image\1/>', cleaned_svg)
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned_svg = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned_svg)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
        cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
        for tag in ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path']:
            cleaned_svg = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\1/>', cleaned_svg)
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cleaned_image_tags = re.findall(r'<image[^>]*[^/]>', cleaned_svg)
        print(f"üîç –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö image —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned_image_tags)}")
        
        if cleaned_image_tags:
            print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞! –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏:")
            for i, tag in enumerate(cleaned_image_tags[:3]):
                print(f"  {i+1}: {tag[:100]}...")
        else:
            print("‚úÖ –í—Å–µ image —Ç–µ–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open('debug_original.svg', 'w') as f:
            f.write(svg_content)
        
        with open('debug_cleaned.svg', 'w') as f:
            f.write(cleaned_svg)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã: debug_original.svg, debug_cleaned.svg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    analyze_svg_line68()