#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤
"""

import requests
import os

def test_template_previews():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üñºÔ∏è –¢–ï–°–¢ –ü–†–ï–í–¨–Æ –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        health = requests.get("http://localhost:5000/api/health", timeout=5)
        if health.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    try:
        response = requests.get("http://localhost:5000/api/templates/all-previews", timeout=15)
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            templates = data.get('templates', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            
            if templates:
                print("\\nüéØ –¢–ï–°–¢ –ü–†–ï–í–¨–Æ:")
                
                for i, template in enumerate(templates[:3], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                    template_id = template.get('id')
                    template_name = template.get('name')
                    preview_url = template.get('preview_url')
                    
                    print(f"\\n{i}. {template_name}")
                    print(f"   ID: {template_id}")
                    print(f"   Preview URL: {preview_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—å—é
                    if preview_url:
                        try:
                            preview_response = requests.get(f"http://localhost:5000{preview_url}", timeout=10)
                            print(f"   üìä Preview —Å—Ç–∞—Ç—É—Å: {preview_response.status_code}")
                            
                            if preview_response.status_code == 200:
                                content_type = preview_response.headers.get('content-type', 'unknown')
                                content_length = len(preview_response.content)
                                print(f"   üìÑ Content-Type: {content_type}")
                                print(f"   üìè –†–∞–∑–º–µ—Ä: {content_length} bytes")
                                print("   ‚úÖ –ü—Ä–µ–≤—å—é –¥–æ—Å—Ç—É–ø–Ω–æ")
                            else:
                                print("   ‚ùå –ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                                
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π API –ø—Ä–µ–≤—å—é
                    try:
                        direct_preview = requests.get(f"http://localhost:5000/api/templates/{template_id}/preview", timeout=10)
                        print(f"   üìä Direct API —Å—Ç–∞—Ç—É—Å: {direct_preview.status_code}")
                        
                        if direct_preview.status_code == 200:
                            content_type = direct_preview.headers.get('content-type', 'unknown')
                            print(f"   üìÑ Direct Content-Type: {content_type}")
                            
                            if 'svg' in content_type:
                                print("   ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è SVG")
                            elif 'png' in content_type:
                                print("   ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è PNG")
                            else:
                                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {content_type}")
                        else:
                            print("   ‚ùå Direct API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ direct API: {e}")
            else:
                print("‚ÑπÔ∏è –®–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

def check_preview_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–µ–≤—å—é"""
    
    print("\\nüìÅ –ü–†–û–í–ï–†–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ò –ü–†–ï–í–¨–Æ")
    print("=" * 40)
    
    preview_dir = "output/previews"
    
    if os.path.exists(preview_dir):
        files = os.listdir(preview_dir)
        png_files = [f for f in files if f.endswith('.png')]
        
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        print(f"üñºÔ∏è PNG —Ñ–∞–π–ª–æ–≤: {len(png_files)}")
        
        if png_files:
            print("\\nüìã PNG –ø—Ä–µ–≤—å—é:")
            for f in png_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                file_path = os.path.join(preview_dir, f)
                size = os.path.getsize(file_path)
                print(f"  - {f} ({size} bytes)")
        else:
            print("‚ÑπÔ∏è PNG –ø—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–µ–≤—å—é –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    check_preview_directory()
    test_template_previews()