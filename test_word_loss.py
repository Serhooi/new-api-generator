#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ù–ê –ü–û–¢–ï–†–Æ –°–õ–û–í –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï SVG
=====================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏ –≥–¥–µ –º–æ–≥—É—Ç —Ç–µ—Ä—è—Ç—å—Å—è —Å–ª–æ–≤–∞
"""

import re

def test_problematic_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    print("üîç –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–ù–´–• –°–õ–£–ß–ê–ï–í")
    print("=" * 50)
    
    # –°–ª—É—á–∞–π 1: –°–ª–æ–≤–∞ —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞–º–∏
    test_cases = [
        {
            "name": "–ê–º–ø–µ—Ä—Å–∞–Ω–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏",
            "input": "Smith & Associates Real Estate",
            "expected_issues": ["–ê–º–ø–µ—Ä—Å–∞–Ω–¥ –º–æ–∂–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"]
        },
        {
            "name": "–ö–∞–≤—ã—á–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ", 
            "input": 'Beautiful "Dream Home" for Sale',
            "expected_issues": ["–ö–∞–≤—ã—á–∫–∏ –º–æ–≥—É—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"]
        },
        {
            "name": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
            "input": "Price: $450,000 <SOLD>",
            "expected_issues": ["< –∏ > —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è"]
        },
        {
            "name": "–î–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å",
            "input": "123 Very Long Street Name That Might Get Cut Off, Beverly Hills, CA 90210",
            "expected_issues": ["–ú–æ–∂–µ—Ç –æ–±—Ä–µ–∑–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ"]
        },
        {
            "name": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã",
            "input": "John    Smith     Real   Estate",
            "expected_issues": ["–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –º–æ–≥—É—Ç —Å—Ö–ª–æ–ø—ã–≤–∞—Ç—å—Å—è"]
        }
    ]
    
    for case in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç: {case['name']}")
        print(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '{case['input']}'")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        escaped = safe_escape_for_svg(case['input'])
        print(f"   –ü–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: '{escaped}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö
        if len(escaped) != len(case['input'].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;').replace("'", '&apos;')):
            print("   ‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã")
        
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {case['expected_issues']}")

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    original_length = len(text)
    text = str(text)
    
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    print(f"      üî¢ –î–ª–∏–Ω–∞: {original_length} ‚Üí {len(text)}")
    return text

def test_tspan_content_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ tspan"""
    print("\nüéØ –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–û–î–ï–†–ñ–ò–ú–û–ì–û TSPAN")
    print("=" * 50)
    
    test_svgs = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π tspan",
            "svg": '<text id="dyno.name"><tspan x="100" y="50">dyno.name</tspan></text>',
            "field": "dyno.name"
        },
        {
            "name": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ tspan",
            "svg": '<text id="dyno.address"><tspan x="100" y="50">dyno.address</tspan><tspan x="100" y="70">Line 2</tspan></text>',
            "field": "dyno.address"
        },
        {
            "name": "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
            "svg": '<text id="dyno.price"><tspan x="100" y="50"><tspan>$</tspan>dyno.price</tspan></text>',
            "field": "dyno.price"
        },
        {
            "name": "–° –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏",
            "svg": '<text id="dyno.agent" font-family="Inter"><tspan x="100" y="50" fill="black">dyno.agent</tspan></text>',
            "field": "dyno.agent"
        }
    ]
    
    for test in test_svgs:
        print(f"\nüìã –¢–µ—Å—Ç: {test['name']}")
        print(f"   SVG: {test['svg']}")
        print(f"   –ü–æ–ª–µ: {test['field']}")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element_pattern = f'<text[^>]*id="{re.escape(test["field"])}"[^>]*>(.*?)</text>'
        match = re.search(element_pattern, test['svg'], re.DOTALL)
        
        if match:
            element_content = match.group(1)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: '{element_content.strip()}'")
            
            # –ò—â–µ–º –≤—Å–µ tspan
            tspan_pattern = r'<tspan[^>]*>([^<]*)</tspan>'
            tspan_matches = re.findall(tspan_pattern, element_content)
            
            print(f"   üìù –ù–∞–π–¥–µ–Ω–æ tspan —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(tspan_matches)}")
            for i, content in enumerate(tspan_matches):
                print(f"      {i+1}: '{content}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ dyno –ø–æ–ª–µ
                if test['field'] in content:
                    print(f"         üéØ –°–æ–¥–µ—Ä–∂–∏—Ç dyno –ø–æ–ª–µ!")
        else:
            print("   ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_replacement_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã"""
    print("\nüîÑ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ó–ê–ú–ï–ù–´")
    print("=" * 50)
    
    test_svg = '''<text id="dyno.agentName" x="100" y="50">
        <tspan x="100" y="50">dyno.agentName</tspan>
    </text>'''
    
    replacements = [
        "John Smith",
        "John Smith & Associates", 
        "John \"The Best\" Smith",
        "Smith & Associates <Premium>",
        "John    Smith    (Multiple Spaces)"
    ]
    
    for replacement in replacements:
        print(f"\nüîÑ –ó–∞–º–µ–Ω–∞ –Ω–∞: '{replacement}'")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã
        result_svg = test_svg
        safe_replacement = safe_escape_for_svg(replacement)
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element_pattern = r'<text[^>]*id="dyno\.agentName"[^>]*>(.*?)</text>'
        match = re.search(element_pattern, result_svg, re.DOTALL)
        
        if match:
            element_content = match.group(1)
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π tspan
            tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
            
            def replace_tspan_content(tspan_match):
                opening_tag = tspan_match.group(1)
                old_content = tspan_match.group(2)
                closing_tag = tspan_match.group(3)
                
                print(f"      üéØ –ó–∞–º–µ–Ω—è—é: '{old_content}' ‚Üí '{safe_replacement}'")
                return opening_tag + safe_replacement + closing_tag
            
            new_content = re.sub(tspan_pattern, replace_tspan_content, element_content, count=1)
            result_svg = result_svg.replace(element_content, new_content)
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"      {result_svg.strip()}")
        else:
            print("   ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_address_splitting_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
    print("\nüè† –¢–ï–°–¢ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í –ê–î–†–ï–°–û–í")
    print("=" * 50)
    
    edge_cases = [
        "123 Main St",  # –ö–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å
        "A",  # –û–¥–∏–Ω —Å–∏–º–≤–æ–ª
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "123 Main Street, Beverly Hills, CA 90210, USA, North America",  # –û—á–µ–Ω—å –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π
        "123-Main-Street-Without-Spaces",  # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        "123 Main Street,,,, Beverly Hills",  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
        "123 Main Street Beverly Hills CA 90210",  # –ë–µ–∑ –∑–∞–ø—è—Ç—ã—Ö
    ]
    
    def wrap_address_text(address_text, max_length=35):
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∞–¥—Ä–µ—Å–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        print(f"   üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: '{address_text}' (–¥–ª–∏–Ω–∞: {len(address_text)})")
        
        if not address_text:
            print("   ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
            return "", ""
            
        if len(address_text) <= max_length:
            print("   ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å, –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ –Ω—É–∂–µ–Ω")
            return address_text, ""
        
        words = address_text.split()
        print(f"   üî§ –°–ª–æ–≤: {len(words)}")
        
        if len(words) <= 1:
            print("   ‚ö†Ô∏è –û–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –º–µ–Ω—å—à–µ")
            return address_text, ""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ–ø–æ–ª–∞–º
        mid = len(words) // 2
        first_line = ' '.join(words[:mid])
        second_line = ' '.join(words[mid:])
        
        print(f"   üìù –†–∞–∑–±–∏—Ç–æ: '{first_line}' | '{second_line}'")
        
        if len(second_line) > max_length:
            print("   ‚ùå –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è")
            return address_text, ""
        
        return first_line, second_line
    
    for addr in edge_cases:
        print(f"\nüè† –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–∞: '{addr}'")
        first, second = wrap_address_text(addr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö
        combined = (first + " " + second).strip()
        original_words = set(addr.split())
        result_words = set(combined.split())
        
        if original_words != result_words:
            print("   ‚ùå –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•!")
            print(f"      –ü–æ—Ç–µ—Ä—è–Ω–æ: {original_words - result_words}")
            print(f"      –î–æ–±–∞–≤–ª–µ–Ω–æ: {result_words - original_words}")
        else:
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –¢–ï–°–¢ –ù–ê –ü–û–¢–ï–†–Æ –°–õ–û–í –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï SVG")
    print("=" * 60)
    
    test_problematic_cases()
    test_tspan_content_extraction()
    test_replacement_logic()
    test_address_splitting_edge_cases()
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main()