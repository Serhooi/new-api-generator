#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö SVG —à–∞–±–ª–æ–Ω–æ–≤
"""

import sqlite3
import re

DATABASE_PATH = 'templates.db'

def analyze_templates():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
    cursor.execute("SELECT id, name, template_role, dyno_fields, svg_content FROM templates ORDER BY template_role, name")
    templates = cursor.fetchall()
    
    if not templates:
        print("‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
    
    for template_id, name, role, dyno_fields_str, svg_content in templates:
        print(f"\nüéØ {name} ({role.upper()})")
        print(f"   ID: {template_id}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è
        dyno_fields = dyno_fields_str.split(',') if dyno_fields_str else []
        print(f"   üìã Dyno –ø–æ–ª—è ({len(dyno_fields)}):")
        
        for field in dyno_fields:
            field = field.strip()
            if field:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º ID –≤ SVG
                element_pattern = f'<[^>]*id="{re.escape(field)}"[^>]*>'
                match = re.search(element_pattern, svg_content)
                
                if match:
                    element = match.group(0)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
                    if any(keyword in field.lower() for keyword in ['image', 'photo', 'headshot']):
                        # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        fill_match = re.search(r'fill="url\(#([^)]+)\)"', element)
                        if fill_match:
                            pattern_id = fill_match.group(1)
                            print(f"      ‚úÖ {field} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, pattern: {pattern_id})")
                        else:
                            print(f"      ‚ö†Ô∏è {field} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ—Ç pattern)")
                    else:
                        # –≠—Ç–æ —Ç–µ–∫—Å—Ç
                        print(f"      ‚úÖ {field} (—Ç–µ–∫—Å—Ç)")
                else:
                    print(f"      ‚ùå {field} (—ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SVG)")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è propertyimage2
        if role == 'photo':
            print(f"\n   üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê PROPERTYIMAGE2:")
            
            if 'dyno.propertyimage2' in dyno_fields:
                print(f"      ‚úÖ dyno.propertyimage2 –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–µ–π")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
                element_pattern = r'<[^>]*id="dyno\.propertyimage2"[^>]*>'
                match = re.search(element_pattern, svg_content)
                
                if match:
                    element = match.group(0)
                    print(f"      ‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {element[:100]}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pattern
                    fill_match = re.search(r'fill="url\(#([^)]+)\)"', element)
                    if fill_match:
                        pattern_id = fill_match.group(1)
                        print(f"      ‚úÖ Pattern ID: {pattern_id}")
                        
                        # –ò—â–µ–º pattern –±–ª–æ–∫
                        pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                        pattern_match = re.search(pattern_pattern, svg_content, re.DOTALL)
                        
                        if pattern_match:
                            print(f"      ‚úÖ Pattern –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω")
                            
                            # –ò—â–µ–º image –≤–Ω—É—Ç—Ä–∏ pattern
                            image_pattern = r'<image[^>]*href="[^"]*"[^>]*/?>'
                            image_match = re.search(image_pattern, pattern_match.group(1))
                            
                            if image_match:
                                print(f"      ‚úÖ Image —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ pattern")
                            else:
                                print(f"      ‚ùå Image —ç–ª–µ–º–µ–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ pattern")
                        else:
                            print(f"      ‚ùå Pattern –±–ª–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"      ‚ùå Fill —Å pattern –ù–ï –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"      ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id='dyno.propertyimage2' –ù–ï –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"      ‚ùå dyno.propertyimage2 –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–µ–π")
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è
                similar_fields = [f for f in dyno_fields if 'property' in f.lower() or 'image' in f.lower()]
                if similar_fields:
                    print(f"      üîç –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è: {similar_fields}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—É—Å–µ–ª–∏
    print(f"\nüé† –ö–ê–†–£–°–ï–õ–ò:")
    cursor.execute("SELECT id, name, main_template_id, photo_template_id FROM carousels")
    carousels = cursor.fetchall()
    
    for carousel_id, name, main_id, photo_id in carousels:
        print(f"   üì¶ {name} ({carousel_id})")
        print(f"      Main: {main_id}")
        print(f"      Photo: {photo_id}")
    
    conn.close()

if __name__ == "__main__":
    analyze_templates()