#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é PNG —Å–∏—Å—Ç–µ–º—É
"""

import requests
import json
import time

def test_png_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô PNG –°–ò–°–¢–ï–ú–´")
    print("=" * 45)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = {
        "main_template_id": "1",
        "photo_template_id": "2", 
        "format": "png",
        "replacements": {
            "dyno.address": "123 Test Street",
            "dyno.price": "$750,000",
            "dyno.beds": "3",
            "dyno.baths": "2",
            "dyno.sqft": "2,500"
        }
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ PNG –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        response = requests.post(
            'http://localhost:5003/api/generate/carousel',
            json=data,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            if 'image_urls' in result:
                print(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(result['image_urls'])}")
                
                for i, url in enumerate(result['image_urls']):
                    print(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PNG
                    if '.png' in url:
                        print(f"‚úÖ –§–æ—Ä–º–∞—Ç PNG –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                        
                        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å
                        try:
                            img_resp = requests.get(url, timeout=10)
                            if img_resp.status_code == 200:
                                size = len(img_resp.content)
                                print(f"üìä –†–∞–∑–º–µ—Ä: {size} bytes")
                                
                                if size > 20000:  # –ë–æ–ª—å—à–µ 20KB - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                                elif size > 5000:  # –ë–æ–ª—å—à–µ 5KB - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
                                    print(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                                else:
                                    print(f"‚ùå –ú–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–ª—É—à–∫–∞)")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                    else:
                        print(f"‚ùå –ù–µ PNG —Ñ–æ—Ä–º–∞—Ç")
                
                return True
            else:
                print("‚ùå –ù–µ—Ç image_urls –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"üìã –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5003")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–∏—Å)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return False

def test_direct_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("\nüîß –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò –ù–ê–ü–†–Ø–ú–£–Æ")
    print("=" * 30)
    
    import sys
    sys.path.append('.')
    
    try:
        from app import convert_svg_to_png_improved, create_preview_svg
        
        # –¢–µ—Å—Ç–æ–≤—ã–π SVG —Å dyno –ø–æ–ª—è–º–∏
        test_svg = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="#e3f2fd"/>
            <rect x="20" y="20" width="360" height="260" fill="white" stroke="#1976d2" stroke-width="2"/>
            <text x="200" y="80" text-anchor="middle" font-size="24" fill="#1976d2" font-weight="bold">{{dyno.agentName}}</text>
            <text x="200" y="120" text-anchor="middle" font-size="16" fill="#666">{{dyno.propertyAddress}}</text>
            <text x="200" y="180" text-anchor="middle" font-size="32" fill="#4caf50" font-weight="bold">{{dyno.price}}</text>
            <text x="200" y="220" text-anchor="middle" font-size="14" fill="#999">{{dyno.bedrooms}} bed ‚Ä¢ {{dyno.bathrooms}} bath</text>
        </svg>'''
        
        # –ó–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª—è
        preview_svg = create_preview_svg(test_svg)
        print("‚úÖ Dyno –ø–æ–ª—è –∑–∞–º–µ–Ω–µ–Ω—ã")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        success = convert_svg_to_png_improved(preview_svg, 'test_direct_function.png', 400, 300)
        
        if success:
            import os
            if os.path.exists('test_direct_function.png'):
                size = os.path.getsize('test_direct_function.png')
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {size} bytes")
                os.remove('test_direct_function.png')
                return True
        
        print("‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô PNG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    direct_ok = test_direct_function()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_png_generation()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üîß –ü—Ä—è–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if direct_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üåê API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if api_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if direct_ok and api_ok:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û!")
        print("‚úÖ PNG —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("‚úÖ –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –±–µ–ª—ã—Ö –∑–∞–≥–ª—É—à–µ–∫")
        print("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ PNG —Ñ–∞–π–ª—ã")
    elif direct_ok:
        print("\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å API")
        print("–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–∏—Å–∞–µ—Ç")
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å PNG —Å–∏—Å—Ç–µ–º–æ–π")