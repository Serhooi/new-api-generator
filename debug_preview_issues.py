#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ü–†–ï–í–¨–Æ
============================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–µ–≤—å—é
"""

import re

def analyze_preview_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–≤—å—é"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –ü–†–ï–í–¨–Æ")
    print("=" * 50)
    
    print("üìã –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("1. ‚ùå –õ–æ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
    print("2. ‚ùå –§–æ—Ç–æ –∞–≥–µ–Ω—Ç–∞ —Å—ä–µ—Ö–∞–ª–æ (headshot positioning)")
    print("3. ‚ùå –§–æ—Ç–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –∑–∞–º–µ–Ω–∏–ª–æ—Å—å")
    
    print("\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
    
    print("\n1. –ü–†–û–ë–õ–ï–ú–ê –° –õ–û–ì–û:")
    print("   - –ü–æ–ª–µ dyno.companyLogo –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ")
    print("   - –ò–ª–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É (dyno.logo, dyno.brandLogo)")
    print("   - –ò–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    print("\n2. –ü–†–û–ë–õ–ï–ú–ê –° HEADSHOT:")
    print("   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ headshot –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ preview_system.py")
    print("   - –§—É–Ω–∫—Ü–∏—è process_svg_font_perfect –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è")
    print("   - –ò–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    print("\n3. –ü–†–û–ë–õ–ï–ú–ê –° PROPERTY IMAGE:")
    print("   - –ü–æ–ª–µ dyno.propertyImage –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É")
    print("   - –ò–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("   - –ò–ª–∏ URL –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

def test_field_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüß™ –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û–õ–ï–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
    try:
        from app import determine_image_type, is_image_field
        
        test_fields = [
            'dyno.agentPhoto',
            'dyno.propertyImage', 
            'dyno.companyLogo',
            'dyno.logo',
            'dyno.brandLogo',
            'dyno.headshot',
            'dyno.agentHeadshot'
        ]
        
        for field in test_fields:
            is_image = is_image_field(field)
            if is_image:
                image_type = determine_image_type(field)
                print(f"‚úÖ {field}: {image_type}")
            else:
                print(f"‚ùå {field}: –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤—Ä—É—á–Ω—É—é...")
        
        # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏
        def manual_is_image_field(dyno_field):
            field_lower = dyno_field.lower()
            explicit_image_indicators = ['image', 'headshot', 'logo', 'photo', 'pic', 'portrait']
            
            for indicator in explicit_image_indicators:
                if indicator in field_lower:
                    return True
            
            if 'agent' in field_lower and any(img in field_lower for img in ['photo', 'image', 'pic', 'headshot']):
                return True
            
            return False
        
        test_fields = [
            'dyno.agentPhoto',
            'dyno.propertyImage', 
            'dyno.companyLogo',
            'dyno.logo',
            'dyno.brandLogo'
        ]
        
        for field in test_fields:
            is_image = manual_is_image_field(field)
            print(f"{'‚úÖ' if is_image else '‚ùå'} {field}: {'–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if is_image else '–ù–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}")

def check_svg_template_fields():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ SVG —à–∞–±–ª–æ–Ω–µ"""
    print("\nüìÑ –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –í SVG –®–ê–ë–õ–û–ù–ï")
    print("=" * 50)
    
    print("–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π SVG —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π:")
    print("1. –ù–∞–π—Ç–∏ –≤—Å–µ id='dyno.*' –≤ SVG")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö —Å–≤—è–∑–∞–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ SVG
    sample_svg_patterns = [
        r'id="dyno\.([^"]*)"',
        r'id=\'dyno\.([^\']*)\'',
        r'\{\{dyno\.([^}]*)\}\}',
        r'\{dyno\.([^}]*)\}'
    ]
    
    print("\nüîç –ü–ê–¢–¢–ï–†–ù–´ –î–õ–Ø –ü–û–ò–°–ö–ê DYNO –ü–û–õ–ï–ô:")
    for pattern in sample_svg_patterns:
        print(f"   {pattern}")

def suggest_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüí° –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    print("1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–û:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ SVG (dyno.logo vs dyno.companyLogo)")
    print("   - –î–æ–±–∞–≤–∏—Ç—å 'logo' –≤ explicit_image_indicators –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    print("\n2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HEADSHOT:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ preview_system.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é process_svg_font_perfect")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("   - –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ preview_system.py")
    
    print("\n3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PROPERTY IMAGE:")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (dyno.propertyImage vs dyno.propertyimage)")
    print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ URL –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    print("\n4. –û–ë–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ preview_system.py")
    print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –∑–∞–º–µ–Ω—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
    print("   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

def create_test_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("\nüß™ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò")
    print("=" * 50)
    
    test_data = {
        'dyno.agentName': 'John Smith',
        'dyno.propertyAddress': '123 Main Street, Beverly Hills, CA 90210',
        'dyno.price': '$450,000',
        'dyno.bedrooms': '3',
        'dyno.bathrooms': '2',
        'dyno.sqft': '1,850',
        'dyno.agentPhone': '(555) 123-4567',
        'dyno.agentEmail': 'john@realty.com',
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        'dyno.agentPhoto': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
        'dyno.propertyImage': 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop',
        'dyno.companyLogo': 'https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO',
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        'dyno.logo': 'https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO',
        'dyno.brandLogo': 'https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO',
        'dyno.headshot': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
        'dyno.agentHeadshot': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'
    }
    
    print("üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞:")
    print("```json")
    import json
    print(json.dumps(test_data, indent=2, ensure_ascii=False))
    print("```")
    
    print("\nüîß –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ curl:")
    print("""
curl -X POST http://localhost:5000/api/preview/with-data \\
  -H "Content-Type: application/json" \\
  -d '{
    "template_id": "your-template-id",
    "replacements": {
      "dyno.agentPhoto": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face",
      "dyno.propertyImage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop",
      "dyno.companyLogo": "https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO"
    },
    "type": "png"
  }'
    """)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ü–†–ï–í–¨–Æ")
    print("=" * 60)
    
    analyze_preview_issues()
    test_field_detection()
    check_svg_template_fields()
    suggest_fixes()
    create_test_data()
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π SVG —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ preview_system.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–º–µ–Ω")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

if __name__ == "__main__":
    main()