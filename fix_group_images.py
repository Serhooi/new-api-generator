#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
"""

import sqlite3
import re

DATABASE_PATH = 'templates.db'

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    text = str(text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def process_svg_with_groups(svg_content, replacements):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø"""
    
    processed_svg = svg_content
    
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if any(keyword in dyno_field.lower() for keyword in ['image', 'photo', 'headshot']):
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            
            safe_url = str(replacement).replace('&', '&amp;')
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {dyno_field}")
                
                element_content = match.group(0)
                pattern_id = None
                
                # –ò—â–µ–º pattern –≤ fill –∞—Ç—Ä–∏–±—É—Ç–µ —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                fill_pattern = r'fill="url\(#([^)]+)\)"'
                fill_match = re.search(fill_pattern, element_content)
                
                if fill_match:
                    pattern_id = fill_match.group(1)
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {pattern_id}")
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –∏—â–µ–º pattern –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    if element_content.startswith('<g'):
                        print(f"   üîç –≠—Ç–æ –≥—Ä—É–ø–ø–∞, –∏—â—É pattern –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö...")
                        
                        # –ò—â–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                        group_pattern = f'<g[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</g>'
                        group_match = re.search(group_pattern, processed_svg, re.DOTALL)
                        
                        if group_match:
                            group_content = group_match.group(1)
                            
                            # –ò—â–µ–º fill –≤ –ª—é–±–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                            nested_fill_match = re.search(fill_pattern, group_content)
                            if nested_fill_match:
                                pattern_id = nested_fill_match.group(1)
                                print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ: {pattern_id}")
                
                if pattern_id:
                    # –ò—â–µ–º pattern –±–ª–æ–∫
                    pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                    pattern_match = re.search(pattern_block_pattern, processed_svg, re.DOTALL)
                    
                    if pattern_match:
                        pattern_content = pattern_match.group(1)
                        
                        # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç –≤ pattern (–ø—Ä—è–º–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ use)
                        image_replaced = False
                        
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç
                        use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
                        use_match = re.search(use_pattern, pattern_content)
                        
                        if use_match:
                            image_id = use_match.group(1)
                            print(f"   üîó –ù–∞–π–¥–µ–Ω use —ç–ª–µ–º–µ–Ω—Ç: #{image_id}")
                            
                            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
                            image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
                            image_match = re.search(image_pattern, processed_svg)
                            
                            if image_match:
                                old_image = image_match.group(0)
                                new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', old_image)
                                new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                                
                                processed_svg = processed_svg.replace(old_image, new_image)
                                print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ use –∑–∞–º–µ–Ω–µ–Ω–æ: {safe_url[:50]}...")
                                image_replaced = True
                        
                        # –ï—Å–ª–∏ use –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø—Ä—è–º–æ–π image
                        if not image_replaced:
                            direct_image_pattern = r'<image[^>]*href="[^"]*"[^>]*/?>'
                            direct_image_match = re.search(direct_image_pattern, pattern_content)
                            
                            if direct_image_match:
                                old_image = direct_image_match.group(0)
                                new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', old_image)
                                new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                                
                                processed_svg = processed_svg.replace(old_image, new_image)
                                print(f"   ‚úÖ –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ: {safe_url[:50]}...")
                                image_replaced = True
                        
                        if not image_replaced:
                            print(f"   ‚ö†Ô∏è Image —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern")
                    else:
                        print(f"   ‚ö†Ô∏è Pattern –±–ª–æ–∫ {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"   ‚ö†Ô∏è Pattern –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ")
            else:
                print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            print(f"üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {dyno_field}")
            
            safe_replacement = safe_escape_for_svg(str(replacement))
            
            # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
            element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
            
            def replace_element_content(match):
                full_element = match.group(0)
                element_content = match.group(1)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                def replace_tspan_content(tspan_match):
                    opening_tag = tspan_match.group(1)
                    old_content = tspan_match.group(2)
                    closing_tag = tspan_match.group(3)
                    
                    return opening_tag + safe_replacement + closing_tag
                
                tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
                new_content = re.sub(tspan_pattern, replace_tspan_content, element_content, count=1)
                
                return full_element.replace(element_content, new_content)
            
            new_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
            
            if new_svg != processed_svg:
                processed_svg = new_svg
                print(f"   ‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
            else:
                print(f"   ‚ùå –ü–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return processed_svg

def test_real_templates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–´–• –®–ê–ë–õ–û–ù–û–í –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ì–†–£–ü–ü")
    print("=" * 50)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    cursor.execute("SELECT id, name, template_role, svg_content FROM templates WHERE category = 'uploaded'")
    templates = cursor.fetchall()
    
    if not templates:
        print("‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "dyno.propertyimage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1080&h=600&fit=crop",
        "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
        "dyno.propertyimage2": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop",
        "dyno.propertyaddress": "123 Main Street, Beverly Hills, CA 90210",
        "dyno.price": "$450,000",
        "dyno.name": "John Smith",
        "dyno.phone": "(555) 123-4567",
        "dyno.email": "john@example.com"
    }
    
    for template_id, name, role, svg_content in templates:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É—é: {name} ({role.upper()})")
        
        try:
            processed_svg = process_svg_with_groups(svg_content, test_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_filename = f"test_real_{role}_{template_id[:8]}.svg"
            with open(output_filename, 'w', encoding='utf-8') as f:
                f.write(processed_svg)
            
            print(f"\n   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_filename}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è photo —à–∞–±–ª–æ–Ω–∞
            if role == 'photo' and 'dyno.propertyimage2' in test_data:
                test_url = test_data['dyno.propertyimage2']
                escaped_url = test_url.replace('&', '&amp;')
                
                if escaped_url in processed_svg:
                    print(f"   ‚úÖ dyno.propertyimage2 –ù–ê–ô–î–ï–ù –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
                else:
                    print(f"   ‚ùå dyno.propertyimage2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                    
                    # –ò—â–µ–º —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å
                    image_urls = re.findall(r'href="([^"]*)"', processed_svg)
                    print(f"      üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ URL: {image_urls}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    conn.close()

if __name__ == "__main__":
    test_real_templates()