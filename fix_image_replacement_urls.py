#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL'–æ–≤.
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤—è–∑–∏ pattern -> image.
"""

import re
import requests
import base64
from PIL import Image
import io

def download_and_convert_image(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64"""
    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(io.BytesIO(response.content))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode in ('RGBA', 'LA', 'P'):
            img = img.convert('RGB')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ JPEG
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        buffer.seek(0)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
        base64_url = f"data:image/jpeg;base64,{img_base64}"
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 ({len(base64_url)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return base64_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def replace_image_url_in_svg(svg_content, field_name, new_image_url):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG —Ñ–∞–π–ª–µ –Ω–∞ URL –∏–ª–∏ base64.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä—è–º—É—é –∑–∞–º–µ–Ω—É URL, —Ç–∞–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ base64.
    """
    print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {field_name}")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id —Ä–∞–≤–Ω—ã–º field_name (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
    direct_element_regex = rf'(<[^>]*id="{re.escape(field_name)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    direct_match = re.search(direct_element_regex, svg_content)
    
    if direct_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å id: {field_name}")
        # –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞ URL
        new_svg_content = re.sub(direct_element_regex, 
                                lambda m: m.group(1) + new_image_url + m.group(2), 
                                svg_content)
        
        if new_svg_content != svg_content:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_image_url}")
            return new_svg_content
    
    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ pattern
    print(f"üîç –ò—â—É —á–µ—Ä–µ–∑ pattern –¥–ª—è –ø–æ–ª—è: {field_name}")
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º field_name –∏ fill="url(#pattern_id)"
    element_regex = rf'<[^>]*id="[^"]*{re.escape(field_name)}[^"]*"[^>]*fill="url\(#([^)]+)\)"[^>]*>'
    element_match = re.search(element_regex, svg_content, re.IGNORECASE)
    
    if not element_match:
        print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_id = element_match.group(1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
    
    # –ò—â–µ–º pattern —Å —ç—Ç–∏–º ID
    pattern_regex = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
    pattern_match = re.search(pattern_regex, svg_content, re.DOTALL)
    
    if not pattern_match:
        print(f"‚ùå Pattern —Å ID {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_content = pattern_match.group(1)
    
    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern
    use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"[^>]*/?>', pattern_content)
    if not use_match:
        print(f"‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern {pattern_id}")
        return svg_content
    
    image_id = use_match.group(1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω image ID: {image_id}")
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º image —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º ID
    image_regex = rf'(<image[^>]*id="{re.escape(image_id)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if new_image_url.startswith('http'):
        # –ï—Å–ª–∏ —ç—Ç–æ URL, –º–æ–∂–µ–º –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å URL, –ª–∏–±–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ base64
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        base64_data = download_and_convert_image(new_image_url)
        if base64_data:
            replacement_url = base64_data
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
            replacement_url = new_image_url
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ base64 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        replacement_url = new_image_url
    
    def replace_image_href(match):
        return match.group(1) + replacement_url + match.group(2)
    
    new_svg_content = re.sub(image_regex, replace_image_href, svg_content)
    
    if new_svg_content != svg_content:
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: {replacement_url[:50]}...")
        return new_svg_content
    else:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –Ω–µ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ")
        return svg_content

def test_main_svg_replacement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ main.svg"""
    
    print("üß™ –¢–ï–°–¢: –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ main.svg")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
    try:
        with open('main.svg', 'r', encoding='utf-8') as f:
            svg_content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª main.svg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä SVG —Ñ–∞–π–ª–∞: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'dyno.propertyimage': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop',
        'dyno.agentheadshot': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=120&h=120&fit=crop&crop=face',
        'dyno.logo': 'https://via.placeholder.com/142x56/4F46E5/FFFFFF?text=LOGO'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    modified_svg = svg_content
    successful_replacements = 0
    
    for field_name, image_url in test_data.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {field_name} = {image_url}")
        
        original_size = len(modified_svg)
        modified_svg = replace_image_url_in_svg(modified_svg, field_name, image_url)
        new_size = len(modified_svg)
        
        if new_size != original_size:
            successful_replacements += 1
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {new_size - original_size:+d} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'main_fixed_images.svg'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(modified_svg)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω–µ–Ω–æ: {successful_replacements}/{len(test_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    for field_name in test_data.keys():
        if field_name in ['dyno.propertyimage', 'dyno.agentheadshot', 'dyno.logo']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –∑–∞–º–µ–Ω–µ–Ω
            if 'unsplash.com' in modified_svg or 'placeholder.com' in modified_svg:
                print(f"‚úÖ {field_name}: URL —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω!")
            else:
                print(f"‚ùå {field_name}: URL –ù–ï –∑–∞–º–µ–Ω–µ–Ω")

def analyze_svg_structure(filename):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É SVG —Ñ–∞–π–ª–∞"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´: {filename}")
    print("=" * 60)
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            svg_content = f.read()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò—â–µ–º dyno –ø–æ–ª—è
    dyno_fields = re.findall(r'id="(dyno\.[^"]+)"', svg_content)
    print(f"üîç –ù–∞–π–¥–µ–Ω—ã dyno –ø–æ–ª—è: {dyno_fields}")
    
    # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç—ã
    image_elements = re.findall(r'<image[^>]*id="([^"]+)"', svg_content)
    print(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω—ã image —ç–ª–µ–º–µ–Ω—Ç—ã: {image_elements}")
    
    # –ò—â–µ–º pattern —ç–ª–µ–º–µ–Ω—Ç—ã
    pattern_elements = re.findall(r'<pattern[^>]*id="([^"]+)"', svg_content)
    print(f"üé® –ù–∞–π–¥–µ–Ω—ã pattern —ç–ª–µ–º–µ–Ω—Ç—ã: {pattern_elements}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ pattern -> image
    print(f"\nüîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô PATTERN -> IMAGE:")
    for pattern_id in pattern_elements:
        pattern_regex = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
        pattern_match = re.search(pattern_regex, svg_content, re.DOTALL)
        if pattern_match:
            pattern_content = pattern_match.group(1)
            use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"', pattern_content)
            if use_match:
                image_id = use_match.group(1)
                print(f"  {pattern_id} -> {image_id}")

if __name__ == "__main__":
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–ú–ï–ù–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    analyze_svg_structure('main.svg')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É
    test_main_svg_replacement()
    
    print("\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")