#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ base64 - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

def proper_base64_fix():
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ base64 –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîß –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BASE64")
    print("=" * 40)
    
    with open('app.py', 'r') as f:
        content = f.read()
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    old_emergency_fix = '''            # –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG - –£–ë–ò–†–ê–ï–ú –í–°–ï BASE64!
            print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - —É–±–∏—Ä–∞—é –≤—Å–µ base64 –¥–∞–Ω–Ω—ã–µ...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –†–ê–î–ò–ö–ê–õ–¨–ù–û –£–ë–ò–†–ê–ï–ú –í–°–ï BASE64 –î–ê–ù–ù–´–ï
            print("üö® –£–±–∏—Ä–∞—é –≤—Å–µ base64 –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é...")
            cleaned_svg = re.sub(r'data:image/[^;]+;base64,[^"\\'>\\s]+', 'https://via.placeholder.com/400x300/cccccc/666666?text=Image', cleaned_svg)
            
            # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏
            def fix_image_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<image{tag_content}/>'
            
            cleaned_svg = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
            def fix_use_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<use{tag_content}/>'
            
            cleaned_svg = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    new_proper_fix = '''            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê BASE64 - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–ò–ú–í–û–õ–´, –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
            print("üîß –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ base64 - –∏—Å–ø—Ä–∞–≤–ª—è—é —Å–∏–º–≤–æ–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ base64 –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º
            def clean_base64_data(match):
                full_match = match.group(0)
                mime_type = match.group(1)
                base64_data = match.group(2)
                
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ base64 (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ)
                cleaned_base64 = re.sub(r'[^A-Za-z0-9+/=]', '', base64_data)
                
                # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 1MB –≤ base64 ‚âà 1.3M —Å–∏–º–≤–æ–ª–æ–≤)
                if len(cleaned_base64) > 1300000:
                    print(f"‚ö†Ô∏è Base64 —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(cleaned_base64)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞—é...")
                    cleaned_base64 = cleaned_base64[:1300000]
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º padding
                remainder = len(cleaned_base64) % 4
                if remainder == 2:
                    cleaned_base64 += '=='
                elif remainder == 3:
                    cleaned_base64 += '='
                elif remainder == 1:
                    cleaned_base64 = cleaned_base64[:-1]  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
                
                return f'data:image/{mime_type};base64,{cleaned_base64}'
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ base64 –¥–∞–Ω–Ω—ã–µ
            pattern = r'data:image/([^;]+);base64,([^"\\'>\\s]+)'
            matches_before = len(re.findall(pattern, cleaned_svg))
            cleaned_svg = re.sub(pattern, clean_base64_data, cleaned_svg)
            matches_after = len(re.findall(pattern, cleaned_svg))
            
            print(f"üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {matches_before} base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏
            def fix_image_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<image{tag_content}/>'
            
            cleaned_svg = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
            def fix_use_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<use{tag_content}/>'
            
            cleaned_svg = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üîß –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥
    if old_emergency_fix in content:
        content = content.replace(old_emergency_fix, new_proper_fix)
        print("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open('app.py', 'w') as f:
        f.write(content)
    
    print("üíæ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º base64")
    return True

if __name__ == "__main__":
    if proper_base64_fix():
        print("\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û!")
        print("üìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:")
        print("  1. ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –°–û–•–†–ê–ù–ï–ù–´")
        print("  2. üîß Base64 –¥–∞–Ω–Ω—ã–µ –û–ß–ò–©–ï–ù–´ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        print("  3. ‚úÇÔ∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ base64 –û–ë–†–ï–ó–ê–ù–´")
        print("  4. üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω padding base64")
        
        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("  - PNG –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        print("  - XML –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–º")
        print("  - –ü—Ä–µ–≤—å—é –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        
        print("\nüöÄ –ù—É–∂–µ–Ω redeploy!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")