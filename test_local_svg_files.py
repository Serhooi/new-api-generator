#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö SVG —Ñ–∞–π–ª–æ–≤ main.svg –∏ photo.svg
"""

import os
import subprocess
import tempfile
import re

def test_svg_cleaning_and_conversion(svg_file):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é SVG —Ñ–∞–π–ª–∞"""
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª: {svg_file}")
    
    if not os.path.exists(svg_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {svg_file}")
        return False
    
    # –ß–∏—Ç–∞–µ–º SVG
    with open(svg_file, 'r') as f:
        svg_content = f.read()
    
    print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
    image_tags = len(re.findall(r'<image[^>]*>', svg_content))
    use_tags = len(re.findall(r'<use[^>]*>', svg_content))
    unclosed_image = len(re.findall(r'<image[^>]*[^/]>', svg_content))
    unclosed_use = len(re.findall(r'<use[^>]*[^/]>', svg_content))
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤:")
    print(f"  - image —Ç–µ–≥–æ–≤: {image_tags} (–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö: {unclosed_image})")
    print(f"  - use —Ç–µ–≥–æ–≤: {use_tags} (–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö: {unclosed_use})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à—É —Ä–∞–¥–∏–∫–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    print("üî• –ü—Ä–∏–º–µ–Ω—è—é —Ä–∞–¥–∏–∫–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
    cleaned_svg = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned_svg = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned_svg)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
    cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
    
    # 3. –†–ê–î–ò–ö–ê–õ–¨–ù–û - –£–ë–ò–†–ê–ï–ú –í–°–ï IMAGE –¢–ï–ì–ò –ü–û–õ–ù–û–°–¢–¨–Æ
    cleaned_svg = re.sub(r'<image[^>]*/?>', '', cleaned_svg)
    
    # 4. –£–ë–ò–†–ê–ï–ú –í–°–ï USE –¢–ï–ì–ò –ü–û–õ–ù–û–°–¢–¨–Æ
    cleaned_svg = re.sub(r'<use[^>]*/?>', '', cleaned_svg)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
    self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
    
    for tag in self_closing_tags:
        cleaned_svg = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\1/>', cleaned_svg)
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_svg = re.sub(r'\s+', ' ', cleaned_svg)
    
    print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã
    remaining_image = len(re.findall(r'<image[^>]*>', cleaned_svg))
    remaining_use = len(re.findall(r'<use[^>]*>', cleaned_svg))
    
    print(f"üîç –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
    print(f"  - image —Ç–µ–≥–æ–≤: {remaining_image}")
    print(f"  - use —Ç–µ–≥–æ–≤: {remaining_use}")
    
    if remaining_image == 0 and remaining_use == 0:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π SVG
    cleaned_file = f"cleaned_{os.path.basename(svg_file)}"
    with open(cleaned_file, 'w') as f:
        f.write(cleaned_svg)
    
    print(f"üíæ –û—á–∏—â–µ–Ω–Ω—ã–π SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cleaned_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ PNG —á–µ—Ä–µ–∑ rsvg-convert
    print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ PNG...")
    
    png_file = f"test_{os.path.basename(svg_file).replace('.svg', '.png')}"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rsvg-convert –¥–æ—Å—Ç—É–ø–µ–Ω
        version_result = subprocess.run(['rsvg-convert', '--version'], 
                                      capture_output=True, text=True, timeout=5)
        if version_result.returncode != 0:
            print("‚ùå rsvg-convert –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        print(f"‚úÖ rsvg-convert –Ω–∞–π–¥–µ–Ω: {version_result.stdout.strip()}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ stdin
        result = subprocess.run(
            ["rsvg-convert", "-w", "400"],
            input=cleaned_svg.encode("utf-8"),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=30
        )
        
        if result.returncode == 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
            with open(png_file, 'wb') as f:
                f.write(result.stdout)
            
            png_size = len(result.stdout)
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {png_file} ({png_size} –±–∞–π—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if os.path.exists(png_file) and os.path.getsize(png_file) > 0:
                print("‚úÖ PNG —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π!")
                return True
            else:
                print("‚ùå PNG —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
                return False
        else:
            print(f"‚ùå rsvg-convert –æ—à–∏–±–∫–∞: {result.stderr.decode()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def test_cairosvg_fallback(svg_file):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º CairoSVG –∫–∞–∫ fallback"""
    
    print(f"\nüé® –¢–µ—Å—Ç–∏—Ä—É—é CairoSVG –¥–ª—è: {svg_file}")
    
    try:
        import cairosvg
        
        # –ß–∏—Ç–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π SVG
        cleaned_file = f"cleaned_{os.path.basename(svg_file)}"
        if not os.path.exists(cleaned_file):
            print(f"‚ùå –û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cleaned_file}")
            return False
        
        with open(cleaned_file, 'r') as f:
            cleaned_svg = f.read()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ CairoSVG
        png_bytes = cairosvg.svg2png(bytestring=cleaned_svg.encode('utf-8'), 
                                   output_width=400)
        
        cairo_png_file = f"cairo_{os.path.basename(svg_file).replace('.svg', '.png')}"
        with open(cairo_png_file, 'wb') as f:
            f.write(png_bytes)
        
        print(f"‚úÖ CairoSVG PNG —Å–æ–∑–¥–∞–Ω: {cairo_png_file} ({len(png_bytes)} –±–∞–π—Ç)")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è CairoSVG –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå CairoSVG –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–´–• SVG –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    svg_files = ['main.svg', 'photo.svg']
    results = {}
    
    for svg_file in svg_files:
        print(f"\n{'='*20} {svg_file.upper()} {'='*20}")
        
        # –¢–µ—Å—Ç 1: –û—á–∏—Å—Ç–∫–∞ –∏ rsvg-convert
        rsvg_success = test_svg_cleaning_and_conversion(svg_file)
        
        # –¢–µ—Å—Ç 2: CairoSVG fallback
        cairo_success = test_cairosvg_fallback(svg_file)
        
        results[svg_file] = {
            'rsvg': rsvg_success,
            'cairo': cairo_success
        }
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    for svg_file, result in results.items():
        print(f"\nüìÑ {svg_file}:")
        print(f"  ‚úÖ rsvg-convert: {'–†–ê–ë–û–¢–ê–ï–¢' if result['rsvg'] else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"  ‚úÖ CairoSVG: {'–†–ê–ë–û–¢–ê–ï–¢' if result['cairo'] else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_rsvg = all(r['rsvg'] for r in results.values())
    all_cairo = all(r['cairo'] for r in results.values())
    
    print(f"\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°:")
    print(f"  rsvg-convert: {'‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' if all_rsvg else '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    print(f"  CairoSVG: {'‚úÖ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢' if all_cairo else '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    if all_rsvg or all_cairo:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\n‚ùå –°–ò–°–¢–ï–ú–ê PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")

if __name__ == "__main__":
    main()