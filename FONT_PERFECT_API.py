"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –®–†–ò–§–¢–û–í
================================================================

–í–µ—Ä—Å–∏—è 8.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤ Montserrat
"""

import os
import sqlite3
import uuid
import time
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io
import html
import subprocess
from PIL import Image
import cairosvg

app = Flask(__name__)
CORS(app, origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)

def convert_svg_to_png(svg_content, output_path, width=1200, height=800):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG –≤ PNG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    """
    try:
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {output_path}")
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ SVG –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–º–µ–Ω—ã —à—Ä–∏—Ñ—Ç–æ–≤
        svg_content = svg_content.replace('font-family="Montserrat"', 'font-family="Montserrat, sans-serif"')
        svg_content = svg_content.replace('font-family="Inter"', 'font-family="Inter, sans-serif"')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ cairosvg —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            dpi=300  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
        with open(output_path, 'wb') as f:
            f.write(png_data)
        
        print(f"‚úÖ PNG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG: {e}")
        return False

def save_png_only(svg_content, base_path, width=1200, height=800):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ PNG —Ñ–∞–π–ª –∏–∑ SVG
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É
    """
    png_path = f"{base_path}.png"
    
    try:
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG: {png_path}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ cairosvg
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            dpi=300  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
        with open(png_path, 'wb') as f:
            f.write(png_data)
        
        print(f"‚úÖ PNG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {png_path}")
        
        return {
            'png_path': png_path,
            'png_url': png_path.replace('output/', '/output/')
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG: {e}")
        # Fallback - —Å–æ—Ö—Ä–∞–Ω—è–µ–º SVG –µ—Å–ª–∏ PNG –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
        svg_path = f"{base_path}.svg"
        with open(svg_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)
        
        return {
            'png_path': svg_path,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º SVG –∫–∞–∫ fallback
            'png_url': svg_path.replace('output/', '/output/')
        }

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    fields = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ dyno –ø–æ–ª–µ–π
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è &
    """
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML/SVG
    text = str(text)
    text = text.replace('&', '&amp;')  # –í–ê–ñ–ù–û: & –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def process_svg_font_perfect(svg_content, replacements):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG:
    1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ë–ï–ó –ó–ê–ú–ï–ù–´
    """
    print("üé® –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–• –®–†–ò–§–¢–û–í")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã - –ù–ï –ó–ê–ú–ï–ù–Ø–ï–ú –ò–•
    processed_svg = svg_content
    
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        safe_replacement = safe_escape_for_svg(str(replacement))
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        if 'address' in dyno_field.lower():
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            address_parts = str(replacement).split(', ')
            if len(address_parts) >= 3:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ + —É–ª–∏—Ü–∞
                line1 = address_parts[0]
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –≥–æ—Ä–æ–¥ + —à—Ç–∞—Ç + –∏–Ω–¥–µ–∫—Å
                line2 = ', '.join(address_parts[1:])
                
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è SVG
                safe_replacement = f'''<tspan x="0" dy="0">{safe_escape_for_svg(line1)}</tspan><tspan x="0" dy="1.2em">{safe_escape_for_svg(line2)}</tspan>'''
                print(f"   üìç –ê–¥—Ä–µ—Å —Ä–∞–∑–±–∏—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏: {line1} | {line2}")
            else:
                safe_replacement = safe_escape_for_svg(str(replacement))
        
        if 'image' in dyno_field.lower() or 'headshot' in dyno_field.lower() or 'logo' in dyno_field.lower():
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            
            safe_url = str(replacement).replace('&', '&amp;')
            
            if 'propertyimage' in dyno_field.lower():
                aspect_ratio = 'xMidYMid slice'
            elif 'logo' in dyno_field.lower():
                aspect_ratio = 'xMidYMid meet'
            elif 'headshot' in dyno_field.lower() or 'agent' in dyno_field.lower():
                # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è headshot - –ù–ï –æ–±—Ä–µ–∑–∞–µ–º –ª–∏—Ü–∞
                aspect_ratio = 'xMidYMid meet'  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É + –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            else:
                aspect_ratio = 'xMidYMid meet'
            
            # –ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø HEADSHOT - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ü–û–õ–ù–´–ô –ö–†–£–ì
            if 'headshot' in dyno_field.lower() or 'agent' in dyno_field.lower():
                print(f"üîÑ –ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è headshot: {dyno_field}")
                
                # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å clipPath –¥–ª—è headshot
                clip_pattern = f'<g[^>]*clip-path="url\\(#([^)]+)\\)"[^>]*>\\s*<rect[^>]*id="{re.escape(dyno_field)}"[^>]*>'
                clip_match = re.search(clip_pattern, processed_svg)
                
                if clip_match:
                    clip_id = clip_match.group(1)
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω clipPath: {clip_id} –¥–ª—è headshot")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ clipPath
                    clip_def_pattern = f'<clipPath[^>]*id="{re.escape(clip_id)}"[^>]*>\\s*<rect[^>]*rx="([^"]+)"[^>]*>'
                    clip_def_match = re.search(clip_def_pattern, processed_svg)
                    
                    if clip_def_match:
                        rx_value = clip_def_match.group(1)
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ clipPath —Å rx={rx_value} (–∫—Ä—É–≥–ª–∞—è –º–∞—Å–∫–∞)")
                        
                        # –ù–∞—Ö–æ–¥–∏–º pattern –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        element_pattern = f'<rect[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
                        match = re.search(element_pattern, processed_svg)
                        
                        if match:
                            pattern_id = match.group(1)
                            
                            # –ù–∞—Ö–æ–¥–∏–º pattern –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                            pattern_def = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>[^<]*<use[^>]*xlink:href="#([^"]+)"[^>]*>'
                            pattern_match = re.search(pattern_def, processed_svg)
                            
                            if pattern_match:
                                image_id = pattern_match.group(1)
                                
                                # –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ defs
                                image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                                def replace_specific_image(img_match):
                                    result = img_match.group(0)
                                    result = re.sub(r'href="[^"]*"', f'href="{safe_url}"', result)
                                    result = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', result)
                                    result = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="xMidYMid meet"', result)
                                    
                                    if 'preserveAspectRatio=' not in result:
                                        result = result.replace('/>', f' preserveAspectRatio="xMidYMid meet"/>')
                                    
                                    return result
                                
                                processed_svg = re.sub(image_pattern, replace_specific_image, processed_svg, count=1)
                                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ headshot {image_id} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π xMidYMid meet")
                                
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                continue
                
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ clipPath –∏–ª–∏ pattern
                print(f"   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è headshot")
                
                # –ù–∞—Ö–æ–¥–∏–º pattern –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
                match = re.search(element_pattern, processed_svg)
                
                if match:
                    pattern_id = match.group(1)
                    image_id = pattern_id.replace("pattern", "image")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ pattern
                    image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                    def replace_specific_image(img_match):
                        result = img_match.group(0)
                        result = re.sub(r'href="[^"]*"', f'href="{safe_url}"', result)
                        result = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', result)
                        result = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="xMidYMid meet"', result)
                        
                        if 'preserveAspectRatio=' not in result:
                            result = result.replace('/>', f' preserveAspectRatio="xMidYMid meet"/>')
                        
                        return result
                    
                    processed_svg = re.sub(image_pattern, replace_specific_image, processed_svg, count=1)
                    print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ headshot {image_id} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π xMidYMid meet")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    continue
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω pattern –¥–ª—è headshot, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            # –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –î–†–£–ì–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                pattern_id = match.group(1)
                image_id = pattern_id.replace("pattern", "image")
                
                image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*>'
                def replace_specific_image(img_match):
                    result = img_match.group(0)
                    result = re.sub(r'href="[^"]*"', f'href="{safe_url}"', result)
                    result = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', result)
                    result = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', result)
                    
                    if 'preserveAspectRatio=' not in result:
                        result = result.replace('/>', f' preserveAspectRatio="{aspect_ratio}"/>')
                    
                    return result
                
                processed_svg = re.sub(image_pattern, replace_specific_image, processed_svg, count=1)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_id}")
        
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê - –∏—â–µ–º –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: {dyno_field}")
            
            # –ò—â–µ–º –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ dyno –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            text_element_pattern = f'<text[^>]*>([^<]*{re.escape(dyno_field)}[^<]*)</text>'
            matches = list(re.finditer(text_element_pattern, processed_svg))
            
            if matches:
                # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –ü–ï–†–í–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                match = matches[0]
                old_text = match.group(1)
                
                if 'address' in dyno_field.lower():
                    # –î–ª—è –∞–¥—Ä–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º tspan —ç–ª–µ–º–µ–Ω—Ç—ã
                    new_text = safe_replacement
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
                    new_text = old_text.replace(dyno_field, safe_replacement)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                old_element = match.group(0)
                new_element = old_element.replace(old_text, new_text)
                
                processed_svg = processed_svg.replace(old_element, new_element, 1)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç: {old_text} ‚Üí {new_text[:50]}...")
            
            else:
                # Fallback - –∏—â–µ–º –ø–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                patterns = [
                    f'>{re.escape(dyno_field)}<',
                    f'{{{{\\s*{re.escape(dyno_field)}\\s*}}}}',
                    f'{{\\s*{re.escape(dyno_field)}\\s*}}',
                ]
                
                replaced = False
                for pattern in patterns:
                    if re.search(pattern, processed_svg):
                        if pattern.startswith('>'):
                            processed_svg = re.sub(pattern, f'>{safe_replacement}<', processed_svg, count=1)
                        else:
                            processed_svg = re.sub(pattern, safe_replacement, processed_svg, count=1)
                        
                        print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ fallback –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                        replaced = True
                        break
                
                if not replaced:
                    print(f"   ‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —à–∞–±–ª–æ–Ω–∞")
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return processed_svg        
                print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                return full_element.replace(element_content, new_content)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
            new_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
            
            if new_svg != processed_svg:
                processed_svg = new_svg
                print(f"   ‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
            else:
                print(f"   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å id='{dyno_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –£–ë–ò–†–ê–ï–ú –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É —à—Ä–∏—Ñ—Ç–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ!
    print("üî§ –°–û–•–†–ê–ù–Ø–Æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–ù–ï –∑–∞–º–µ–Ω—è—é –Ω–∞ Montserrat)")
    
    # –£–ë–ò–†–ê–ï–ú –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Google Fonts –∏–º–ø–æ—Ä—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    print("üì• –ù–ï –¥–æ–±–∞–≤–ª—è—é Google Fonts –∏–º–ø–æ—Ä—Ç - —Å–æ—Ö—Ä–∞–Ω—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
    
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return processed_svg

def ensure_db_exists():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É templates
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT NOT NULL,
            template_role TEXT NOT NULL,
            svg_content TEXT NOT NULL,
            dyno_fields TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É carousels
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carousels (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            main_template_id TEXT NOT NULL,
            photo_template_id TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_template_id) REFERENCES templates (id),
            FOREIGN KEY (photo_template_id) REFERENCES templates (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def create_app():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–∞ –¥–ª—è Gunicorn)
    """
    ensure_db_exists()
    return app

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4]
            })
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ templates_page: {str(e)}")
        return render_template('templates.html', templates=[])

@app.route('/upload')
def upload_page():
    return render_template('upload.html')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
@app.route('/api/upload-single', methods=['POST'])
def upload_single_template():
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        template_role = request.form.get('template_role', '')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dyno –ø–æ–ª–µ–π
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_fields = extract_dyno_fields_simple(svg_content) if has_dyno else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        template_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, template_role, svg_content, ','.join(dyno_fields)])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PNG –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        preview_url = generate_png_preview(svg_content, template_id)
        
        return jsonify({
            'success': True,
            'template_id': template_id,
            'has_dyno_fields': has_dyno,
            'dyno_fields': dyno_fields,
            'preview_url': preview_url,
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/upload-carousel', methods=['POST'])
def upload_carousel():
    try:
        if 'main_file' not in request.files or 'photo_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main –∏ photo'}), 400
        
        main_file = request.files['main_file']
        photo_file = request.files['photo_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        main_svg = main_file.read().decode('utf-8')
        photo_svg = photo_file.read().decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è
        main_dyno_info = {
            'has_dyno': has_dyno_fields_simple(main_svg),
            'fields': extract_dyno_fields_simple(main_svg)
        }
        
        photo_dyno_info = {
            'has_dyno': has_dyno_fields_simple(photo_svg),
            'fields': extract_dyno_fields_simple(photo_svg)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PNG –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        main_preview_url = generate_png_preview(main_svg, main_template_id)
        photo_preview_url = generate_png_preview(photo_svg, photo_template_id)
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_preview_url': main_preview_url,
            'photo_preview_url': photo_preview_url,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API —Ä–æ—É—Ç—ã
@app.route('/api/health')
def health():
    return jsonify({"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/api/templates/all-previews')
def get_all_templates():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, category, template_role, svg_content, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        templates = []
        for template in templates_data:
            template_id = template[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PNG –ø—Ä–µ–≤—å—é
            preview_path = os.path.join(OUTPUT_DIR, 'previews', f"{template_id}_preview.png")
            
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            if not os.path.exists(preview_path):
                svg_content = template[4]
                generate_png_preview(svg_content, template_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–µ–≤—å—é
            preview_url = f'/output/previews/{template_id}_preview.png'
            
            templates.append({
                'id': template_id,
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[5],
                'preview_url': preview_url
            })
        
        return jsonify({
            'templates': templates,
            'total': len(templates)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}'}), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG –ø—Ä–µ–≤—å—é
def generate_png_preview(svg_content, template_id):
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        preview_dir = os.path.join(OUTPUT_DIR, 'previews')
        os.makedirs(preview_dir, exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PNG –ø—Ä–µ–≤—å—é
        png_path = os.path.join(preview_dir, f"{template_id}_preview.png")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG —Å –ø–æ–º–æ—â—å—é cairosvg
        cairosvg.svg2png(bytestring=svg_content.encode('utf-8'), write_to=png_path, output_width=400)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ PNG –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}")
        return f"/output/previews/{template_id}_preview.png"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG –ø—Ä–µ–≤—å—é: {str(e)}")
        return None

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PNG –ø—Ä–µ–≤—å—é
        preview_path = os.path.join(OUTPUT_DIR, 'previews', f"{template_id}_preview.png")
        
        if not os.path.exists(preview_path):
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º SVG –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            cursor.execute('SELECT svg_content FROM templates WHERE id = ?', [template_id])
            result = cursor.fetchone()
            
            if not result:
                conn.close()
                return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            svg_content = result[0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PNG –ø—Ä–µ–≤—å—é
            generate_png_preview(svg_content, template_id)
        
        conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∫ PNG –ø—Ä–µ–≤—å—é
        return jsonify({
            'preview_url': f'/output/previews/{template_id}_preview.png'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/delete', methods=['DELETE'])
def delete_template(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT name FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', [template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@app.route('/api/generate/single', methods=['POST'])
def generate_single():
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_filename = f"single_{str(uuid.uuid4())}.svg"
        output_path = os.path.join(OUTPUT_DIR, 'single', output_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π SVG
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        
        return jsonify({
            'success': True,
            'template_name': template_name,
            'output_url': f'/output/single/{output_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg_content = main_result
        photo_name, photo_svg_content = photo_result
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–ª–∞–π–¥–æ–≤
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Main —Å–ª–∞–π–¥ —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏...")
        main_replacements = replacements.copy()
        processed_main_svg = process_svg_font_perfect(main_svg_content, main_replacements)
        
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Photo —Å–ª–∞–π–¥ - —Ç–µ–ø–µ—Ä—å –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê!")
        print("   ‚úÖ Photo —à–∞–±–ª–æ–Ω —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç dyno.propertyimage2 –Ω–∞–ø—Ä—è–º—É—é")
        # –¢–µ–ø–µ—Ä—å –ù–ï –ù–£–ñ–ù–û –º–∞–ø–ø–∏–Ω–≥–∞ - photo —à–∞–±–ª–æ–Ω —Å–∞–º –∏—â–µ—Ç dyno.propertyimage2
        photo_replacements = replacements.copy()
        processed_photo_svg = process_svg_font_perfect(photo_svg_content, photo_replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SVG
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': f'/output/carousel/{main_filename}',
            'photo_url': f'/output/carousel/{photo_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º —à–∞–±–ª–æ–Ω–æ–≤
@app.route('/api/generate/carousel-by-name', methods=['POST'])
def generate_carousel_by_name():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤–º–µ—Å—Ç–æ ID
    """
    try:
        data = request.get_json()
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        replacements = data.get('replacements', {})
        
        if not main_template_name or not photo_template_name:
            return jsonify({'error': 'main_template_name –∏ photo_template_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        print(f"üîç –ò—â—É —à–∞–±–ª–æ–Ω—ã –ø–æ –∏–º–µ–Ω–∞–º:")
        print(f"   Main: {main_template_name}")
        print(f"   Photo: {photo_template_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∞–º
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ò—â–µ–º main —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [main_template_name])
        main_result = cursor.fetchone()
        
        if not main_result:
            conn.close()
            return jsonify({'error': f'Main —à–∞–±–ª–æ–Ω "{main_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ò—â–µ–º photo —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [photo_template_name])
        photo_result = cursor.fetchone()
        
        if not photo_result:
            conn.close()
            return jsonify({'error': f'Photo —à–∞–±–ª–æ–Ω "{photo_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        conn.close()
        
        main_id, main_name, main_svg = main_result
        photo_id, photo_name, photo_svg = photo_result
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã:")
        print(f"   Main: {main_name} (ID: {main_id})")
        print(f"   Photo: {photo_name} (ID: {photo_id})")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–ª–∞–π–¥–æ–≤
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Main —Å–ª–∞–π–¥ —Å –ü–û–õ–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏...")
        main_replacements = replacements.copy()
        processed_main_svg = process_svg_font_perfect(main_svg, main_replacements)
        
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Photo —Å–ª–∞–π–¥ - —Ç–µ–ø–µ—Ä—å –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê!")
        print("   ‚úÖ Photo —à–∞–±–ª–æ–Ω —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç dyno.propertyimage2 –Ω–∞–ø—Ä—è–º—É—é")
        # –¢–µ–ø–µ—Ä—å –ù–ï –ù–£–ñ–ù–û –º–∞–ø–ø–∏–Ω–≥–∞ - photo —à–∞–±–ª–æ–Ω —Å–∞–º –∏—â–µ—Ç dyno.propertyimage2
        photo_replacements = replacements.copy()
        processed_photo_svg = process_svg_font_perfect(photo_svg, photo_replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.join(OUTPUT_DIR, 'carousel'), exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        print(f"üéâ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_id,
            'photo_template_id': photo_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': f'/output/carousel/{main_filename}',
            'photo_url': f'/output/carousel/{photo_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

if __name__ == '__main__':
    ensure_db_exists()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(host='0.0.0.0', port=5000, debug=True)

