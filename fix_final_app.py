#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–∞–±–æ—á–∏–º Supabase
"""

import os
import sqlite3
import uuid
import re
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import requests
from supabase import create_client, Client

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
CORS(app)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (20MB)
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º service role –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_SERVICE_KEY = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')
SUPABASE_ANON_KEY = os.environ.get('SUPABASE_ANON_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å service role –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
supabase = None
if SUPABASE_URL and SUPABASE_SERVICE_KEY:
    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        print(f"‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å service role: {SUPABASE_URL}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
        supabase = None
else:
    print("‚ÑπÔ∏è Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)
os.makedirs('output/previews', exist_ok=True)

def upload_to_supabase_storage(file_content, filename, folder="carousel"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage"""
    
    if not supabase:
        print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = f"{folder}/{filename}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type
        if filename.lower().endswith('.svg'):
            file_data = file_content.encode('utf-8') if isinstance(file_content, str) else file_content
            content_type = "image/svg+xml"
        elif filename.lower().endswith('.jpg') or filename.lower().endswith('.jpeg'):
            file_data = file_content
            content_type = "image/jpeg"
        else:
            file_data = file_content.encode('utf-8') if isinstance(file_content, str) else file_content
            content_type = "application/octet-stream"
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤ Supabase: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ carousel-assets bucket
        result = supabase.storage.from_("carousel-assets").upload(
            path=file_path,
            file=file_data,
            file_options={"content-type": content_type}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = supabase.storage.from_("carousel-assets").get_public_url(file_path)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {public_url}")
        return public_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
        return None

def save_file_locally_or_supabase(content, filename, folder="carousel"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≤ Supabase"""
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å Supabase - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if supabase:
        return upload_to_supabase_storage(content, filename, folder)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        local_path = os.path.join(OUTPUT_DIR, folder, filename)
        os.makedirs(os.path.dirname(local_path), exist_ok=True)
        
        try:
            mode = 'wb' if isinstance(content, bytes) else 'w'
            encoding = None if isinstance(content, bytes) else 'utf-8'
            
            with open(local_path, mode, encoding=encoding) as f:
                f.write(content)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
            return f"/output/{folder}/{filename}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
            return None

@app.route('/api/health')
def health():
    return jsonify({
        "status": "ok", 
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "supabase_connected": supabase is not None,
        "supabase_url": SUPABASE_URL if SUPABASE_URL else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    })

@app.route('/api/test-upload', methods=['POST'])
def test_upload():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SVG
        test_svg = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
  <rect width="300" height="300" fill="purple"/>
  <text x="150" y="150" text-anchor="middle" fill="white" font-size="24">API TEST</text>
</svg>'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        test_filename = f"api_test_{uuid.uuid4().hex[:8]}.svg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        url = save_file_locally_or_supabase(test_svg, test_filename, "test")
        
        if url:
            return jsonify({
                'success': True,
                'message': '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
                'filename': test_filename,
                'url': url
            })
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'}), 500
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏"""
    
    try:
        data = request.get_json()
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ SVG —Ñ–∞–π–ª—ã
        main_svg = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
  <rect width="400" height="400" fill="blue"/>
  <text x="200" y="200" text-anchor="middle" fill="white" font-size="32">MAIN SLIDE</text>
</svg>'''
        
        photo_svg = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
  <rect width="400" height="400" fill="red"/>
  <text x="200" y="200" text-anchor="middle" fill="white" font-size="32">PHOTO SLIDE</text>
</svg>'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
        main_url = save_file_locally_or_supabase(main_svg, main_filename, "carousel")
        photo_url = save_file_locally_or_supabase(photo_svg, photo_filename, "carousel")
        
        if not main_url or not photo_url:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'}), 500
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'images': [main_url, photo_url],  # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ URL
            'slides': [main_url, photo_url],  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'main_url': main_url,
            'photo_url': photo_url,
            'status': 'completed',
            'slides_count': 2
        }
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç: {response_data}")
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üåê Supabase URL: {SUPABASE_URL}")
    print(f"üîë Service Key: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if SUPABASE_SERVICE_KEY else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Supabase –∫–ª–∏–µ–Ω—Ç: {'‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω' if supabase else '‚ùå –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}")
    
    app.run(debug=True, host='0.0.0.0', port=5000)