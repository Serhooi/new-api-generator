// üîó AGENTFLOW INTEGRATION - TypeScript –∫–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API

// ===== –¢–ò–ü–´ –î–ê–ù–ù–´–• =====

interface Template {
  id: string;
  name: string;
  category: string;
  template_role: 'main' | 'photo';
  created_at: string;
  preview_url: string;
  preview_api_url: string;
}

interface DynoReplacements {
  'dyno.agentName'?: string;
  'dyno.propertyAddress'?: string;
  'dyno.price'?: string;
  'dyno.bedrooms'?: string;
  'dyno.bathrooms'?: string;
  'dyno.sqft'?: string;
  'dyno.agentPhone'?: string;
  'dyno.agentEmail'?: string;
  'dyno.openHouseDate'?: string;
  'dyno.openHouseTime'?: string;
  'dyno.agentPhoto'?: string;
  'dyno.companyLogo'?: string;
  'dyno.propertyImage'?: string;
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
  'dyno.propertyimage2'?: string;
  'dyno.propertyimage3'?: string;
  'dyno.propertyimage4'?: string;
  'dyno.propertyimage5'?: string;
  'dyno.propertyimage6'?: string;
  'dyno.propertyimage7'?: string;
  'dyno.propertyimage8'?: string;
  'dyno.propertyimage9'?: string;
  'dyno.propertyimage10'?: string;
}

interface SlideRequest {
  templateId: string;
  replacements: DynoReplacements;
  imagePath: string;
}

interface CarouselRequest {
  name: string;
  slides: SlideRequest[];
}

interface SlideResponse {
  slide_number: number;
  status: 'pending' | 'generating' | 'completed' | 'error';
  image_url: string | null;
}

interface CarouselResponse {
  carousel_id: string;
  status: 'pending' | 'generating' | 'completed' | 'error';
  slides: SlideResponse[];
}

// ===== API –ö–õ–ò–ï–ù–¢ =====

class SVGTemplateAPI {
  private baseUrl: string;

  constructor(baseUrl: string = 'https://your-api.onrender.com') {
    this.baseUrl = baseUrl;
  }

  // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  async getTemplates(): Promise<Template[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/templates/all-previews`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.templates;
    } catch (error) {
      console.error('Error fetching templates:', error);
      throw error;
    }
  }

  // üé† –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥)
  async createAndGenerateCarousel(request: CarouselRequest): Promise<{ carousel_id: string }> {
    try {
      const response = await fetch(`${this.baseUrl}/api/carousel/create-and-generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return { carousel_id: data.carousel_id };
    } catch (error) {
      console.error('Error creating carousel:', error);
      throw error;
    }
  }

  // üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL
  async getCarouselStatus(carouselId: string): Promise<CarouselResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/carousel/${carouselId}/slides`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching carousel status:', error);
      throw error;
    }
  }

  // ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å polling
  async waitForCarouselCompletion(
    carouselId: string, 
    maxAttempts: number = 30,
    intervalMs: number = 2000
  ): Promise<CarouselResponse> {
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      const status = await this.getCarouselStatus(carouselId);
      
      if (status.status === 'completed') {
        return status;
      }
      
      if (status.status === 'error') {
        throw new Error('Carousel generation failed');
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, intervalMs));
    }
    
    throw new Error('Carousel generation timeout');
  }
}

// ===== REACT HOOK –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø API =====

import { useState, useCallback } from 'react';

interface UseCarouselGenerationResult {
  isLoading: boolean;
  error: string | null;
  carouselData: CarouselResponse | null;
  generateCarousel: (request: CarouselRequest) => Promise<void>;
  resetState: () => void;
}

export const useCarouselGeneration = (): UseCarouselGenerationResult => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [carouselData, setCarouselData] = useState<CarouselResponse | null>(null);

  const api = new SVGTemplateAPI();

  const generateCarousel = useCallback(async (request: CarouselRequest) => {
    setIsLoading(true);
    setError(null);
    setCarouselData(null);

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
      const { carousel_id } = await api.createAndGenerateCarousel(request);
      
      // 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const result = await api.waitForCarouselCompletion(carousel_id);
      
      setCarouselData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setIsLoading(false);
    }
  }, []);

  const resetState = useCallback(() => {
    setIsLoading(false);
    setError(null);
    setCarouselData(null);
  }, []);

  return {
    isLoading,
    error,
    carouselData,
    generateCarousel,
    resetState,
  };
};

// ===== –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–ú–ü–û–ù–ï–ù–¢–ï =====

export const CarouselGenerator: React.FC = () => {
  const { isLoading, error, carouselData, generateCarousel } = useCarouselGeneration();

  const handleGenerateCarousel = async () => {
    // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    const propertyPhotos = [
      "https://images.unsplash.com/photo-1560518883-ce09059eeffa", // –≠–∫—Å—Ç–µ—Ä—å–µ—Ä
      "https://images.unsplash.com/photo-1570129477492-45c003edd2be", // –ì–æ—Å—Ç–∏–Ω–∞—è
      "https://images.unsplash.com/photo-1586023492125-27b2c045efd7", // –ö—É—Ö–Ω—è
      "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2", // –°–ø–∞–ª—å–Ω—è
      "https://images.unsplash.com/photo-1560448075-bb485b067938", // –í–∞–Ω–Ω–∞—è
      "https://images.unsplash.com/photo-1560448204-61dc36dc98c8", // –°—Ç–æ–ª–æ–≤–∞—è
      "https://images.unsplash.com/photo-1560448075-cbc16bb4af8e", // –û—Ñ–∏—Å
      "https://images.unsplash.com/photo-1560448204-603b3fc33ddc", // –ó–∞–¥–Ω–∏–π –¥–≤–æ—Ä
      "https://images.unsplash.com/photo-1560448075-ad2991d8b6e0"  // –ì–∞—Ä–∞–∂
    ];

    const carouselRequest: CarouselRequest = {
      name: "Property Carousel for 123 Main St",
      slides: [
        // Main —Å–ª–∞–π–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        {
          templateId: "open-house-main",
          replacements: {
            'dyno.agentName': "John Smith",
            'dyno.propertyAddress': "123 Main Street, City, State 12345",
            'dyno.price': "$450,000",
            'dyno.bedrooms': "3",
            'dyno.bathrooms': "2",
            'dyno.sqft': "1,850",
            'dyno.agentPhone': "(555) 123-4567",
            'dyno.agentEmail': "john@realty.com",
            'dyno.openHouseDate': "Saturday, June 8th",
            'dyno.openHouseTime': "2:00 PM - 4:00 PM",
            'dyno.agentPhoto': "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d"
          },
          imagePath: propertyPhotos[0]
        },
        // –§–æ—Ç–æ —Å–ª–∞–π–¥—ã (–¥–æ 9 —à—Ç—É–∫)
        ...propertyPhotos.map((photoUrl, index) => ({
          templateId: "open-house-photo",
          replacements: {
            [`dyno.propertyimage${index + 2}`]: photoUrl
          } as DynoReplacements,
          imagePath: photoUrl
        }))
      ]
    };

    await generateCarousel(carouselRequest);
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—É—Å–µ–ª–∏</h2>
      
      <button
        onClick={handleGenerateCarousel}
        disabled={isLoading}
        className="bg-blue-500 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å'}
      </button>

      {error && (
        <div className="mt-4 p-4 bg-red-100 text-red-700 rounded">
          –û—à–∏–±–∫–∞: {error}
        </div>
      )}

      {carouselData && (
        <div className="mt-6">
          <h3 className="text-xl font-semibold mb-4">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {carouselData.slides.map((slide) => (
              <div key={slide.slide_number} className="border rounded p-4">
                <h4 className="font-medium">–°–ª–∞–π–¥ {slide.slide_number}</h4>
                <p className="text-sm text-gray-600">–°—Ç–∞—Ç—É—Å: {slide.status}</p>
                {slide.image_url && (
                  <img 
                    src={slide.image_url} 
                    alt={`Slide ${slide.slide_number}`}
                    className="mt-2 w-full h-32 object-cover rounded"
                  />
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å —Å main —Å–ª–∞–π–¥–æ–º + –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ —Å–ª–∞–π–¥–∞–º–∏
 */
export function createPropertyCarousel(
  propertyData: {
    name: string;
    agentName: string;
    propertyAddress: string;
    price: string;
    bedrooms: string;
    bathrooms: string;
    sqft: string;
    agentPhone: string;
    agentEmail: string;
    openHouseDate?: string;
    openHouseTime?: string;
    agentPhoto?: string;
  },
  propertyPhotos: string[], // –î–æ 9 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  mainTemplateId: string = "open-house-main",
  photoTemplateId: string = "open-house-photo"
): CarouselRequest {
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 9 —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º—É–º
  const limitedPhotos = propertyPhotos.slice(0, 9);
  
  const carouselRequest: CarouselRequest = {
    name: `Property Carousel for ${propertyData.propertyAddress}`,
    slides: [
      // Main —Å–ª–∞–π–¥
      {
        templateId: mainTemplateId,
        replacements: {
          'dyno.agentName': propertyData.agentName,
          'dyno.propertyAddress': propertyData.propertyAddress,
          'dyno.price': propertyData.price,
          'dyno.bedrooms': propertyData.bedrooms,
          'dyno.bathrooms': propertyData.bathrooms,
          'dyno.sqft': propertyData.sqft,
          'dyno.agentPhone': propertyData.agentPhone,
          'dyno.agentEmail': propertyData.agentEmail,
          'dyno.openHouseDate': propertyData.openHouseDate,
          'dyno.openHouseTime': propertyData.openHouseTime,
          'dyno.agentPhoto': propertyData.agentPhoto
        },
        imagePath: limitedPhotos[0] || ""
      },
      // –§–æ—Ç–æ —Å–ª–∞–π–¥—ã
      ...limitedPhotos.map((photoUrl, index) => ({
        templateId: photoTemplateId,
        replacements: {
          [`dyno.propertyimage${index + 2}`]: photoUrl
        } as DynoReplacements,
        imagePath: photoUrl
      }))
    ]
  };
  
  return carouselRequest;
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const EasyCarouselGenerator: React.FC = () => {
  const { isLoading, error, carouselData, generateCarousel } = useCarouselGeneration();

  const handleGenerateEasyCarousel = async () => {
    // –î–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    const propertyData = {
      name: "Beautiful Family Home",
      agentName: "John Smith",
      propertyAddress: "123 Main Street, Beverly Hills, CA 90210",
      price: "$450,000",
      bedrooms: "3",
      bathrooms: "2",
      sqft: "1,850",
      agentPhone: "(555) 123-4567",
      agentEmail: "john@realty.com",
      openHouseDate: "Saturday, June 8th",
      openHouseTime: "2:00 PM - 4:00 PM",
      agentPhoto: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d"
    };

    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–¥–æ 9 —à—Ç—É–∫)
    const propertyPhotos = [
      "https://images.unsplash.com/photo-1560518883-ce09059eeffa", // –≠–∫—Å—Ç–µ—Ä—å–µ—Ä
      "https://images.unsplash.com/photo-1570129477492-45c003edd2be", // –ì–æ—Å—Ç–∏–Ω–∞—è
      "https://images.unsplash.com/photo-1586023492125-27b2c045efd7", // –ö—É—Ö–Ω—è
      "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2", // –°–ø–∞–ª—å–Ω—è
      "https://images.unsplash.com/photo-1560448075-bb485b067938", // –í–∞–Ω–Ω–∞—è
    ];

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    const carouselRequest = createPropertyCarousel(propertyData, propertyPhotos);
    
    await generateCarousel(carouselRequest);
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">–ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—É—Å–µ–ª–∏</h2>
      
      <button
        onClick={handleGenerateEasyCarousel}
        disabled={isLoading}
        className="bg-green-500 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å...' : '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å (1 main + 5 —Ñ–æ—Ç–æ)'}
      </button>

      {error && (
        <div className="mt-4 p-4 bg-red-100 text-red-700 rounded">
          –û—à–∏–±–∫–∞: {error}
        </div>
      )}

      {carouselData && (
        <div className="mt-6">
          <h3 className="text-xl font-semibold mb-4">
            –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞! ({carouselData.slides.length} —Å–ª–∞–π–¥–æ–≤)
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {carouselData.slides.map((slide) => (
              <div key={slide.slide_number} className="border rounded p-4">
                <h4 className="font-medium">
                  {slide.slide_number === 1 ? 'Main —Å–ª–∞–π–¥' : `–§–æ—Ç–æ ${slide.slide_number - 1}`}
                </h4>
                <p className="text-sm text-gray-600">–°—Ç–∞—Ç—É—Å: {slide.status}</p>
                {slide.image_url && (
                  <img 
                    src={slide.image_url} 
                    alt={`Slide ${slide.slide_number}`}
                    className="mt-2 w-full h-32 object-cover rounded"
                  />
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –í–´–ë–û–†–ê –®–ê–ë–õ–û–ù–û–í –° –ü–†–ï–í–¨–Æ =====

export const TemplateSelector: React.FC<{
  onTemplateSelect: (template: Template) => void;
  selectedTemplate?: Template;
  templateRole?: 'main' | 'photo';
}> = ({ onTemplateSelect, selectedTemplate, templateRole }) => {
  const [templates, setTemplates] = useState<Template[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const api = new SVGTemplateAPI();

  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    try {
      setLoading(true);
      const allTemplates = await api.getTemplates();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      const filteredTemplates = templateRole 
        ? allTemplates.filter(t => t.template_role === templateRole)
        : allTemplates;
      
      setTemplates(filteredTemplates);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <span className="ml-2">–ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω—ã...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 bg-red-100 text-red-700 rounded">
        –û—à–∏–±–∫–∞: {error}
        <button 
          onClick={loadTemplates}
          className="ml-2 text-red-800 underline"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {templates.map((template) => (
        <div
          key={template.id}
          className={`border rounded-lg p-4 cursor-pointer transition-all hover:shadow-lg ${
            selectedTemplate?.id === template.id 
              ? 'border-blue-500 bg-blue-50' 
              : 'border-gray-200 hover:border-gray-300'
          }`}
          onClick={() => onTemplateSelect(template)}
        >
          {/* –ü—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ */}
          <div className="mb-3 bg-gray-100 rounded overflow-hidden">
            <img
              src={template.preview_url}
              alt={`–ü—Ä–µ–≤—å—é ${template.name}`}
              className="w-full h-32 object-cover"
              onError={(e) => {
                // Fallback –Ω–∞ API URL –µ—Å–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                const target = e.target as HTMLImageElement;
                if (target.src !== template.preview_api_url) {
                  target.src = template.preview_api_url;
                }
              }}
            />
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ */}
          <h3 className="font-semibold text-sm mb-1">{template.name}</h3>
          <div className="text-xs text-gray-600 space-y-1">
            <div>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.category}</div>
            <div>–†–æ–ª—å: {template.template_role}</div>
          </div>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ */}
          {selectedTemplate?.id === template.id && (
            <div className="mt-2 text-blue-600 text-sm font-medium">
              ‚úì –í—ã–±—Ä–∞–Ω
            </div>
          )}
        </div>
      ))}
      
      {templates.length === 0 && (
        <div className="col-span-full text-center py-8 text-gray-500">
          {templateRole 
            ? `–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å —Ä–æ–ª—å—é "${templateRole}"`
            : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤'
          }
        </div>
      )}
    </div>
  );
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–ê–†–£–°–ï–õ–ò –° –í–´–ë–û–†–û–ú –®–ê–ë–õ–û–ù–û–í =====

export const CarouselBuilder: React.FC = () => {
  const [mainTemplate, setMainTemplate] = useState<Template | undefined>();
  const [photoTemplate, setPhotoTemplate] = useState<Template | undefined>();
  const [propertyPhotos, setPropertyPhotos] = useState<string[]>(['']);
  const [propertyData, setPropertyData] = useState({
    agentName: '',
    propertyAddress: '',
    price: '',
    bedrooms: '',
    bathrooms: '',
    sqft: '',
    agentPhone: '',
    agentEmail: '',
    agentPhoto: ''
  });

  const { isLoading, error, carouselData, generateCarousel } = useCarouselGeneration();

  const addPhotoField = () => {
    if (propertyPhotos.length < 9) {
      setPropertyPhotos([...propertyPhotos, '']);
    }
  };

  const removePhotoField = (index: number) => {
    setPropertyPhotos(propertyPhotos.filter((_, i) => i !== index));
  };

  const updatePhoto = (index: number, url: string) => {
    const updated = [...propertyPhotos];
    updated[index] = url;
    setPropertyPhotos(updated);
  };

  const handleGenerateCarousel = async () => {
    if (!mainTemplate || !photoTemplate) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ (Main –∏ Photo)');
      return;
    }

    const validPhotos = propertyPhotos.filter(photo => photo.trim() !== '');
    
    if (validPhotos.length === 0) {
      alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é');
      return;
    }

    const carouselRequest = createPropertyCarousel(
      propertyData,
      validPhotos,
      mainTemplate.id,
      photoTemplate.id
    );

    await generateCarousel(carouselRequest);
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-8">
      <h1 className="text-3xl font-bold">–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
      
      {/* –í—ã–±–æ—Ä Main —à–∞–±–ª–æ–Ω–∞ */}
      <div>
        <h2 className="text-xl font-semibold mb-4">1. –í—ã–±–µ—Ä–∏—Ç–µ Main —à–∞–±–ª–æ–Ω</h2>
        <TemplateSelector
          templateRole="main"
          selectedTemplate={mainTemplate}
          onTemplateSelect={setMainTemplate}
        />
      </div>

      {/* –í—ã–±–æ—Ä Photo —à–∞–±–ª–æ–Ω–∞ */}
      <div>
        <h2 className="text-xl font-semibold mb-4">2. –í—ã–±–µ—Ä–∏—Ç–µ Photo —à–∞–±–ª–æ–Ω</h2>
        <TemplateSelector
          templateRole="photo"
          selectedTemplate={photoTemplate}
          onTemplateSelect={setPhotoTemplate}
        />
      </div>

      {/* –î–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */}
      <div>
        <h2 className="text-xl font-semibold mb-4">3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="–ò–º—è –∞–≥–µ–Ω—Ç–∞"
            value={propertyData.agentName}
            onChange={(e) => setPropertyData({...propertyData, agentName: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–ê–¥—Ä–µ—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
            value={propertyData.propertyAddress}
            onChange={(e) => setPropertyData({...propertyData, propertyAddress: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–¶–µ–Ω–∞"
            value={propertyData.price}
            onChange={(e) => setPropertyData({...propertyData, price: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–°–ø–∞–ª—å–Ω–∏"
            value={propertyData.bedrooms}
            onChange={(e) => setPropertyData({...propertyData, bedrooms: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–í–∞–Ω–Ω—ã–µ"
            value={propertyData.bathrooms}
            onChange={(e) => setPropertyData({...propertyData, bathrooms: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–ü–ª–æ—â–∞–¥—å (–∫–≤.—Ñ—Ç)"
            value={propertyData.sqft}
            onChange={(e) => setPropertyData({...propertyData, sqft: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω –∞–≥–µ–Ω—Ç–∞"
            value={propertyData.agentPhone}
            onChange={(e) => setPropertyData({...propertyData, agentPhone: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="Email –∞–≥–µ–Ω—Ç–∞"
            value={propertyData.agentEmail}
            onChange={(e) => setPropertyData({...propertyData, agentEmail: e.target.value})}
            className="border rounded px-3 py-2"
          />
          <input
            type="url"
            placeholder="–§–æ—Ç–æ –∞–≥–µ–Ω—Ç–∞ (URL)"
            value={propertyData.agentPhoto}
            onChange={(e) => setPropertyData({...propertyData, agentPhoto: e.target.value})}
            className="border rounded px-3 py-2"
          />
        </div>
      </div>

      {/* –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */}
      <div>
        <h2 className="text-xl font-semibold mb-4">4. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–¥–æ 9 —à—Ç—É–∫)</h2>
        <div className="space-y-2">
          {propertyPhotos.map((photo, index) => (
            <div key={index} className="flex gap-2">
              <input
                type="url"
                placeholder={`URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ${index + 1}`}
                value={photo}
                onChange={(e) => updatePhoto(index, e.target.value)}
                className="flex-1 border rounded px-3 py-2"
              />
              {propertyPhotos.length > 1 && (
                <button
                  onClick={() => removePhotoField(index)}
                  className="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600"
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              )}
            </div>
          ))}
          
          {propertyPhotos.length < 9 && (
            <button
              onClick={addPhotoField}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              + –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            </button>
          )}
        </div>
      </div>

      {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è */}
      <div>
        <button
          onClick={handleGenerateCarousel}
          disabled={isLoading || !mainTemplate || !photoTemplate}
          className="w-full py-3 bg-blue-500 text-white rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-600"
        >
          {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—É—Å–µ–ª—å...' : '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å'}
        </button>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="p-4 bg-red-100 text-red-700 rounded">
          –û—à–∏–±–∫–∞: {error}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {carouselData && (
        <div>
          <h2 className="text-xl font-semibold mb-4">–ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {carouselData.slides.map((slide) => (
              <div key={slide.slide_number} className="border rounded p-4">
                <h3 className="font-medium mb-2">
                  {slide.slide_number === 1 ? 'Main —Å–ª–∞–π–¥' : `–§–æ—Ç–æ ${slide.slide_number - 1}`}
                </h3>
                {slide.image_url && (
                  <img 
                    src={slide.image_url} 
                    alt={`Slide ${slide.slide_number}`}
                    className="w-full h-32 object-cover rounded"
                  />
                )}
                <p className="text-sm text-gray-600 mt-2">–°—Ç–∞—Ç—É—Å: {slide.status}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default CarouselGenerator;

