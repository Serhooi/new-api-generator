#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
"""

import requests
import json
import time

def test_api_with_images():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –∑–∞–º–µ–Ω–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("üß™ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ API")
    print("=" * 60)
    
    # URL –≤–∞—à–µ–≥–æ API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
    api_url = "http://localhost:5000/api/preview"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    test_data = {
        "template": "main",  # –∏–ª–∏ –ø—É—Ç—å –∫ SVG —Ñ–∞–π–ª—É
        "data": {
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            "dyno.date": "DECEMBER 15 2024",
            "dyno.time": "2:00 PM - 4:00 PM", 
            "dyno.price": "$850,000",
            "dyno.propertyaddress": "123 Main Street, Anytown",
            "dyno.bedrooms": "4",
            "dyno.bathrooms": "3",
            "dyno.name": "John Smith",
            "dyno.phone": "(555) 123-4567",
            "dyno.email": "john@example.com",
            "dyno.propertyfeatures": "Pool, Garden, Garage",
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —ç—Ç–æ –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å —Ç–µ—Å—Ç–∞!
            "dyno.propertyimage": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=800&h=600&fit=crop",
            "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=120&h=120&fit=crop&crop=face",
            "dyno.logo": "https://via.placeholder.com/142x56/4F46E5/FFFFFF?text=LOGO"
        },
        "preview_type": "base64"
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞: {api_url}")
    print(f"üìã –î–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç {len(test_data['data'])} –ø–æ–ª–µ–π")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_fields = [k for k in test_data['data'].keys() 
                   if any(word in k.lower() for word in ['image', 'photo', 'logo', 'headshot'])]
    print(f"üñºÔ∏è –ü–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_fields}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        response = requests.post(api_url, json=test_data, timeout=60)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(result.keys())}")
            
            if result.get('success'):
                print(f"üéâ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ base64 –¥–∞–Ω–Ω—ã—Ö
                if 'base64' in result:
                    base64_length = len(result['base64'])
                    print(f"üìä –†–∞–∑–º–µ—Ä base64: {base64_length} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if result['base64'].startswith('data:image/'):
                        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ–Ω–∞—Ö
                if 'replacements_count' in result:
                    print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω: {result['replacements_count']}")
                
                if 'has_data' in result:
                    print(f"üìù –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {result['has_data']}")
                
                print(f"\nüéØ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
                return True
                
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print(f"‚è∞ Timeout - API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 60 —Å–µ–∫—É–Ω–¥")
        return False
    except requests.exceptions.ConnectionError:
        print(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {api_url}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_server_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"""
    
    try:
        response = requests.get("http://localhost:5000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python3 app.py")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if test_server_status():
        print()
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        success = test_api_with_images()
        
        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API")
        else:
            print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    else:
        print("\nüîß –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä!")