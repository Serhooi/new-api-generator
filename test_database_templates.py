#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–∑ –±–∞–∑—ã
"""

import sqlite3
import subprocess
import os
import re

def get_templates_from_db():
    """–ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üóÑÔ∏è –ß–∏—Ç–∞—é —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    if not os.path.exists('templates.db'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö templates.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    try:
        conn = sqlite3.connect('templates.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        cursor.execute("SELECT id, name, svg_content FROM templates LIMIT 5")
        templates = cursor.fetchall()
        
        conn.close()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±–∞–∑–µ")
        
        for i, (template_id, name, svg_content) in enumerate(templates):
            print(f"  {i+1}. {template_id}: {name} ({len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return templates
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")
        return []

def smart_svg_cleaning(svg_content):
    """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ SVG"""
    
    cleaned = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
    cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
    
    # 3. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏
    def fix_image_tag(match):
        tag_content = match.group(1)
        if tag_content.endswith('/'):
            return match.group(0)
        return f'<image{tag_content}/>'
    
    cleaned = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned)
    
    # 4. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
    def fix_use_tag(match):
        tag_content = match.group(1)
        if tag_content.endswith('/'):
            return match.group(0)
        return f'<use{tag_content}/>'
    
    cleaned = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
    self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
    
    for tag in self_closing_tags:
        def fix_tag(match):
            tag_content = match.group(1)
            if tag_content.endswith('/'):
                return match.group(0)
            return f'<{tag}{tag_content}/>'
        
        cleaned = re.sub(f'<{tag}([^>]*?)>', fix_tag, cleaned)
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    
    return cleaned

def test_template_cleaning_and_png(template_id, name, svg_content):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∏ PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —à–∞–±–ª–æ–Ω: {name} ({template_id})")
    print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
    image_tags = len(re.findall(r'<image[^>]*>', svg_content))
    use_tags = len(re.findall(r'<use[^>]*>', svg_content))
    unclosed_image = len(re.findall(r'<image[^>]*[^/]>', svg_content))
    unclosed_use = len(re.findall(r'<use[^>]*[^/]>', svg_content))
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–≥–æ–≤:")
    print(f"  - image: {image_tags} (–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö: {unclosed_image})")
    print(f"  - use: {use_tags} (–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö: {unclosed_use})")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    print("üß† –ü—Ä–∏–º–µ–Ω—è—é —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
    cleaned_svg = smart_svg_cleaning(svg_content)
    
    print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å
    cleaned_image_tags = len(re.findall(r'<image[^>]*>', cleaned_svg))
    cleaned_use_tags = len(re.findall(r'<use[^>]*>', cleaned_svg))
    
    print(f"üîç –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
    print(f"  - image: {cleaned_image_tags}")
    print(f"  - use: {cleaned_use_tags}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π SVG
    cleaned_file = f"db_cleaned_{template_id}.svg"
    with open(cleaned_file, 'w') as f:
        f.write(cleaned_svg)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
    
    png_file = f"db_test_{template_id}.png"
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ rsvg-convert
        result = subprocess.run(
            ["rsvg-convert", "-w", "400"],
            input=cleaned_svg.encode("utf-8"),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=30
        )
        
        if result.returncode == 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
            with open(png_file, 'wb') as f:
                f.write(result.stdout)
            
            png_size = len(result.stdout)
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {png_file} ({png_size} –±–∞–π—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä PNG
            if png_size > 10000:  # –ë–æ–ª—å—à–µ 10KB = –≤–µ—Ä–æ—è—Ç–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                print("üéâ PNG –±–æ–ª—å—à–æ–π - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
                return True
            else:
                print("‚ö†Ô∏è PNG –º–∞–ª–µ–Ω—å–∫–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        else:
            print(f"‚ùå PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.stderr.decode()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã
    templates = get_templates_from_db()
    
    if not templates:
        print("‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
    for template_id, name, svg_content in templates:
        success = test_template_cleaning_and_png(template_id, name, svg_content)
        results[template_id] = {
            'name': name,
            'success': success
        }
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    successful = 0
    total = len(results)
    
    for template_id, result in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result['success'] else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"  {template_id}: {result['name']} - {status}")
        if result['success']:
            successful += 1
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {successful}/{total} —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if successful == total:
        print("üéâ –í–°–ï –®–ê–ë–õ–û–ù–´ –ò–ó –ë–ê–ó–´ –†–ê–ë–û–¢–ê–Æ–¢ –° –£–ú–ù–û–ô –û–ß–ò–°–¢–ö–û–ô!")
    elif successful > 0:
        print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    else:
        print("‚ùå –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()