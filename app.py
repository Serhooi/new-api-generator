#!/usr/bin/env python3
"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê PROPERTY IMAGE
===========================================================================

–í–µ—Ä—Å–∏—è 7.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–º–µ–Ω–æ–π property image
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io

app = Flask(__name__)
CORS(app, origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    id_pattern = r'id="(dyno\.[^"]*)"'
    id_matches = re.findall(id_pattern, svg_content)
    
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
    text_patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',
        r'\{(dyno\.[^}]+)\}'
    ]
    
    text_matches = []
    for pattern in text_patterns:
        text_matches.extend(re.findall(pattern, svg_content))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    all_fields = list(set(id_matches + text_matches))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
    field_types = {}
    for field in all_fields:
        if any(img_keyword in field.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot']):
            field_types[field] = 'image'
        else:
            field_types[field] = 'text'
    
    return {
        'fields': all_fields,
        'types': field_types,
        'count': len(all_fields),
        'has_dyno': len(all_fields) > 0
    }

def process_svg_ultimate_fixed(svg_content, replacements):
    """
    –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG:
    1. –ó–∞–º–µ–Ω—è–µ—Ç –í–°–ï pattern –¥–ª—è property image (pattern0_294_4 –ò pattern0_332_4)
    2. –ü–û–õ–ù–û–°–¢–¨–Æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —à—Ä–∏—Ñ—Ç—ã –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç–µ–∫—Å—Ç–∞
    """
    processed_svg = svg_content
    
    print("üîß –ù–∞—á–∏–Ω–∞—é –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É SVG...")
    
    for field, value in replacements.items():
        if field.startswith('dyno.'):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            safe_value = str(value).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è
            is_image = any(img_keyword in field.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot'])
            
            if is_image:
                print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {field}")
                
                # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø PROPERTY IMAGE
                if 'propertyimage' in field.lower():
                    print("   üéØ –≠—Ç–æ property image - –∑–∞–º–µ–Ω—è—é –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ patterns")
                    
                    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö pattern ID –¥–ª—è property image
                    property_patterns = ['pattern0_294_4', 'pattern0_332_4', 'pattern0_294_5', 'pattern0_332_5']
                    
                    for pattern_id in property_patterns:
                        pattern_replacement = f'''<pattern id="{pattern_id}" patternContentUnits="objectBoundingBox" width="1" height="1">
<image href="{safe_value}" x="0" y="0" width="1" height="1" preserveAspectRatio="xMidYMid slice"/>
</pattern>'''
                        
                        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —ç—Ç–æ—Ç pattern –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        old_pattern_regex = f'<pattern id="{pattern_id}"[^>]*>.*?</pattern>'
                        if re.search(old_pattern_regex, processed_svg, flags=re.DOTALL):
                            processed_svg = re.sub(old_pattern_regex, pattern_replacement, processed_svg, flags=re.DOTALL)
                            print(f"   ‚úÖ Property image –∑–∞–º–µ–Ω–µ–Ω –≤ {pattern_id}!")
                
                # –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (logo, headshot)
                else:
                    # –ò—â–µ–º rect —Å —ç—Ç–∏–º id –∏ –ø–æ–ª—É—á–∞–µ–º pattern id
                    rect_pattern = f'<rect[^>]*id="{field}"[^>]*fill="url\\(#([^)]+)\\)"'
                    rect_match = re.search(rect_pattern, processed_svg)
                    
                    if rect_match:
                        pattern_id = rect_match.group(1)
                        print(f"   –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                        
                        # –ó–∞–º–µ–Ω—è–µ–º pattern
                        pattern_replacement = f'''<pattern id="{pattern_id}" patternContentUnits="objectBoundingBox" width="1" height="1">
<image href="{safe_value}" x="0" y="0" width="1" height="1" preserveAspectRatio="xMidYMid slice"/>
</pattern>'''
                        
                        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π pattern
                        old_pattern_regex = f'<pattern id="{pattern_id}"[^>]*>.*?</pattern>'
                        processed_svg = re.sub(old_pattern_regex, pattern_replacement, processed_svg, flags=re.DOTALL)
                        print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω pattern {pattern_id}")
                    else:
                        print(f"   ‚ö†Ô∏è Pattern –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {field}")
                
            else:
                # –î–õ–Ø –¢–ï–ö–°–¢–ê - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–°–¢–û–†–û–ñ–ù–ê–Ø –∑–∞–º–µ–Ω–∞ —Å –ü–û–õ–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
                print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: {field}")
                
                # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º id
                text_pattern = f'<text[^>]*id="{field}"[^>]*>'
                text_match = re.search(text_pattern, processed_svg)
                
                if text_match:
                    text_element_start = text_match.end()
                    
                    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π tspan –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ text —ç–ª–µ–º–µ–Ω—Ç–∞
                    tspan_pattern = r'<tspan[^>]*>([^<]*)</tspan>'
                    tspan_match = re.search(tspan_pattern, processed_svg[text_element_start:])
                    
                    if tspan_match:
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø–æ–ª–Ω–æ–º SVG
                        tspan_content_start = text_element_start + tspan_match.start(1)
                        tspan_content_end = text_element_start + tspan_match.end(1)
                        
                        # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tspan, –ù–ï –¢–†–û–ì–ê–Ø –∞—Ç—Ä–∏–±—É—Ç—ã
                        old_content = processed_svg[tspan_content_start:tspan_content_end]
                        processed_svg = processed_svg[:tspan_content_start] + safe_value + processed_svg[tspan_content_end:]
                        print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: '{old_content}' ‚Üí '{safe_value}' (–í–°–ï –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω tspan –≤ text —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è {field}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω text —ç–ª–µ–º–µ–Ω—Ç —Å id {field}")
    
    print("‚úÖ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return processed_svg

def ensure_db_exists():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS templates (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                template_role TEXT DEFAULT 'main',
                svg_content TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                has_dyno_fields BOOLEAN DEFAULT FALSE,
                dyno_fields_info TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS carousels (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                main_template_id TEXT,
                photo_template_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (main_template_id) REFERENCES templates (id),
                FOREIGN KEY (photo_template_id) REFERENCES templates (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, category, template_role, has_dyno_fields, dyno_fields_info, created_at
            FROM templates 
            ORDER BY created_at DESC
        ''')
        
        templates = []
        for row in cursor.fetchall():
            templates.append({
                'id': row[0],
                'name': row[1],
                'category': row[2],
                'template_role': row[3],
                'has_dyno_fields': bool(row[4]),
                'dyno_fields_info': row[5],
                'created_at': row[6],
                'preview_url': f'/api/templates/{row[0]}/preview'
            })
        
        conn.close()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", 500

@app.route('/upload')
def upload_page():
    try:
        ensure_db_exists()
        return render_template('upload.html')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

# –†–æ—É—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
@app.route('/upload-single', methods=['POST'])
def upload_single_template():
    try:
        ensure_db_exists()
        
        if 'template' not in request.files:
            return jsonify({'error': '–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['template']
        name = request.form.get('name', 'Unnamed Template')
        category = request.form.get('category', 'other')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dyno –ø–æ–ª—è
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_info = extract_dyno_fields_simple(svg_content) if has_dyno else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        template_id = str(uuid.uuid4())
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, 'main', svg_content, has_dyno, str(dyno_info) if dyno_info else None])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'template_id': template_id,
            'has_dyno': has_dyno,
            'dyno_fields': dyno_info.get('fields', []) if dyno_info else [],
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

@app.route('/upload-carousel', methods=['POST'])
def upload_carousel_templates():
    try:
        ensure_db_exists()
        
        if 'main_template' not in request.files or 'photo_template' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main_template –∏ photo_template'}), 400
        
        main_file = request.files['main_template']
        photo_file = request.files['photo_template']
        name = request.form.get('name', 'Unnamed Carousel')
        category = request.form.get('category', 'other')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG —Ñ–∞–π–ª–æ–≤
        main_svg_content = main_file.read().decode('utf-8')
        photo_svg_content = photo_file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dyno –ø–æ–ª—è –≤ –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö
        main_has_dyno = has_dyno_fields_simple(main_svg_content)
        photo_has_dyno = has_dyno_fields_simple(photo_svg_content)
        
        main_dyno_info = extract_dyno_fields_simple(main_svg_content) if main_has_dyno else None
        photo_dyno_info = extract_dyno_fields_simple(photo_svg_content) if photo_has_dyno else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main —à–∞–±–ª–æ–Ω
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, 'main', main_svg_content, main_has_dyno, str(main_dyno_info) if main_dyno_info else None])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo —à–∞–±–ª–æ–Ω
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, 'photo', photo_svg_content, photo_has_dyno, str(photo_dyno_info) if photo_dyno_info else None])
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API —Ä–æ—É—Ç—ã
@app.route('/api/health')
def health():
    return jsonify({"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/api/templates/all-previews')
def get_all_templates():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4],
                'preview_url': f'/api/templates/{template[0]}/preview'
            })
        
        return jsonify({
            'templates': templates,
            'total': len(templates)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', (template_id,))
        result = cursor.fetchone()
        
        conn.close()
        
        if result:
            svg_content = result[0]
            # –ö–æ–¥–∏—Ä—É–µ–º SVG –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            svg_base64 = base64.b64encode(svg_content.encode('utf-8')).decode('utf-8')
            
            return jsonify({
                'preview_base64': f'data:image/svg+xml;base64,{svg_base64}'
            })
        else:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/<template_id>/delete', methods=['DELETE'])
def delete_template(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT name FROM templates WHERE id = ?', (template_id,))
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', (template_id,))
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏
        cursor.execute('DELETE FROM carousels WHERE main_template_id = ? OR photo_template_id = ?', (template_id, template_id))
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}), 500

@app.route('/api/image/generate', methods=['POST'])
def generate_single_image():
    try:
        data = request.get_json()
        
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        
        if not template_id:
            return jsonify({'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è template_id'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', (template_id,))
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Ñ—É–Ω–∫—Ü–∏–µ–π
        processed_svg = process_svg_ultimate_fixed(svg_content, replacements)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_filename = f'single_{template_id}_{uuid.uuid4().hex[:8]}.svg'
        output_path = f'{OUTPUT_DIR}/single/{output_filename}'
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        
        return jsonify({
            'success': True,
            'template_name': template_name,
            'image_url': f'/output/single/{output_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/carousel/create-and-generate', methods=['POST'])
def create_and_generate_carousel():
    try:
        data = request.get_json()
        
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': '–¢—Ä–µ–±—É—é—Ç—Å—è main_template_id –∏ photo_template_id'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
        os.makedirs(f'{OUTPUT_DIR}/carousel', exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # Main template
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', (main_template_id,))
        main_result = cursor.fetchone()
        
        # Photo template
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', (photo_template_id,))
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg = main_result
        photo_name, photo_svg = photo_result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Ñ—É–Ω–∫—Ü–∏–µ–π
        print("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é main template...")
        pro        processed_main = process_svg_ultimate_fixed(main_svg, replacements)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º photo template
        processed_photo = process_svg_ultimate_fixed(photo_svg, replacements)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        main_filename = f'carousel_{carousel_id}_main.svg'
        photo_filename = f'carousel_{carousel_id}_photo.svg'
        
        main_path = f'{OUTPUT_DIR}/carousel/{main_filename}'
        photo_path = f'{OUTPUT_DIR}/carousel/{photo_filename}'
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            'carousel_id': carousel_id,
            'replacements_applied': len(replacements),
            'images': [
                {
                    'type': 'main',
                    'template_name': main_name,
                    'url': f'/output/carousel/{main_filename}',
                    'format': 'svg'
                },
                {
                    'type': 'photo',
                    'template_name': photo_name,
                    'url': f'/output/carousel/{photo_filename}',
                    'format': 'svg'
                }
            ]
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/carousels')
def get_all_carousels():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c.id, c.name, c.created_at, 
                   mt.name as main_template_name, pt.name as photo_template_name
            FROM carousels c
            LEFT JOIN templates mt ON c.main_template_id = mt.id
            LEFT JOIN templates pt ON c.photo_template_id = pt.id
            ORDER BY c.created_at DESC
        ''')
        
        carousels = []
        for row in cursor.fetchall():
            carousels.append({
                'id': row[0],
                'name': row[1],
                'created_at': row[2],
                'main_template_name': row[3],
                'photo_template_name': row[4]
            })
        
        conn.close()
        
        return jsonify({
            'carousels': carousels,
            'total': len(carousels)
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

if __name__ == '__main__':
    ensure_db_exists()
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

