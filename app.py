#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –° –ü–†–û–î–í–ò–ù–£–¢–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô DYNO –ü–û–õ–ï–ô
===================================================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π SVG –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–º–µ–Ω—ã dyno –ø–æ–ª–µ–π
"""

import os
import sqlite3
import uuid
import json
import time
import threading
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory, render_template, redirect, url_for, flash
from flask_cors import CORS
import cairosvg
from PIL import Image, ImageDraw, ImageFont
import io
import base64
import requests
import tempfile
import re
from urllib.parse import urlparse

app = Flask(__name__, template_folder='templates')
app.secret_key = 'your-secret-key-here-change-in-production'

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS(app, 
     origins=['*'],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     allow_headers=['Content-Type', 'Accept', 'Authorization', 'X-Requested-With'],
     methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
     supports_credentials=True
)

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
os.makedirs('output', exist_ok=True)
os.makedirs('uploads', exist_ok=True)

# ============= –ü–†–û–î–í–ò–ù–£–¢–´–ô SVG –ü–†–û–¶–ï–°–°–û–† =============

def download_image(url, max_size=(800, 600)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL —Å —Ä–µ—Å–∞–π–∑–æ–º"""
    try:
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(url, timeout=10, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        response.raise_for_status()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(io.BytesIO(response.content))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
            img = background
        
        # –†–µ—Å–∞–π–∑–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.size[0] > max_size[0] or img.size[1] > max_size[1]:
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        img_data = buffer.getvalue()
        img_base64 = base64.b64encode(img_data).decode('utf-8')
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {img.size}")
        return f"data:image/jpeg;base64,{img_base64}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def wrap_text(text, max_length=30):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if len(text) <= max_length:
        return text
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
    words = text.split()
    if len(words) <= 1:
        return text
    
    lines = []
    current_line = []
    current_length = 0
    
    for word in words:
        if current_length + len(word) + len(current_line) <= max_length:
            current_line.append(word)
            current_length += len(word)
        else:
            if current_line:
                lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
            else:
                lines.append(word)
    
    if current_line:
        lines.append(' '.join(current_line))
    
    return '\n'.join(lines)

def process_svg_with_advanced_replacement(svg_content, replacements):
    """–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –∑–∞–º–µ–Ω–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    result = svg_content
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é SVG —à–∞–±–ª–æ–Ω —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞–º–µ–Ω–æ–π...")
    print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–º–µ–Ω: {len(replacements)}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—ã
    for key, value in replacements.items():
        # –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç dyno. –ø—Ä–µ—Ñ–∏–∫—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_key = key.replace('dyno.', '') if key.startswith('dyno.') else key
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ SVG
        patterns = [
            f"{{{{dyno.{clean_key}}}}}",  # {{dyno.field}}
            f"{{{{{key}}}}}",             # {{dyno.field}} –∏–ª–∏ {{field}}
            f"{{{{dyno.{key}}}}}",        # {{dyno.dyno.field}} (–¥–≤–æ–π–Ω–æ–π –ø—Ä–µ—Ñ–∏–∫—Å)
            f"{{{{{clean_key}}}}}",       # {{field}}
            f"dyno.{clean_key}",          # dyno.field (–±–µ–∑ —Å–∫–æ–±–æ–∫)
            f"{key}",                     # –ø—Ä—è–º–æ–µ –∏–º—è –ø–æ–ª—è
        ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if any(img_keyword in clean_key.lower() for img_keyword in ['image', 'photo', 'picture', 'img']):
            if isinstance(value, str) and (value.startswith('http') or value.startswith('https')):
                print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {clean_key}")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_data = download_image(value)
                if image_data:
                    # –ó–∞–º–µ–Ω—è–µ–º –≤ SVG
                    for pattern in patterns:
                        if pattern in result:
                            # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                            result = result.replace(pattern, image_data)
                            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {clean_key}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º placeholder
                    for pattern in patterns:
                        result = result.replace(pattern, f"[Image: {clean_key}]")
            else:
                # –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for pattern in patterns:
                    result = result.replace(pattern, str(value))
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            processed_value = str(value)
            if 'address' in clean_key.lower() and len(processed_value) > 30:
                processed_value = wrap_text(processed_value, 25)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            replaced_count = 0
            for pattern in patterns:
                if pattern in result:
                    result = result.replace(pattern, processed_value)
                    replaced_count += 1
            
            if replaced_count > 0:
                print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ: {clean_key} = {processed_value[:50]}... ({replaced_count} —Ä–∞–∑)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    remaining_vars = re.findall(r'\{\{[^}]+\}\}', result)
    if remaining_vars:
        print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {remaining_vars}")
        # –ó–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        for var in remaining_vars:
            result = result.replace(var, "")
    
    print("‚úÖ SVG –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return result

def generate_png_from_svg_advanced(svg_content):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG –∏–∑ SVG"""
    try:
        print("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é PNG –∏–∑ SVG...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CairoSVG
        try:
            png_data = cairosvg.svg2png(bytestring=svg_content.encode('utf-8'))
            print("‚úÖ PNG —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ CairoSVG")
            return png_data
        except Exception as cairo_error:
            print(f"‚ö†Ô∏è CairoSVG –æ—à–∏–±–∫–∞: {cairo_error}")
            
            # Fallback —á–µ—Ä–µ–∑ Pillow
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é Pillow fallback...")
            img = Image.new('RGB', (1080, 1350), color='white')
            draw = ImageDraw.Draw(img)
            
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ SVG –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text_matches = re.findall(r'<text[^>]*>([^<]+)</text>', svg_content)
            y_pos = 100
            for text in text_matches[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫
                draw.text((50, y_pos), text, font=font, fill='black')
                y_pos += 40
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG bytes
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            print("‚úÖ PNG —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Pillow fallback")
            return img_bytes.getvalue()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        img = Image.new('RGB', (800, 600), color='white')
        draw = ImageDraw.Draw(img)
        draw.text((50, 50), f"Error: {str(e)}", fill='red')
        
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='PNG')
        return img_bytes.getvalue()

# ============= –ë–ê–ó–ê –î–ê–ù–ù–´–• =============

def ensure_db_exists():
    """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    try:
        conn = sqlite3.connect('templates.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã templates
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='templates'
        """)
        
        if not cursor.fetchone():
            print("–¢–∞–±–ª–∏—Ü–∞ templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE templates (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    category TEXT NOT NULL,
                    template_role TEXT NOT NULL,
                    svg_content TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE carousels (
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE slides (
                    id TEXT PRIMARY KEY,
                    carousel_id TEXT NOT NULL,
                    template_id TEXT NOT NULL,
                    slide_number INTEGER NOT NULL,
                    replacements TEXT,
                    image_path TEXT,
                    image_url TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (carousel_id) REFERENCES carousels (id),
                    FOREIGN KEY (template_id) REFERENCES templates (id)
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –° DYNO –ü–û–õ–Ø–ú–ò
            add_initial_templates_with_dyno_fields(cursor)
            print("–ù–∞—á–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å dyno –ø–æ–ª—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            conn.commit()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        return False

def add_initial_templates_with_dyno_fields(cursor):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò DYNO –ü–û–õ–Ø–ú–ò"""
    initial_templates = [
        {
            'id': 'open-house-main-dyno',
            'name': 'Open House - Main (with dyno)',
            'category': 'open-house',
            'template_role': 'main',
            'svg_content': '''<svg width="1080" height="1350" xmlns="http://www.w3.org/2000/svg">
                <rect width="1080" height="1350" fill="#f8f9fa"/>
                <text x="540" y="150" text-anchor="middle" font-family="Arial" font-size="72" font-weight="bold" fill="#2d3748">OPEN HOUSE</text>
                <text x="540" y="250" text-anchor="middle" font-family="Arial" font-size="36" fill="#4a5568">{{dyno.agentName}}</text>
                <text x="540" y="320" text-anchor="middle" font-family="Arial" font-size="28" fill="#718096">{{dyno.propertyAddress}}</text>
                <text x="540" y="400" text-anchor="middle" font-family="Arial" font-size="32" font-weight="bold" fill="#2d3748">{{dyno.price}}</text>
                <text x="270" y="500" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.bedrooms}} bed</text>
                <text x="540" y="500" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.bathrooms}} bath</text>
                <text x="810" y="500" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.sqft}} sqft</text>
                <text x="540" y="600" text-anchor="middle" font-family="Arial" font-size="28" fill="#2d3748">{{dyno.openHouseDate}}</text>
                <text x="540" y="650" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.openHouseTime}}</text>
                <text x="540" y="750" text-anchor="middle" font-family="Arial" font-size="20" fill="#718096">{{dyno.agentPhone}}</text>
                <text x="540" y="800" text-anchor="middle" font-family="Arial" font-size="18" fill="#718096">{{dyno.agentEmail}}</text>
                <rect x="90" y="900" width="900" height="400" fill="#e2e8f0" stroke="#cbd5e0" stroke-width="2"/>
                <text x="540" y="1120" text-anchor="middle" font-family="Arial" font-size="24" fill="#a0aec0">{{dyno.propertyImage}}</text>
            </svg>'''
        },
        {
            'id': 'open-house-photo-dyno',
            'name': 'Open House - Photo (with dyno)',
            'category': 'open-house',
            'template_role': 'photo',
            'svg_content': '''<svg width="1080" height="1350" xmlns="http://www.w3.org/2000/svg">
                <rect width="1080" height="1350" fill="#f8f9fa"/>
                <rect x="90" y="90" width="900" height="600" fill="#e2e8f0" stroke="#cbd5e0" stroke-width="2"/>
                <text x="540" y="410" text-anchor="middle" font-family="Arial" font-size="24" fill="#a0aec0">{{dyno.propertyImage}}</text>
                <text x="540" y="800" text-anchor="middle" font-family="Arial" font-size="48" font-weight="bold" fill="#2d3748">{{dyno.price}}</text>
                <text x="540" y="870" text-anchor="middle" font-family="Arial" font-size="28" fill="#4a5568">{{dyno.propertyAddress}}</text>
                <text x="270" y="950" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.bedrooms}} bed</text>
                <text x="540" y="950" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.bathrooms}} bath</text>
                <text x="810" y="950" text-anchor="middle" font-family="Arial" font-size="24" fill="#4a5568">{{dyno.sqft}} sqft</text>
                <text x="540" y="1100" text-anchor="middle" font-family="Arial" font-size="32" fill="#2d3748">{{dyno.agentName}}</text>
                <text x="540" y="1150" text-anchor="middle" font-family="Arial" font-size="20" fill="#718096">{{dyno.agentPhone}}</text>
                <text x="540" y="1200" text-anchor="middle" font-family="Arial" font-size="18" fill="#718096">{{dyno.agentEmail}}</text>
            </svg>'''
        }
    ]
    
    for template in initial_templates:
        cursor.execute('''
            INSERT OR REPLACE INTO templates (id, name, category, template_role, svg_content)
            VALUES (?, ?, ?, ?, ?)
        ''', (template['id'], template['name'], template['category'], 
              template['template_role'], template['svg_content']))

# ============= –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î API =============
# (–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ DATABASE_FIXED_app.py, –Ω–æ —Å –∑–∞–º–µ–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG)

# OPTIONS –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è CORS
@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({'status': 'ok'})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "*")
        response.headers.add('Access-Control-Allow-Methods', "*")
        return response

# –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    return response

# ============= –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–° =============

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        ensure_db_exists()
        return render_template('index.html')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}", 500

@app.route('/templates')
def templates_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
    try:
        if not ensure_db_exists():
            return "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 500
        
        conn = sqlite3.connect('templates.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM templates ORDER BY created_at DESC')
        templates = cursor.fetchall()
        conn.close()
        
        return render_template('templates.html', templates=templates)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", 500

@app.route('/upload')
def upload_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        ensure_db_exists()
        return render_template('upload.html')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}", 500

# ============= API ENDPOINTS =============

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    try:
        db_status = "healthy" if ensure_db_exists() else "error"
        return jsonify({
            'status': 'healthy',
            'database': db_status,
            'version': '3.0-advanced-dyno',
            'features': [
                'Template management',
                'Carousel creation',
                'Single image generation',
                'Advanced dyno field replacement',
                'Image URL processing',
                'Text wrapping',
                'CORS support',
                'File serving',
                'Database integration',
                'Auto DB initialization'
            ]
        })
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/templates/all-previews')
def get_all_templates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø—Ä–µ–≤—å—é"""
    try:
        if not ensure_db_exists():
            return jsonify({'error': 'Database initialization failed'}), 500
        
        conn = sqlite3.connect('templates.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM templates ORDER BY category, template_role, name')
        templates = cursor.fetchall()
        conn.close()
        
        template_list = []
        for template in templates:
            template_list.append({
                'id': template['id'],
                'name': template['name'],
                'category': template['category'],
                'templateRole': template['template_role'],
                'previewUrl': f'/api/templates/{template["id"]}/preview',
                'createdAt': template['created_at']
            })
        
        return jsonify(template_list)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# SINGLE IMAGE GENERATION –° –ü–†–û–î–í–ò–ù–£–¢–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô
@app.route('/api/image/generate', methods=['POST'])
def generate_single_image():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ –° –ü–†–û–î–í–ò–ù–£–¢–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô DYNO –ü–û–õ–ï–ô"""
    try:
        if not ensure_db_exists():
            return jsonify({'error': 'Database initialization failed'}), 500
        
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
        
        template_id = data.get('templateId')
        replacements = data.get('data', {})
        
        if not template_id:
            return jsonify({'error': 'templateId is required'}), 400
        
        print(f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {template_id}")
        print(f"üìù –ó–∞–º–µ–Ω—ã: {replacements}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('templates.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM templates WHERE id = ?', (template_id,))
        template = cursor.fetchone()
        conn.close()
        
        if not template:
            return jsonify({'error': 'Template not found'}), 404
        
        # –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG
        svg_content = template['svg_content']
        processed_svg = process_svg_with_advanced_replacement(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_dir = os.path.join('output', 'single')
        os.makedirs(image_dir, exist_ok=True)
        
        # –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG
        png_data = generate_png_from_svg_advanced(processed_svg)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f'{image_id}.png'
        filepath = os.path.join(image_dir, filename)
        
        with open(filepath, 'wb') as f:
            f.write(png_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = f'/output/single/{filename}'
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {image_url}")
        
        return jsonify({
            'imageId': image_id,
            'imageUrl': image_url,
            'templateId': template_id,
            'status': 'completed',
            'createdAt': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/output/<path:filename>')
def serve_output(filename):
    """–û—Ç–¥–∞—á–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        response = send_from_directory('output', filename)
        response.headers['Access-Control-Allow-Origin'] = '*'
        return response
    except Exception as e:
        return jsonify({'error': str(e)}), 404

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π dyno –ø–æ–ª–µ–π...")
    ensure_db_exists()
    
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

