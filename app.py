"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –®–†–ò–§–¢–û–í –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –•–ï–î–®–û–¢–û–í
================================================================

–í–µ—Ä—Å–∏—è 11.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤ Montserrat, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io
import html
import cairosvg
from PIL import Image

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–≤—å—é
from preview_system import generate_svg_preview, create_preview_with_data, cleanup_old_previews

app = Flask(__name__)
CORS(app, origins="*")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (20MB)
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)
os.makedirs('output/previews', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    fields = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ dyno –ø–æ–ª–µ–π
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è &
    """
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML/SVG
    text = str(text)
    text = text.replace('&', '&amp;')  # –í–ê–ñ–ù–û: & –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def generate_svg_preview(svg_content, template_id, width=400, height=300):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –ø—Ä–µ–≤—å—é –∏–∑ SVG —à–∞–±–ª–æ–Ω–∞
    """
    try:
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {template_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        preview_dir = os.path.join(OUTPUT_DIR, 'previews')
        os.makedirs(preview_dir, exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PNG –ø—Ä–µ–≤—å—é
        png_filename = f"{template_id}_preview.png"
        png_path = os.path.join(preview_dir, png_filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é SVG —Å –∑–∞–º–µ–Ω–æ–π dyno –ø–æ–ª–µ–π –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
        preview_svg = create_preview_svg(svg_content)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=preview_svg.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
        with open(png_path, 'wb') as f:
            f.write(png_data)
        
        print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {png_filename}")
        
        return {
            'success': True,
            'filename': png_filename,
            'url': f'/output/previews/{png_filename}',
            'path': png_path
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}")
        return {
            'success': False,
            'error': str(e)
        }

def create_preview_svg(svg_content):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é SVG –∑–∞–º–µ–Ω—è—è dyno –ø–æ–ª—è –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    """
    preview_svg = svg_content
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–≤—å—é
    preview_data = {
        'dyno.agentName': 'John Smith',
        'dyno.propertyAddress': '123 Main Street, Beverly Hills, CA 90210',
        'dyno.price': '$450,000',
        'dyno.bedrooms': '3',
        'dyno.bathrooms': '2',
        'dyno.sqft': '1,850',
        'dyno.agentPhone': '(555) 123-4567',
        'dyno.agentEmail': 'john@realty.com',
        'dyno.openHouseDate': 'Saturday, June 8th',
        'dyno.openHouseTime': '2:00 PM - 4:00 PM',
        'dyno.agentPhoto': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
        'dyno.propertyImage': 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop',
        'dyno.propertyimage2': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300&fit=crop',
        'dyno.propertyimage3': 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=400&h=300&fit=crop',
        'dyno.propertyimage4': 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=400&h=300&fit=crop',
        'dyno.propertyimage5': 'https://images.unsplash.com/photo-1560448075-bb485b067938?w=400&h=300&fit=crop',
        'dyno.companyLogo': 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=100&fit=crop'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª—è –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
    for field, value in preview_data.items():
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã dyno –ø–æ–ª–µ–π
        patterns = [
            f'{{{{{field}}}}}',           # {{dyno.field}}
            f'{{{field}}}',               # {dyno.field}
            f'>{field}<',                 # >dyno.field<
        ]
        
        for pattern in patterns:
            if pattern.startswith('>') and pattern.endswith('<'):
                preview_svg = preview_svg.replace(pattern, f'>{value}<')
            else:
                preview_svg = preview_svg.replace(pattern, value)
    
    return preview_svg

def process_svg_font_perfect(svg_content, replacements):
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π vs –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π aspect ratio –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ use —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ pattern –±–ª–æ–∫–∞—Ö
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ Inter –∏ Montserrat
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    - –ü–û–õ–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è URL –∏ —Ç–µ–∫—Å—Ç–æ–≤
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
    """
    print("üé® –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤)")
    
    processed_svg = svg_content
    
    def determine_element_shape(svg_content, pattern_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)"""
        
        # –ò—â–µ–º clipPath —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å pattern
        clip_pattern = f'<clipPath[^>]*id="[^"]*{re.escape(pattern_id)}[^"]*"[^>]*>(.*?)</clipPath>'
        clip_match = re.search(clip_pattern, svg_content, re.DOTALL)
        
        if clip_match:
            clip_content = clip_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ circle –∏–ª–∏ ellipse
            if '<circle' in clip_content or '<ellipse' in clip_content:
                return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rect —Å rx/ry (—Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã)
            rect_pattern = r'<rect[^>]*rx="([^"]*)"[^>]*ry="([^"]*)"[^>]*>'
            rect_match = re.search(rect_pattern, clip_content)
            if rect_match:
                rx = float(rect_match.group(1) or 0)
                ry = float(rect_match.group(2) or 0)
                
                # –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–π, —Å—á–∏—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–º
                if rx > 20 or ry > 20:
                    return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º path —Å –∫—Ä—É–≥–ª—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
            if '<path' in clip_content:
                path_pattern = r'd="([^"]*)"'
                path_match = re.search(path_pattern, clip_content)
                if path_match:
                    path_data = path_match.group(1)
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –¥—É–≥ (A) –∏–ª–∏ –º–Ω–æ–≥–æ –∫—Ä–∏–≤—ã—Ö (C)
                    if 'A' in path_data or path_data.count('C') > 4:
                        return 'circular'
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ pattern
        pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*width="([^"]*)"[^>]*height="([^"]*)"[^>]*>'
        pattern_match = re.search(pattern_pattern, svg_content)
        
        if pattern_match:
            width = float(pattern_match.group(1) or 0)
            height = float(pattern_match.group(2) or 0)
            
            # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫—Ä—É–≥–ª—ã–π
            if abs(width - height) < 5:
                return 'circular'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
        return 'rectangular'
    
    def determine_image_type(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è"""
        field_lower = dyno_field.lower()
        
        headshot_keywords = ['headshot', 'agent', 'profile', 'portrait', 'realtor', 'agentheadshot']
        property_keywords = ['propertyimage', 'property', 'house', 'home', 'building', 'listing']
        logo_keywords = ['logo', 'companylogo', 'brand', 'brandlogo']
        
        for keyword in headshot_keywords:
            if keyword in field_lower:
                return 'headshot'
        
        for keyword in property_keywords:
            if keyword in field_lower:
                return 'property'
        
        for keyword in logo_keywords:
            if keyword in field_lower:
                return 'logo'
        
        return 'generic_image'
    
    def get_aspect_ratio_for_image(image_type, element_shape):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã —ç–ª–µ–º–µ–Ω—Ç–∞"""
        
        if image_type == 'headshot':
            if element_shape == 'circular':
                # –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º slice!
                return 'xMidYMid slice'
            else:
                # –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º meet
                return 'xMidYMid meet'
        
        elif image_type == 'property':
            # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ slice (cover —ç—Ñ—Ñ–µ–∫—Ç)
            return 'xMidYMid slice'
        
        elif image_type == 'logo':
            # –õ–æ–≥–æ—Ç–∏–ø—ã –≤—Å–µ–≥–¥–∞ meet (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π)
            return 'xMidYMid meet'
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é meet (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            return 'xMidYMid meet'
    
    def is_image_field(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        field_lower = dyno_field.lower()
        explicit_image_indicators = ['image', 'headshot', 'logo', 'photo', 'pic', 'portrait']
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field} (lower: {field_lower})")
        
        for indicator in explicit_image_indicators:
            if indicator in field_lower:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '{indicator}' - —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return True
        
        if 'agent' in field_lower and any(img in field_lower for img in ['photo', 'image', 'pic', 'headshot']):
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω 'agent' + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return True
        
        print(f"   ‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return False
    
    def is_address_field(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–æ–º"""
        field_lower = dyno_field.lower()
        address_keywords = ['address', 'location', 'addr', 'street', 'propertyaddress']
        
        for keyword in address_keywords:
            if keyword in field_lower:
                return True
        
        return False
    
    def wrap_address_text(address_text, max_length=35):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–∞ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        """
        if not address_text or len(address_text) <= max_length:
            return address_text, ""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        words = address_text.split()
        
        if len(words) <= 1:
            return address_text, ""
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        best_break = len(words) // 2
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
        for i, word in enumerate(words):
            if ',' in word and i > 0 and i < len(words) - 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                first_part = ' '.join(words[:i+1])
                if len(first_part) >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    best_break = i + 1
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø—è—Ç—É—é, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if best_break == len(words) // 2:
            for i, word in enumerate(words):
                if i > 0 and i < len(words) - 1:
                    first_part = ' '.join(words[:i+1])
                    if 20 <= len(first_part) <= max_length:
                        best_break = i + 1
                        break
        
        first_line = ' '.join(words[:best_break])
        second_line = ' '.join(words[best_break:])
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(second_line) > max_length:
            return address_text, ""
        
        return first_line, second_line
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    successful_replacements = 0
    total_fields = len(replacements)
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    field_mapping = {
        'dyno.agentname': 'dyno.name',
        'dyno.agentemail': 'dyno.email', 
        'dyno.agentphone': 'dyno.phone'
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        original_field = dyno_field
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
        if dyno_field in field_mapping:
            alternative_field = field_mapping[dyno_field]
            print(f"   üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è: {alternative_field}")
        else:
            alternative_field = None
        
        if is_image_field(dyno_field):
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            image_type = determine_image_type(dyno_field)
            
            print(f"   üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            print(f"      üìê –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_type}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è URL
            safe_url = safe_escape_for_svg(str(replacement))
            print(f"      üîí –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL")
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º pattern
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
            if not match and alternative_field:
                element_pattern = f'<[^>]*id="{re.escape(alternative_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
                match = re.search(element_pattern, processed_svg)
                if match:
                    print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {alternative_field}")
                    dyno_field = alternative_field
            
            if match:
                pattern_id = match.group(1)
                print(f"      üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                
                # –û–ü–†–ï–î–ï–õ–Ø–ï–ú –§–û–†–ú–£ –≠–õ–ï–ú–ï–ù–¢–ê
                element_shape = determine_element_shape(processed_svg, pattern_id)
                print(f"      üîç –§–æ—Ä–º–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {element_shape}")
                
                # –í–´–ë–ò–†–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô ASPECT RATIO
                aspect_ratio = get_aspect_ratio_for_image(image_type, element_shape)
                print(f"      ‚öôÔ∏è Aspect ratio: {aspect_ratio}")
                
                # –ò—â–µ–º pattern –±–ª–æ–∫
                pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                pattern_match = re.search(pattern_block_pattern, processed_svg, re.DOTALL)
                
                if pattern_match:
                    pattern_content = pattern_match.group(1)
                    pattern_full = pattern_match.group(0)
                    
                    # –î–ª—è –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤ –£–ë–ò–†–ê–ï–ú —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ preserveAspectRatio
                    if element_shape == 'circular' and image_type == 'headshot':
                        print(f"      üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫—Ä—É–≥–ª—ã–π headshot –ë–ï–ó —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π")
                        
                        # –£–ë–ò–†–ê–ï–ú –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ patternTransform –¥–ª—è –ª—É—á—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                        old_pattern = pattern_full
                        
                        # –£–¥–∞–ª—è–µ–º patternTransform –µ—Å–ª–∏ –µ—Å—Ç—å
                        new_pattern = re.sub(r'\s*patternTransform="[^"]*"', '', old_pattern)
                        
                        # –£–¥–∞–ª—è–µ–º transform –µ—Å–ª–∏ –µ—Å—Ç—å  
                        new_pattern = re.sub(r'\s*transform="[^"]*"', '', new_pattern)
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π pattern –Ω–∞ –Ω–æ–≤—ã–π –ë–ï–ó —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π
                        if new_pattern != old_pattern:
                            processed_svg = processed_svg.replace(old_pattern, new_pattern)
                            print(f"      ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform - headshot –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    
                    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ pattern
                    use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
                    use_match = re.search(use_pattern, pattern_content)
                    
                    if use_match:
                        image_id = use_match.group(1)
                        print(f"      üîó –ù–∞–π–¥–µ–Ω use —ç–ª–µ–º–µ–Ω—Ç: #{image_id}")
                        
                        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
                        image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
                        image_match = re.search(image_pattern, processed_svg)
                        
                        if image_match:
                            old_image = image_match.group(0)
                            new_image = old_image
                            
                            # –ó–∞–º–µ–Ω—è–µ–º URL —Å –ø–æ–ª–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                            new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
                            new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                            
                            # –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio
                            if 'preserveAspectRatio=' in new_image:
                                new_image = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', new_image)
                            else:
                                if new_image.endswith('/>'):
                                    new_image = new_image[:-2] + f' preserveAspectRatio="{aspect_ratio}"/>'
                                elif new_image.endswith('>'):
                                    new_image = new_image[:-1] + f' preserveAspectRatio="{aspect_ratio}">'
                            
                            processed_svg = processed_svg.replace(old_image, new_image)
                            print(f"      ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {dyno_field} –∑–∞–º–µ–Ω–µ–Ω–æ!")
                            print(f"      üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω aspect ratio: {aspect_ratio}")
                            successful_replacements += 1
                        else:
                            print(f"      ‚ùå Image —ç–ª–µ–º–µ–Ω—Ç #{image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"      ‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"      ‚ùå Pattern –±–ª–æ–∫ {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"      ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô
            safe_replacement = safe_escape_for_svg(str(replacement))
            
            if is_address_field(dyno_field):
                print(f"   üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º: {dyno_field}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
                first_line, second_line = wrap_address_text(str(replacement))
                
                print(f"      üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {first_line}")
                print(f"      üìù –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: {second_line}")
                
                # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                if not re.search(element_pattern, processed_svg) and alternative_field:
                    element_pattern = f'<text[^>]*id="{re.escape(alternative_field)}"[^>]*>(.*?)</text>'
                    if re.search(element_pattern, processed_svg):
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {alternative_field}")
                        dyno_field = alternative_field
                
                def replace_address_element(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tspan
                    tspan_pattern = r'<tspan[^>]*x="([^"]*)"[^>]*y="([^"]*)"[^>]*>([^<]*)</tspan>'
                    tspan_match = re.search(tspan_pattern, element_content)
                    
                    if tspan_match:
                        x_pos = tspan_match.group(1)
                        y_pos = tspan_match.group(2)
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–≤—É–º—è tspan —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                        if second_line:
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                            try:
                                y_float = float(y_pos)
                                second_y = y_float + 35
                            except:
                                second_y = f"{y_pos}+35"
                            
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan><tspan x="{x_pos}" y="{second_y}">{safe_escape_for_svg(second_line)}</tspan>'
                        else:
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan>'
                        
                        return full_element.replace(element_content, new_content)
                    else:
                        return full_element
                
                new_svg = re.sub(element_pattern, replace_address_element, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –ê–¥—Ä–µ—Å {dyno_field} –∑–∞–º–µ–Ω–µ–Ω —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –ê–¥—Ä–µ—Å {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {dyno_field}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id="dyno.field"
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                if not re.search(element_pattern, processed_svg) and alternative_field:
                    element_pattern = f'<text[^>]*id="{re.escape(alternative_field)}"[^>]*>(.*?)</text>'
                    if re.search(element_pattern, processed_svg):
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {alternative_field}")
                        dyno_field = alternative_field
                
                def replace_element_content(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    print(f"      üìù –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {dyno_field}")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                    def replace_tspan_content(tspan_match):
                        opening_tag = tspan_match.group(1)  # <tspan ...>
                        old_content = tspan_match.group(2)  # —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        closing_tag = tspan_match.group(3)  # </tspan>
                        
                        print(f"         üéØ –ó–∞–º–µ–Ω—è—é: '{old_content}' ‚Üí '{safe_replacement}'")
                        
                        return opening_tag + safe_replacement + closing_tag
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ tspan
                    tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
                    new_content = re.sub(tspan_pattern, replace_tspan_content, element_content, count=1)
                    
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    return full_element.replace(element_content, new_content)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
                new_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å id='{dyno_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–û–•–†–ê–ù–Ø–ï–ú –®–†–ò–§–¢–´ INTER –ò MONTSERRAT
    print("\nüî§ –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ä–∏—Ñ—Ç—ã Inter –∏ Montserrat...")
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú GOOGLE FONTS –ò–ú–ü–û–†–¢ –î–õ–Ø INTER –ò MONTSERRAT
    print("üì• –î–æ–±–∞–≤–ª—è—é Google Fonts –∏–º–ø–æ—Ä—Ç –¥–ª—è Inter –∏ Montserrat...")
    
    # –ò—â–µ–º —Ç–µ–≥ <defs> –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if '<defs>' in processed_svg:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π <defs>
        defs_pattern = r'(<defs>)'
        font_style = r'\1\n<style>@import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap");</style>'
        processed_svg = re.sub(defs_pattern, font_style, processed_svg)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π <defs> –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ <svg>
        svg_pattern = r'(<svg[^>]*>)'
        font_defs = r'\1\n<defs>\n<style>@import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap");</style>\n</defs>'
        processed_svg = re.sub(svg_pattern, font_defs, processed_svg)
    
    print("‚úÖ Google Fonts –∏–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ï–≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ê–ú–ü–ï–†–°–ê–ù–î–´
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –≤ SVG...")
    
    # –ò—â–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –≤–Ω–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    unescaped_ampersands = re.findall(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', processed_svg)
    
    if unescaped_ampersands:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(unescaped_ampersands)} –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–≤, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
        processed_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', processed_svg)
        print("‚úÖ –í—Å–µ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("‚úÖ –ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_replacements}/{total_fields} –ø–æ–ª–µ–π –∑–∞–º–µ–Ω–µ–Ω–æ")
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    return processed_svg

def ensure_db_exists():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É templates
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT NOT NULL,
            template_role TEXT NOT NULL,
            svg_content TEXT NOT NULL,
            dyno_fields TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É carousels
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carousels (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            main_template_id TEXT NOT NULL,
            photo_template_id TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_template_id) REFERENCES templates (id),
            FOREIGN KEY (photo_template_id) REFERENCES templates (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def create_app():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–∞ –¥–ª—è Gunicorn)
    """
    ensure_db_exists()
    return app

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4]
            })
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ templates_page: {str(e)}")
        return render_template('templates.html', templates=[])

@app.route('/upload')
def upload_page():
    return render_template('upload.html')

@app.route('/preview')
def preview_page():
    return render_template('preview.html')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
@app.route('/api/upload-single', methods=['POST'])
def upload_single_template():
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã (svg_file)
        if 'svg_file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['svg_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        template_role = request.form.get('template_role', '')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dyno –ø–æ–ª–µ–π
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_fields = extract_dyno_fields_simple(svg_content) if has_dyno else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        template_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, template_role, svg_content, ','.join(dyno_fields)])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {name}")
        preview_result = generate_svg_preview(svg_content, template_id)
        
        response_data = {
            'success': True,
            'template_id': template_id,
            'has_dyno_fields': has_dyno,
            'dyno_fields': dyno_fields,
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        if preview_result['success']:
            response_data['preview_url'] = preview_result['url']
            response_data['preview_filename'] = preview_result['filename']
        else:
            response_data['preview_error'] = preview_result['error']
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/upload-carousel', methods=['POST'])
def upload_carousel():
    try:
        if 'main_file' not in request.files or 'photo_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main –∏ photo'}), 400
        
        main_file = request.files['main_file']
        photo_file = request.files['photo_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        main_svg = main_file.read().decode('utf-8')
        photo_svg = photo_file.read().decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è
        main_dyno_info = {
            'has_dyno': has_dyno_fields_simple(main_svg),
            'fields': extract_dyno_fields_simple(main_svg)
        }
        
        photo_dyno_info = {
            'has_dyno': has_dyno_fields_simple(photo_svg),
            'fields': extract_dyno_fields_simple(photo_svg)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è main —à–∞–±–ª–æ–Ω–∞: {name} - Main")
        main_preview = generate_svg_preview(main_svg, main_template_id)
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è photo —à–∞–±–ª–æ–Ω–∞: {name} - Photo")
        photo_preview = generate_svg_preview(photo_svg, photo_template_id)
        
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é
        if main_preview['success']:
            response_data['main_preview_url'] = main_preview['url']
        if photo_preview['success']:
            response_data['photo_preview_url'] = photo_preview['url']
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API —Ä–æ—É—Ç—ã
@app.route('/api/health')
def health():
    return jsonify({"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/api/templates/all-previews')
def get_all_templates():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        templates = []
        for template in templates_data:
            template_id = template[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            preview_filename = f"{template_id}_preview.png"
            preview_path = os.path.join(OUTPUT_DIR, 'previews', preview_filename)
            
            if not os.path.exists(preview_path):
                # –ü–æ–ª—É—á–∞–µ–º SVG –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
                cursor_temp = conn.cursor()
                cursor_temp.execute('SELECT svg_content FROM templates WHERE id = ?', [template_id])
                svg_result = cursor_temp.fetchone()
                if svg_result:
                    generate_svg_preview(svg_result[0], template_id)
            
            templates.append({
                'id': template_id,
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4],
                'preview_url': f'/output/previews/{preview_filename}',
                'preview_api_url': f'/api/templates/{template_id}/preview'
            })
        
        return jsonify({
            'templates': templates,
            'total': len(templates)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PNG –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PNG –ø—Ä–µ–≤—å—é
        preview_filename = f"{template_id}_preview.png"
        preview_path = os.path.join(OUTPUT_DIR, 'previews', preview_filename)
        
        if os.path.exists(preview_path):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–≤—å—é
            return send_from_directory(
                os.path.join(OUTPUT_DIR, 'previews'), 
                preview_filename,
                mimetype='image/png'
            )
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        svg_content = result[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_svg_preview(svg_content, template_id)
        
        if preview_result['success']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
            return send_from_directory(
                os.path.join(OUTPUT_DIR, 'previews'), 
                preview_filename,
                mimetype='image/png'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PNG, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SVG
            preview_svg = create_preview_svg(svg_content)
            return preview_svg, 200, {'Content-Type': 'image/svg+xml'}
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/delete', methods=['DELETE'])
def delete_template(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT name FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', [template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@app.route('/api/generate/single', methods=['POST'])
def generate_single():
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_filename = f"single_{str(uuid.uuid4())}.svg"
        output_path = os.path.join(OUTPUT_DIR, 'single', output_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π SVG
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        
        return jsonify({
            'success': True,
            'template_name': template_name,
            'output_url': f'/output/single/{output_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg_content = main_result
        photo_name, photo_svg_content = photo_result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_main_svg = process_svg_font_perfect(main_svg_content, replacements)
        processed_photo_svg = process_svg_font_perfect(photo_svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SVG
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': f'/output/carousel/{main_filename}',
            'photo_url': f'/output/carousel/{photo_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º —à–∞–±–ª–æ–Ω–æ–≤
@app.route('/api/generate/carousel-by-name', methods=['POST'])
def generate_carousel_by_name():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤–º–µ—Å—Ç–æ ID
    """
    try:
        data = request.get_json()
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        replacements = data.get('replacements', {})
        
        if not main_template_name or not photo_template_name:
            return jsonify({'error': 'main_template_name –∏ photo_template_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        print(f"üîç –ò—â—É —à–∞–±–ª–æ–Ω—ã –ø–æ –∏–º–µ–Ω–∞–º:")
        print(f"   Main: {main_template_name}")
        print(f"   Photo: {photo_template_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∞–º
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ò—â–µ–º main —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [main_template_name])
        main_result = cursor.fetchone()
        
        if not main_result:
            conn.close()
            return jsonify({'error': f'Main —à–∞–±–ª–æ–Ω "{main_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ò—â–µ–º photo —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [photo_template_name])
        photo_result = cursor.fetchone()
        
        if not photo_result:
            conn.close()
            return jsonify({'error': f'Photo —à–∞–±–ª–æ–Ω "{photo_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        conn.close()
        
        main_id, main_name, main_svg = main_result
        photo_id, photo_name, photo_svg = photo_result
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã:")
        print(f"   Main: {main_name} (ID: {main_id})")
        print(f"   Photo: {photo_name} (ID: {photo_id})")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Main —à–∞–±–ª–æ–Ω...")
        processed_main_svg = process_svg_font_perfect(main_svg, replacements)
        
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Photo —à–∞–±–ª–æ–Ω...")
        processed_photo_svg = process_svg_font_perfect(photo_svg, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.join(OUTPUT_DIR, 'carousel'), exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        print(f"üéâ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_id,
            'photo_template_id': photo_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': f'/output/carousel/{main_filename}',
            'photo_url': f'/output/carousel/{photo_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ (–¥–æ 10 —Å–ª–∞–π–¥–æ–≤)
@app.route('/api/carousel/create-and-generate', methods=['POST'])
def create_and_generate_carousel():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å —Å main —Å–ª–∞–π–¥–æ–º + –¥–æ 9 —Ñ–æ—Ç–æ —Å–ª–∞–π–¥–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dyno.propertyimage2, dyno.propertyimage3, ... dyno.propertyimage10
    """
    try:
        data = request.get_json()
        carousel_name = data.get('name', 'Untitled Carousel')
        slides = data.get('slides', [])
        
        if not slides:
            return jsonify({'error': '–ú–∞—Å—Å–∏–≤ slides –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        print(f"üé† –°–æ–∑–¥–∞—é –∫–∞—Ä—É—Å–µ–ª—å: {carousel_name}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {len(slides)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_dir = os.path.join(OUTPUT_DIR, 'carousel', carousel_id)
        os.makedirs(carousel_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        generated_slides = []
        
        for slide_index, slide_data in enumerate(slides):
            template_id = slide_data.get('templateId')
            replacements = slide_data.get('replacements', {})
            image_path = slide_data.get('imagePath', '')
            
            if not template_id:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å–ª–∞–π–¥ {slide_index + 1}: –Ω–µ—Ç templateId")
                continue
            
            print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–ª–∞–π–¥ {slide_index + 1}: {template_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
            template_result = cursor.fetchone()
            
            if not template_result:
                print(f"‚ùå –®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            template_name, svg_content = template_result
            
            # –î–ª—è —Ñ–æ—Ç–æ —Å–ª–∞–π–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if slide_index > 0:  # –ù–µ main —Å–ª–∞–π–¥
                property_image_field = f'dyno.propertyimage{slide_index + 1}'
                if image_path and property_image_field not in replacements:
                    replacements[property_image_field] = image_path
                    print(f"   üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {property_image_field} = {image_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏
            processed_svg = process_svg_font_perfect(svg_content, replacements)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–∞–π–¥
            slide_filename = f"slide_{slide_index + 1:02d}.svg"
            slide_path = os.path.join(carousel_dir, slide_filename)
            
            with open(slide_path, 'w', encoding='utf-8') as f:
                f.write(processed_svg)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            generated_slides.append({
                'slide_number': slide_index + 1,
                'template_id': template_id,
                'template_name': template_name,
                'filename': slide_filename,
                'url': f'/output/carousel/{carousel_id}/{slide_filename}',
                'status': 'completed'
            })
            
            print(f"   ‚úÖ –°–ª–∞–π–¥ {slide_index + 1} —Å–æ–∑–¥–∞–Ω: {slide_filename}")
        
        conn.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—É—Å–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É carousels_full –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS carousels_full (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                slides_count INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            INSERT INTO carousels_full (id, name, slides_count)
            VALUES (?, ?, ?)
        ''', [carousel_id, carousel_name, len(generated_slides)])
        
        conn.commit()
        conn.close()
        
        print(f"üéâ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: {len(generated_slides)}")
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'name': carousel_name,
            'slides_count': len(generated_slides),
            'slides': generated_slides,
            'status': 'completed'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/carousel/<carousel_id>/slides', methods=['GET'])
def get_carousel_slides(carousel_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–π–¥–∞—Ö –∫–∞—Ä—É—Å–µ–ª–∏
    """
    try:
        print(f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—É—Å–µ–ª–∏: {carousel_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_dir = os.path.join(OUTPUT_DIR, 'carousel', carousel_id)
        
        if not os.path.exists(carousel_dir):
            return jsonify({'error': '–ö–∞—Ä—É—Å–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, slides_count, created_at FROM carousels_full WHERE id = ?', [carousel_id])
        carousel_result = cursor.fetchone()
        
        conn.close()
        
        if not carousel_result:
            return jsonify({'error': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        carousel_name, slides_count, created_at = carousel_result
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        slides = []
        for i in range(1, slides_count + 1):
            slide_filename = f"slide_{i:02d}.svg"
            slide_path = os.path.join(carousel_dir, slide_filename)
            
            if os.path.exists(slide_path):
                slides.append({
                    'slide_number': i,
                    'filename': slide_filename,
                    'image_url': f'/output/carousel/{carousel_id}/{slide_filename}',
                    'status': 'completed'
                })
            else:
                slides.append({
                    'slide_number': i,
                    'filename': slide_filename,
                    'image_url': None,
                    'status': 'error'
                })
        
        return jsonify({
            'carousel_id': carousel_id,
            'name': carousel_name,
            'status': 'completed',
            'slides_count': slides_count,
            'created_at': created_at,
            'slides': slides
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –ø—Ä–µ–≤—å—é SVG
@app.route('/api/preview/template/<template_id>', methods=['GET'])
def preview_template(template_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
        preview_type = request.args.get('type', 'png')
        width = int(request.args.get('width', 400))
        height = int(request.args.get('height', 300))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_svg_preview(svg_content, preview_type, width, height)
        
        if preview_result['success']:
            preview_result['template_name'] = template_name
            preview_result['template_id'] = template_id
            return jsonify(preview_result)
        else:
            return jsonify({'error': preview_result['error']}), 500
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/preview/with-data', methods=['POST'])
def preview_with_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        preview_type = data.get('type', 'png')
        width = int(data.get('width', 400))
        height = int(data.get('height', 300))
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏
        preview_result = create_preview_with_data(svg_content, replacements, preview_type)
        
        if preview_result['success']:
            preview_result['template_name'] = template_name
            preview_result['template_id'] = template_id
            return jsonify(preview_result)
        else:
            return jsonify({'error': preview_result['error']}), 500
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏: {str(e)}'}), 500

@app.route('/api/preview/carousel', methods=['POST'])
def preview_carousel():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –∫–∞—Ä—É—Å–µ–ª–∏ (main + photo —Å–ª–∞–π–¥—ã)"""
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        preview_type = data.get('type', 'png')
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg = main_result
        photo_name, photo_svg = photo_result
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        main_preview = create_preview_with_data(main_svg, replacements, preview_type)
        photo_preview = create_preview_with_data(photo_svg, replacements, preview_type)
        
        return jsonify({
            'success': True,
            'main_preview': {
                'template_name': main_name,
                'template_id': main_template_id,
                **main_preview
            },
            'photo_preview': {
                'template_name': photo_name,
                'template_id': photo_template_id,
                **photo_preview
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

@app.route('/api/preview/cleanup', methods=['POST'])
def cleanup_previews():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã"""
    try:
        max_age_hours = request.json.get('max_age_hours', 24) if request.json else 24
        cleanup_old_previews(max_age_hours)
        
        return jsonify({
            'success': True,
            'message': f'–ü—Ä–µ–≤—å—é —Å—Ç–∞—Ä—à–µ {max_age_hours} —á–∞—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

if __name__ == '__main__':
    ensure_db_exists()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_old_previews()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(host='0.0.0.0', port=5000, debug=True)
