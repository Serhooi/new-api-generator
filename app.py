"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –®–†–ò–§–¢–û–í
================================================================

–í–µ—Ä—Å–∏—è 8.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤ Montserrat
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io
import html

app = Flask(__name__)
CORS(app, origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    fields = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ dyno –ø–æ–ª–µ–π
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    """
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = str(text)
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º & —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    
    return text

def process_svg_font_perfect(svg_content, replacements):
    """
    –ò–î–ï–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
    –ó–∞–º–µ–Ω—è–µ—Ç –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞, –ù–ï –¢–†–û–ì–ê–Ø –Ω–∏–∫–∞–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    """
    print("üé® –ó–ê–ü–£–°–ö –ò–î–ï–ê–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –®–†–ò–§–¢–û–í")
    
    processed_svg = svg_content
    
    for field, value in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {field} = {value}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
        safe_value = html.escape(str(value))
        
        if field == 'dyno.propertyimage':
            # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø PROPERTY IMAGE
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é property image: {field}")
            
            # –ò—â–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ patterns –¥–ª—è property image
            patterns_to_replace = [
                'pattern0_294_4',  # Main template
                'pattern0_332_4',  # Photo template
            ]
            
            for pattern in patterns_to_replace:
                # –ò—â–µ–º pattern definition
                pattern_regex = f'<pattern[^>]*id="{pattern}"[^>]*>'
                pattern_match = re.search(pattern_regex, processed_svg)
                
                if pattern_match:
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ pattern
                    pattern_start = pattern_match.end()
                    
                    # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </pattern>
                    pattern_end_match = re.search(r'</pattern>', processed_svg[pattern_start:])
                    
                    if pattern_end_match:
                        pattern_end = pattern_start + pattern_end_match.start()
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ pattern —Å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        new_pattern_content = f'<image href="{safe_value}?w=1200&h=800&q=90&fit=crop" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"/>'
                        
                        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ pattern
                        processed_svg = processed_svg[:pattern_start] + new_pattern_content + processed_svg[pattern_end:]
                        
                        print(f"   ‚úÖ Pattern {pattern} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                        break
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </pattern> –¥–ª—è {pattern}")
                else:
                    print(f"   ‚ö†Ô∏è Pattern {pattern} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
        elif field in ['dyno.agentheadshot', 'dyno.logo']:
            # –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {field}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º pattern –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if field == 'dyno.agentheadshot':
                target_patterns = ['pattern2_294_4', 'pattern2_332_4']
                image_params = "?w=400&h=400&q=90&fit=crop"
            elif field == 'dyno.logo':
                target_patterns = ['pattern1_294_4', 'pattern1_332_4']
                image_params = "?w=300&h=100&q=90&fit=crop"
            
            for pattern in target_patterns:
                pattern_regex = f'<pattern[^>]*id="{pattern}"[^>]*>'
                pattern_match = re.search(pattern_regex, processed_svg)
                
                if pattern_match:
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern}")
                    
                    pattern_start = pattern_match.end()
                    pattern_end_match = re.search(r'</pattern>', processed_svg[pattern_start:])
                    
                    if pattern_end_match:
                        pattern_end = pattern_start + pattern_end_match.start()
                        
                        new_pattern_content = f'<image href="{safe_value}{image_params}" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"/>'
                        
                        processed_svg = processed_svg[:pattern_start] + new_pattern_content + processed_svg[pattern_end:]
                        
                        print(f"   ‚úÖ Pattern {pattern} –∑–∞–º–µ–Ω–µ–Ω!")
                        break
                        
        else:
            # –î–õ–Ø –¢–ï–ö–°–¢–ê - –°–£–ü–ï–†-–¢–û–ß–ù–ê–Ø –∑–∞–º–µ–Ω–∞ —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
            print(f"üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç: {field}")
            
            # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º id
            text_pattern = f'<text[^>]*id="{re.escape(field)}"[^>]*>'
            text_match = re.search(text_pattern, processed_svg)
            
            if text_match:
                print(f"   üìù –ù–∞–π–¥–µ–Ω text —ç–ª–µ–º–µ–Ω—Ç —Å id: {field}")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ text —ç–ª–µ–º–µ–Ω—Ç–∞
                text_start = text_match.end()
                
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </text>
                text_end_match = re.search(r'</text>', processed_svg[text_start:])
                
                if text_end_match:
                    text_end = text_start + text_end_match.start()
                    text_content = processed_svg[text_start:text_end]
                    
                    print(f"   üìù –ù–∞–π–¥–µ–Ω text –±–ª–æ–∫ –¥–ª–∏–Ω–æ–π {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò–î–ï–ê–õ–¨–ù–ê–Ø –∑–∞–º–µ–Ω–∞: –∑–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                    def replace_first_tspan_content(content):
                        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π tspan —Å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                        tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
                        
                        def replace_content(match):
                            opening_tag = match.group(1)  # <tspan ...> —Å –í–°–ï–ú–ò –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                            old_content = match.group(2)  # —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                            closing_tag = match.group(3)  # </tspan>
                            
                            print(f"      üéØ –ó–∞–º–µ–Ω—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{old_content}' ‚Üí '{safe_value}'")
                            print(f"      üî§ –°–û–•–†–ê–ù–Ø–Æ –∞—Ç—Ä–∏–±—É—Ç—ã: {opening_tag}")
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–≥ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –ù–û –°–û –°–¢–ê–†–´–ú–ò –ê–¢–†–ò–ë–£–¢–ê–ú–ò!
                            return opening_tag + safe_value + closing_tag
                        
                        # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–π tspan (count=1)
                        return re.sub(tspan_pattern, replace_content, content, count=1)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
                    new_text_content = replace_first_tspan_content(text_content)
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –≤ –ø–æ–ª–Ω–æ–º SVG
                    processed_svg = processed_svg[:text_start] + new_text_content + processed_svg[text_end:]
                    
                    print(f"   ‚úÖ –¢–µ–∫—Å—Ç –∑–∞–º–µ–Ω–µ–Ω —Å –ü–û–õ–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º font-family –∞—Ç—Ä–∏–±—É—Ç–æ–≤!")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </text> –¥–ª—è {field}")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω text —ç–ª–µ–º–µ–Ω—Ç —Å id {field}")
    
    print("‚úÖ –ò–î–ï–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –í–°–ï –®–†–ò–§–¢–´ MONTSERRAT –°–û–•–†–ê–ù–ï–ù–´!")
    return processed_svg

def ensure_db_exists():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É templates
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT NOT NULL,
            template_role TEXT NOT NULL,
            svg_content TEXT NOT NULL,
            dyno_fields TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É carousels
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carousels (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            main_template_id TEXT NOT NULL,
            photo_template_id TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_template_id) REFERENCES templates (id),
            FOREIGN KEY (photo_template_id) REFERENCES templates (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def create_app():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–∞ –¥–ª—è Gunicorn)
    """
    ensure_db_exists()
    return app

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4]
            })
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ templates_page: {str(e)}")
        return render_template('templates.html', templates=[])

@app.route('/upload')
def upload_page():
    return render_template('upload.html')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
@app.route('/api/upload-single', methods=['POST'])
def upload_single_template():
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        template_role = request.form.get('template_role', '')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dyno –ø–æ–ª–µ–π
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_fields = extract_dyno_fields_simple(svg_content) if has_dyno else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        template_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, template_role, svg_content, ','.join(dyno_fields)])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'template_id': template_id,
            'has_dyno_fields': has_dyno,
            'dyno_fields': dyno_fields,
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/upload-carousel', methods=['POST'])
def upload_carousel():
    try:
        if 'main_file' not in request.files or 'photo_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main –∏ photo'}), 400
        
        main_file = request.files['main_file']
        photo_file = request.files['photo_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        main_svg = main_file.read().decode('utf-8')
        photo_svg = photo_file.read().decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è
        main_dyno_info = {
            'has_dyno': has_dyno_fields_simple(main_svg),
            'fields': extract_dyno_fields_simple(main_svg)
        }
        
        photo_dyno_info = {
            'has_dyno': has_dyno_fields_simple(photo_svg),
            'fields': extract_dyno_fields_simple(photo_svg)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API —Ä–æ—É—Ç—ã
@app.route('/api/health')
def health():
    return jsonify({"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"})

@app.route('/api/templates/all-previews')
def get_all_templates():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4],
                'preview_url': f'/api/templates/{template[0]}/preview'
            })
        
        return jsonify({
            'templates': templates,
            'total': len(templates)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        svg_content = result[0]
        
        return svg_content, 200, {'Content-Type': 'image/svg+xml'}
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/delete', methods=['DELETE'])
def delete_template(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT name FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', [template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@app.route('/api/generate/single', methods=['POST'])
def generate_single():
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_filename = f"single_{str(uuid.uuid4())}.svg"
        output_path = os.path.join(OUTPUT_DIR, 'single', output_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π SVG
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        
        return jsonify({
            'success': True,
            'template_name': template_name,
            'output_url': f'/output/single/{output_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg_content = main_result
        photo_name, photo_svg_content = photo_result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_main_svg = process_svg_font_perfect(main_svg_content, replacements)
        processed_photo_svg = process_svg_font_perfect(photo_svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SVG
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': f'/output/carousel/{main_filename}',
            'photo_url': f'/output/carousel/{photo_filename}',
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

if __name__ == '__main__':
    ensure_db_exists()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(host='0.0.0.0', port=5000, debug=True)

