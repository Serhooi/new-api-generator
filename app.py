"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –®–†–ò–§–¢–û–í
================================================================

–í–µ—Ä—Å–∏—è 8.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤ Montserrat
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io
import html

app = Flask(__name__)
CORS(app, origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    fields = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ dyno –ø–æ–ª–µ–π
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è &
    """
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML/SVG
    text = str(text)
    text = text.replace('&', '&amp;')  # –í–ê–ñ–ù–û: & –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def process_svg_font_perfect(svg_content, replacements):
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π vs –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π aspect ratio –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ use —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ pattern –±–ª–æ–∫–∞—Ö
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ Inter –∏ Montserrat
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    """
    print("üé® –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤)")
    
    processed_svg = svg_content
    
    def determine_element_shape(svg_content, pattern_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)"""
        
        # –ò—â–µ–º clipPath —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å pattern
        clip_pattern = f'<clipPath[^>]*id="[^"]*{re.escape(pattern_id)}[^"]*"[^>]*>(.*?)</clipPath>'
        clip_match = re.search(clip_pattern, svg_content, re.DOTALL)
        
        if clip_match:
            clip_content = clip_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ circle –∏–ª–∏ ellipse
            if '<circle' in clip_content or '<ellipse' in clip_content:
                return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rect —Å rx/ry (—Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã)
            rect_pattern = r'<rect[^>]*rx="([^"]*)"[^>]*ry="([^"]*)"[^>]*>'
            rect_match = re.search(rect_pattern, clip_content)
            if rect_match:
                rx = float(rect_match.group(1) or 0)
                ry = float(rect_match.group(2) or 0)
                
                # –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–π, —Å—á–∏—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–º
                if rx > 20 or ry > 20:
                    return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º path —Å –∫—Ä—É–≥–ª—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
            if '<path' in clip_content:
                path_pattern = r'd="([^"]*)"'
                path_match = re.search(path_pattern, clip_content)
                if path_match:
                    path_data = path_match.group(1)
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –¥—É–≥ (A) –∏–ª–∏ –º–Ω–æ–≥–æ –∫—Ä–∏–≤—ã—Ö (C)
                    if 'A' in path_data or path_data.count('C') > 4:
                        return 'circular'
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ pattern
        pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*width="([^"]*)"[^>]*height="([^"]*)"[^>]*>'
        pattern_match = re.search(pattern_pattern, svg_content)
        
        if pattern_match:
            width = float(pattern_match.group(1) or 0)
            height = float(pattern_match.group(2) or 0)
            
            # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫—Ä—É–≥–ª—ã–π
            if abs(width - height) < 5:
                return 'circular'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
        return 'rectangular'
    
    def determine_image_type(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è"""
        field_lower = dyno_field.lower()
        
        headshot_keywords = ['headshot', 'agent', 'profile', 'portrait', 'realtor', 'agentheadshot']
        property_keywords = ['propertyimage', 'property', 'house', 'home', 'building', 'listing']
        logo_keywords = ['logo', 'companylogo', 'brand', 'brandlogo']
        
        for keyword in headshot_keywords:
            if keyword in field_lower:
                return 'headshot'
        
        for keyword in property_keywords:
            if keyword in field_lower:
                return 'property'
        
        for keyword in logo_keywords:
            if keyword in field_lower:
                return 'logo'
        
        return 'generic_image'
    
    def get_aspect_ratio_for_image(image_type, element_shape):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã —ç–ª–µ–º–µ–Ω—Ç–∞"""
        
        if image_type == 'headshot':
            if element_shape == 'circular':
                # –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º slice!
                return 'xMidYMid slice'
            else:
                # –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º meet
                return 'xMidYMid meet'
        
        elif image_type == 'property':
            # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ slice (cover —ç—Ñ—Ñ–µ–∫—Ç)
            return 'xMidYMid slice'
        
        elif image_type == 'logo':
            # –õ–æ–≥–æ—Ç–∏–ø—ã –≤—Å–µ–≥–¥–∞ meet (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π)
            return 'xMidYMid meet'
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é meet (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            return 'xMidYMid meet'
    
    def is_image_field(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        field_lower = dyno_field.lower()
        explicit_image_indicators = ['image', 'headshot', 'logo', 'photo', 'pic', 'portrait']
        
        for indicator in explicit_image_indicators:
            if indicator in field_lower:
                return True
        
        if 'agent' in field_lower and any(img in field_lower for img in ['photo', 'image', 'pic', 'headshot']):
            return True
        
        return False
    
    def is_address_field(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–æ–º"""
        field_lower = dyno_field.lower()
        address_keywords = ['address', 'location', 'addr', 'street', 'propertyaddress']
        
        for keyword in address_keywords:
            if keyword in field_lower:
                return True
        
        return False
    
    def wrap_address_text(address_text, max_length=35):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–∞ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        """
        if not address_text or len(address_text) <= max_length:
            return address_text, ""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        words = address_text.split()
        
        if len(words) <= 1:
            return address_text, ""
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        best_break = len(words) // 2
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
        for i, word in enumerate(words):
            if ',' in word and i > 0 and i < len(words) - 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                first_part = ' '.join(words[:i+1])
                if len(first_part) >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    best_break = i + 1
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø—è—Ç—É—é, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if best_break == len(words) // 2:
            for i, word in enumerate(words):
                if i > 0 and i < len(words) - 1:
                    first_part = ' '.join(words[:i+1])
                    if 20 <= len(first_part) <= max_length:
                        best_break = i + 1
                        break
        
        first_line = ' '.join(words[:best_break])
        second_line = ' '.join(words[best_break:])
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(second_line) > max_length:
            return address_text, ""
        
        return first_line, second_line
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    successful_replacements = 0
    total_fields = len(replacements)
    
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        if is_image_field(dyno_field):
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            image_type = determine_image_type(dyno_field)
            
            print(f"   üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            print(f"      üìê –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_type}")
            
            safe_url = str(replacement).replace('&', '&amp;')
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º pattern
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                pattern_id = match.group(1)
                print(f"      üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                
                # –û–ü–†–ï–î–ï–õ–Ø–ï–ú –§–û–†–ú–£ –≠–õ–ï–ú–ï–ù–¢–ê
                element_shape = determine_element_shape(processed_svg, pattern_id)
                print(f"      üîç –§–æ—Ä–º–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {element_shape}")
                
                # –í–´–ë–ò–†–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô ASPECT RATIO
                aspect_ratio = get_aspect_ratio_for_image(image_type, element_shape)
                print(f"      ‚öôÔ∏è Aspect ratio: {aspect_ratio}")
                
                # –ò—â–µ–º pattern –±–ª–æ–∫
                pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                pattern_match = re.search(pattern_block_pattern, processed_svg, re.DOTALL)
                
                if pattern_match:
                    pattern_content = pattern_match.group(1)
                    
                    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ pattern
                    use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
                    use_match = re.search(use_pattern, pattern_content)
                    
                    if use_match:
                        image_id = use_match.group(1)
                        print(f"      üîó –ù–∞–π–¥–µ–Ω use —ç–ª–µ–º–µ–Ω—Ç: #{image_id}")
                        
                        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
                        image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
                        image_match = re.search(image_pattern, processed_svg)
                        
                        if image_match:
                            old_image = image_match.group(0)
                            new_image = old_image
                            
                            # –ó–∞–º–µ–Ω—è–µ–º URL
                            new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
                            new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                            
                            # –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio
                            if 'preserveAspectRatio=' in new_image:
                                new_image = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', new_image)
                            else:
                                if new_image.endswith('/>'):
                                    new_image = new_image[:-2] + f' preserveAspectRatio="{aspect_ratio}"/>'
                                elif new_image.endswith('>'):
                                    new_image = new_image[:-1] + f' preserveAspectRatio="{aspect_ratio}">'
                            
                            processed_svg = processed_svg.replace(old_image, new_image)
                            print(f"      ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {dyno_field} –∑–∞–º–µ–Ω–µ–Ω–æ!")
                            print(f"      üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω aspect ratio: {aspect_ratio}")
                            successful_replacements += 1
                        else:
                            print(f"      ‚ùå Image —ç–ª–µ–º–µ–Ω—Ç #{image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"      ‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"      ‚ùå Pattern –±–ª–æ–∫ {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"      ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô
            safe_replacement = safe_escape_for_svg(str(replacement))
            
            if is_address_field(dyno_field):
                print(f"   üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º: {dyno_field}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
                first_line, second_line = wrap_address_text(str(replacement))
                
                print(f"      üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {first_line}")
                print(f"      üìù –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: {second_line}")
                
                # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                def replace_address_element(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tspan
                    tspan_pattern = r'<tspan[^>]*x="([^"]*)"[^>]*y="([^"]*)"[^>]*>([^<]*)</tspan>'
                    tspan_match = re.search(tspan_pattern, element_content)
                    
                    if tspan_match:
                        x_pos = tspan_match.group(1)
                        y_pos = tspan_match.group(2)
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–≤—É–º—è tspan —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                        if second_line:
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                            try:
                                y_float = float(y_pos)
                                second_y = y_float + 35
                            except:
                                second_y = f"{y_pos}+35"
                            
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan><tspan x="{x_pos}" y="{second_y}">{safe_escape_for_svg(second_line)}</tspan>'
                        else:
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan>'
                        
                        return full_element.replace(element_content, new_content)
                    else:
                        return full_element
                
                new_svg = re.sub(element_pattern, replace_address_element, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –ê–¥—Ä–µ—Å {dyno_field} –∑–∞–º–µ–Ω–µ–Ω —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –ê–¥—Ä–µ—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            else:
                # –û–±—ã—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –Ω–µ-–∞–¥—Ä–µ—Å–æ–≤
                print(f"   üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {dyno_field}")
                
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                def replace_text_element(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    # –ò—â–µ–º tspan
                    tspan_pattern = r'<tspan[^>]*>([^<]*)</tspan>'
                    tspan_match = re.search(tspan_pattern, element_content)
                    
                    if tspan_match:
                        old_content = tspan_match.group(1)
                        new_content = element_content.replace(old_content, safe_replacement)
                        return full_element.replace(element_content, new_content)
                    else:
                        return full_element.replace(element_content, safe_replacement)
                
                new_svg = re.sub(element_pattern, replace_text_element, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ {dyno_field} –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_replacements}/{total_fields} –ø–æ–ª–µ–π –∑–∞–º–µ–Ω–µ–Ω–æ")
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –∫—Ä—É–≥–ª—ã–º–∏ —Ö–µ–¥—à–æ—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    

    return processed_svg

def ensure_db_exists():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            svg_content TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/templates', methods=['POST'])
def upload_template():
    try:
        data = request.get_json()
        
        if not data or 'name' not in data or 'svg_content' not in data:
            return jsonify({'error': 'Name and SVG content are required'}), 400
        
        template_id = str(uuid.uuid4())
        name = data['name']
        svg_content = data['svg_content']
        
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute(
            'INSERT INTO templates (id, name, svg_content) VALUES (?, ?, ?)',
            (template_id, name, svg_content)
        )
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'template_id': template_id,
            'message': 'Template uploaded successfully'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates', methods=['GET'])
def get_templates():
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, created_at FROM templates ORDER BY created_at DESC')
        templates = cursor.fetchall()
        
        conn.close()
        
        template_list = []
        for template in templates:
            template_list.append({
                'id': template[0],
                'name': template[1],
                'created_at': template[2]
            })
        
        return jsonify({'templates': template_list})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/<template_id>', methods=['GET'])
def get_template(template_id):
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', (template_id,))
        template = cursor.fetchone()
        
        conn.close()
        
        if not template:
            return jsonify({'error': 'Template not found'}), 404
        
        return jsonify({
            'id': template_id,
            'name': template[0],
            'svg_content': template[1]
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/<template_id>/svg', methods=['GET'])
def get_template_svg(template_id):
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', (template_id,))
        template = cursor.fetchone()
        
        conn.close()
        
        if not template:
            return 'Template not found', 404
        
        return Response(template[0], mimetype='image/svg+xml')
        
    except Exception as e:
        return str(e), 500

@app.route('/api/templates/<template_id>', methods=['DELETE'])
def delete_template(template_id):
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM templates WHERE id = ?', (template_id,))
        
        if cursor.rowcount == 0:
            conn.close()
            return jsonify({'error': 'Template not found'}), 404
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': 'Template deleted successfully'})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/all-previews', methods=['GET'])
def get_all_template_previews():
    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, svg_content FROM templates ORDER BY created_at DESC')
        templates = cursor.fetchall()
        
        conn.close()
        
        previews = []
        for template in templates:
            previews.append({
                'id': template[0],
                'name': template[1],
                'preview_url': f'/api/templates/{template[0]}/svg'
            })
        
        return jsonify({'previews': previews})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/generate', methods=['POST'])
def generate_image():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'No data provided'}), 400
        
        template_name = data.get('template_name')
        replacements = data.get('replacements', {})
        
        if not template_name:
            return jsonify({'error': 'Template name is required'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE name = ?', (template_name,))
        template = cursor.fetchone()
        
        conn.close()
        
        if not template:
            return jsonify({'error': f'Template "{template_name}" not found'}), 404
        
        svg_content = template[0]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        png_data = cairosvg.svg2png(bytestring=processed_svg.encode('utf-8'))
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        png_base64 = base64.b64encode(png_data).decode('utf-8')
        
        return jsonify({
            'success': True,
            'image_data': f'data:image/png;base64,{png_base64}',
            'svg_content': processed_svg
        })
        
    except Exception as e:
        print(f"Error in generate_image: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/generate-carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'No data provided'}), 400
        
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        property_images = data.get('property_images', [])
        replacements = data.get('replacements', {})
        
        if not main_template_name or not photo_template_name:
            return jsonify({'error': 'Both main_template_name and photo_template_name are required'}), 400
        
        if not property_images:
            return jsonify({'error': 'At least one property image is required'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE name = ?', (main_template_name,))
        main_template = cursor.fetchone()
        
        cursor.execute('SELECT svg_content FROM templates WHERE name = ?', (photo_template_name,))
        photo_template = cursor.fetchone()
        
        conn.close()
        
        if not main_template:
            return jsonify({'error': f'Main template "{main_template_name}" not found'}), 404
        
        if not photo_template:
            return jsonify({'error': f'Photo template "{photo_template_name}" not found'}), 404
        
        main_svg = main_template[0]
        photo_svg = photo_template[0]
        
        carousel_images = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        main_processed = process_svg_font_perfect(main_svg, replacements)
        main_png = cairosvg.svg2png(bytestring=main_processed.encode('utf-8'))
        main_base64 = base64.b64encode(main_png).decode('utf-8')
        
        carousel_images.append({
            'type': 'main',
            'image_data': f'data:image/png;base64,{main_base64}'
        })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        for i, property_image in enumerate(property_images):
            photo_replacements = replacements.copy()
            photo_replacements['dyno.propertyimage'] = property_image
            
            photo_processed = process_svg_font_perfect(photo_svg, photo_replacements)
            photo_png = cairosvg.svg2png(bytestring=photo_processed.encode('utf-8'))
            photo_base64 = base64.b64encode(photo_png).decode('utf-8')
            
            carousel_images.append({
                'type': 'photo',
                'index': i,
                'image_data': f'data:image/png;base64,{photo_base64}'
            })
        
        return jsonify({
            'success': True,
            'carousel_images': carousel_images,
            'total_images': len(carousel_images)
        })
        
    except Exception as e:
        print(f"Error in generate_carousel: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    ensure_db_exists()
    app.run(host='0.0.0.0', port=5000, debug=True)

