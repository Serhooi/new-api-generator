#!/usr/bin/env python3
"""
RENDER-–°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –í–ï–†–°–ò–Ø API
============================

–í–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ Render.com
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CairoSVG —Å fallback
try:
    import cairosvg
    CAIRO_AVAILABLE = True
except ImportError:
    CAIRO_AVAILABLE = False

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Pillow —Å fallback
try:
    from PIL import Image
    PILLOW_AVAILABLE = True
except ImportError:
    PILLOW_AVAILABLE = False

app = Flask(__name__)
CORS(app, origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    id_pattern = r'id="(dyno\.[^"]*)"'
    id_matches = re.findall(id_pattern, svg_content)
    
    # –ò—â–µ–º dyno –ø–æ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
    text_patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',
        r'\{(dyno\.[^}]+)\}'
    ]
    
    text_matches = []
    for pattern in text_patterns:
        text_matches.extend(re.findall(pattern, svg_content))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    all_fields = list(set(id_matches + text_matches))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –ø–æ–ª–µ–π
    field_types = {}
    for field in all_fields:
        if any(img_keyword in field.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot']):
            field_types[field] = 'image'
        else:
            field_types[field] = 'text'
    
    return {
        'fields': all_fields,
        'types': field_types,
        'count': len(all_fields),
        'has_dyno': len(all_fields) > 0
    }

def process_svg_simple(svg_content, replacements):
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –∑–∞–º–µ–Ω–æ–π dyno –ø–æ–ª–µ–π
    """
    processed_svg = svg_content
    
    for field, value in replacements.items():
        # –ó–∞–º–µ–Ω—è–µ–º –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        if field.startswith('dyno.'):
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º id
            id_pattern = f'id="{field}"'
            if id_pattern in processed_svg:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è
                if any(img_keyword in field.lower() for img_keyword in ['image', 'photo', 'picture', 'logo', 'headshot']):
                    # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ–º href
                    href_pattern = f'(<[^>]*id="{field}"[^>]*href=")[^"]*(")'
                    processed_svg = re.sub(href_pattern, f'\\1{value}\\2', processed_svg)
                else:
                    # –≠—Ç–æ —Ç–µ–∫—Å—Ç - –∑–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    text_pattern = f'(<[^>]*id="{field}"[^>]*>)[^<]*(</[^>]*>)'
                    processed_svg = re.sub(text_pattern, f'\\1{value}\\2', processed_svg)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
        text_patterns = [
            f'{{{{{field}}}}}',  # {{dyno.field}}
            f'{{{field}}}',      # {dyno.field}
        ]
        
        for pattern in text_patterns:
            processed_svg = processed_svg.replace(pattern, str(value))
    
    return processed_svg

def ensure_db_exists():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS templates (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                template_role TEXT DEFAULT 'main',
                svg_content TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                has_dyno_fields BOOLEAN DEFAULT FALSE,
                dyno_fields_info TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS carousels (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                main_template_id TEXT,
                photo_template_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (main_template_id) REFERENCES templates (id),
                FOREIGN KEY (photo_template_id) REFERENCES templates (id)
            )
        ''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã
        cursor.execute('SELECT COUNT(*) FROM templates')
        count = cursor.fetchone()[0]
        
        if count == 0:
            print("üì¶ –î–æ–±–∞–≤–ª—è—é –Ω–∞—á–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã...")
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
            initial_templates = [
                {
                    'id': 'simple-main-template',
                    'name': 'Simple Main Template',
                    'category': 'open-house',
                    'template_role': 'main',
                    'svg_content': '''<svg width="1080" height="1350" viewBox="0 0 1080 1350" xmlns="http://www.w3.org/2000/svg">
                        <rect width="1080" height="1350" fill="#4A5568"/>
                        <text x="540" y="920" text-anchor="middle" fill="white" font-family="Arial" font-size="48" id="dyno.price">$2,500,000</text>
                        <text x="540" y="980" text-anchor="middle" fill="#A0AEC0" font-family="Arial" font-size="24" id="dyno.propertyaddress">123 Main Street</text>
                        <text x="540" y="1150" text-anchor="middle" fill="#A0AEC0" font-family="Arial" font-size="28" id="dyno.name">Agent Name</text>
                        <text x="540" y="1190" text-anchor="middle" fill="#A0AEC0" font-family="Arial" font-size="18" id="dyno.phone">(555) 123-4567</text>
                    </svg>'''
                },
                {
                    'id': 'simple-photo-template',
                    'name': 'Simple Photo Template',
                    'category': 'open-house',
                    'template_role': 'photo',
                    'svg_content': '''<svg width="1080" height="1350" viewBox="0 0 1080 1350" xmlns="http://www.w3.org/2000/svg">
                        <rect width="1080" height="1350" fill="#2D3748"/>
                        <rect x="40" y="40" width="1000" height="1000" fill="#E2E8F0"/>
                        <text x="540" y="1150" text-anchor="middle" fill="white" font-family="Arial" font-size="48" id="dyno.price">$2,500,000</text>
                        <text x="540" y="1200" text-anchor="middle" fill="#A0AEC0" font-family="Arial" font-size="24" id="dyno.propertyaddress">123 Main Street</text>
                    </svg>'''
                }
            ]
            
            for template in initial_templates:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º dyno –ø–æ–ª—è
                has_dyno = has_dyno_fields_simple(template['svg_content'])
                dyno_info = extract_dyno_fields_simple(template['svg_content']) if has_dyno else None
                
                cursor.execute('''
                    INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', [
                    template['id'],
                    template['name'],
                    template['category'],
                    template['template_role'],
                    template['svg_content'],
                    has_dyno,
                    str(dyno_info) if dyno_info else None
                ])
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(initial_templates)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, category, template_role, has_dyno_fields, dyno_fields_info, created_at
            FROM templates 
            ORDER BY created_at DESC
        ''')
        
        templates = []
        for row in cursor.fetchall():
            templates.append({
                'id': row[0],
                'name': row[1],
                'category': row[2],
                'template_role': row[3],
                'has_dyno_fields': bool(row[4]),
                'dyno_fields_info': row[5],
                'created_at': row[6],
                'preview_url': f'/api/templates/{row[0]}/preview'
            })
        
        conn.close()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", 500

@app.route('/upload')
def upload_page():
    try:
        ensure_db_exists()
        return render_template('upload.html')
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

# –†–æ—É—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
@app.route('/upload-single', methods=['POST'])
def upload_single_template():
    try:
        ensure_db_exists()
        
        if 'template' not in request.files:
            return jsonify({'error': '–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['template']
        name = request.form.get('name', 'Unnamed Template')
        category = request.form.get('category', 'other')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dyno –ø–æ–ª—è
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_info = extract_dyno_fields_simple(svg_content) if has_dyno else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        template_id = str(uuid.uuid4())
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, 'main', svg_content, has_dyno, str(dyno_info) if dyno_info else None])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'template_id': template_id,
            'has_dyno': has_dyno,
            'dyno_fields': dyno_info.get('fields', []) if dyno_info else [],
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

@app.route('/upload-carousel', methods=['POST'])
def upload_carousel_templates():
    try:
        ensure_db_exists()
        
        if 'main_template' not in request.files or 'photo_template' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main_template –∏ photo_template'}), 400
        
        main_file = request.files['main_template']
        photo_file = request.files['photo_template']
        name = request.form.get('name', 'Unnamed Carousel')
        category = request.form.get('category', 'other')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG —Ñ–∞–π–ª–æ–≤
        main_svg_content = main_file.read().decode('utf-8')
        photo_svg_content = photo_file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dyno –ø–æ–ª—è –≤ –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö
        main_has_dyno = has_dyno_fields_simple(main_svg_content)
        photo_has_dyno = has_dyno_fields_simple(photo_svg_content)
        
        main_dyno_info = extract_dyno_fields_simple(main_svg_content) if main_has_dyno else None
        photo_dyno_info = extract_dyno_fields_simple(photo_svg_content) if photo_has_dyno else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main —à–∞–±–ª–æ–Ω
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, 'main', main_svg_content, main_has_dyno, str(main_dyno_info) if main_dyno_info else None])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo —à–∞–±–ª–æ–Ω
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, has_dyno_fields, dyno_fields_info)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, 'photo', photo_svg_content, photo_has_dyno, str(photo_dyno_info) if photo_dyno_info else None])
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_has_dyno': main_has_dyno,
            'photo_has_dyno': photo_has_dyno,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API endpoints
@app.route('/api/templates/all-previews')
def get_all_templates():
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, category, template_role, has_dyno_fields, dyno_fields_info, created_at
            FROM templates 
            ORDER BY created_at DESC
        ''')
        
        templates = []
        for row in cursor.fetchall():
            templates.append({
                'id': row[0],
                'name': row[1],
                'category': row[2],
                'template_role': row[3],
                'has_dyno_fields': bool(row[4]),
                'dyno_fields_info': row[5],
                'created_at': row[6],
                'preview_url': f'/api/templates/{row[0]}/preview'
            })
        
        conn.close()
        return jsonify({'templates': templates})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', (template_id,))
        result = cursor.fetchone()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        svg_content = result[0]
        conn.close()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–≤—å—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SVG –∫–∞–∫ base64
        svg_base64 = base64.b64encode(svg_content.encode('utf-8')).decode('utf-8')
        
        return jsonify({
            'preview_base64': f'data:image/svg+xml;base64,{svg_base64}',
            'template_id': template_id
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/image/generate', methods=['POST'])
def generate_single_image():
    try:
        ensure_db_exists()
        data = request.get_json()
        
        if not data or 'template_id' not in data:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        template_id = data['template_id']
        replacements = data.get('replacements', {})
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content, name FROM templates WHERE id = ?', (template_id,))
        result = cursor.fetchone()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        svg_content, template_name = result
        conn.close()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏
        processed_svg = process_svg_simple(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        output_filename = f"single_{template_id}_{uuid.uuid4().hex[:8]}.svg"
        output_path = os.path.join(OUTPUT_DIR, 'single', output_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ SVG (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = f"{request.host_url}output/single/{output_filename}"
        
        return jsonify({
            'success': True,
            'image_url': public_url,
            'template_id': template_id,
            'template_name': template_name,
            'replacements_applied': len(replacements),
            'format': 'svg'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/carousel/create-and-generate', methods=['POST'])
def create_and_generate_carousel():
    try:
        ensure_db_exists()
        data = request.get_json()
        
        if not data or 'main_template_id' not in data or 'photo_template_id' not in data:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        main_template_id = data['main_template_id']
        photo_template_id = data['photo_template_id']
        replacements = data.get('replacements', {})
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT svg_content, name FROM templates WHERE id = ?', (main_template_id,))
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT svg_content, name FROM templates WHERE id = ?', (photo_template_id,))
        photo_result = cursor.fetchone()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_svg_content, main_name = main_result
        photo_svg_content, photo_name = photo_result
        conn.close()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏
        processed_main_svg = process_svg_simple(main_svg_content, replacements)
        processed_photo_svg = process_svg_simple(photo_svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        carousel_id = str(uuid.uuid4())
        main_filename = f"carousel_{carousel_id}_main.svg"
        photo_filename = f"carousel_{carousel_id}_photo.svg"
        
        main_output_path = os.path.join(OUTPUT_DIR, 'carousel', main_filename)
        photo_output_path = os.path.join(OUTPUT_DIR, 'carousel', photo_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ SVG
        with open(main_output_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_output_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ URL
        main_public_url = f"{request.host_url}output/carousel/{main_filename}"
        photo_public_url = f"{request.host_url}output/carousel/{photo_filename}"
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'images': [
                {
                    'type': 'main',
                    'url': main_public_url,
                    'template_id': main_template_id,
                    'template_name': main_name,
                    'format': 'svg'
                },
                {
                    'type': 'photo',
                    'url': photo_public_url,
                    'template_id': photo_template_id,
                    'template_name': photo_name,
                    'format': 'svg'
                }
            ],
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/health')
def health_check():
    try:
        ensure_db_exists()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM templates')
        template_count = cursor.fetchone()[0]
        conn.close()
        
        return jsonify({
            'status': 'healthy',
            'database': 'healthy',
            'version': '4.0-render-compatible',
            'template_count': template_count,
            'cairo_available': CAIRO_AVAILABLE,
            'pillow_available': PILLOW_AVAILABLE,
            'features': [
                'Single image generation (SVG)',
                'Carousel generation (SVG)', 
                'Simple dyno field replacement',
                'Template display fixed',
                'Render.com compatible'
            ]
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output_file(filename):
    return send_from_directory(OUTPUT_DIR, filename)

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Render-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ SVG Template API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    ensure_db_exists()
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

