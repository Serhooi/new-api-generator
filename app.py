"""
–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø API –°–û –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò + –ò–î–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –®–†–ò–§–¢–û–í –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –•–ï–î–®–û–¢–û–í
================================================================

–í–µ—Ä—Å–∏—è 11.0 - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ê–ë–°–û–õ–Æ–¢–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤ Montserrat, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
–∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
"""

import os
import sqlite3
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import xml.etree.ElementTree as ET
import re
import requests
import base64
import tempfile
import io
import html
# import cairosvg  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Cairo
from PIL import Image
from supabase import create_client, Client
# from preview_system import generate_svg_preview, create_preview_with_data, cleanup_old_previews, replace_image_in_svg  # –û—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ Cairo

# –†–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ preview_system –±–µ–∑ Cairo
def generate_svg_preview(svg_content, width=400, height=600):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –ø—Ä–µ–≤—å—é"""
    try:
        import re
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG
        svg_with_size = re.sub(
            r'<svg([^>]*?)width="[^"]*"([^>]*?)height="[^"]*"([^>]*?)>',
            f'<svg\\1width="{width}"\\2height="{height}"\\3>',
            svg_content
        )
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–∑–º–µ—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º viewBox
        if 'width=' not in svg_with_size:
            svg_with_size = re.sub(
                r'<svg([^>]*?)>',
                f'<svg\\1 width="{width}" height="{height}" viewBox="0 0 1080 1350">',
                svg_with_size
            )
        
        return svg_with_size
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SVG –ø—Ä–µ–≤—å—é: {e}")
        return svg_content

def create_preview_with_data(svg_content, data, width=400, height=600):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏"""
    return generate_svg_preview(svg_content, width, height)

def cleanup_old_previews():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–≤—å—é"""
    return True

def replace_image_in_svg(svg_content, field_name, image_url):
    """–ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG"""
    try:
        from preview_system import replace_image_in_svg as original_replace
        return original_replace(svg_content, field_name, image_url)
    except ImportError:
        return svg_content

app = Flask(__name__)
CORS(app, origins="*")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (20MB)
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.environ.get('SUPABASE_URL', 'https://vahgmyuowsilbxqdjjii.supabase.co')
SUPABASE_KEY = os.environ.get('SUPABASE_SERVICE_ROLE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZhaGdteXVvd3NpbGJ4cWRqamlpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTI1MDIxOSwiZXhwIjoyMDYwODI2MjE5fQ.7pfeWV0cnKALRb1IGYrhUQL68ggywFG6MetKc8DPvbE')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase = None
if SUPABASE_URL and SUPABASE_KEY:
    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print(f"‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {SUPABASE_URL}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
        supabase = None
else:
    print("‚ÑπÔ∏è Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)
os.makedirs('output/previews', exist_ok=True)

field_mapping = {
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è main template
    'dyno.agentName': 'dyno.name',
    'dyno.agentPhone': 'dyno.phone',
    'dyno.agentEmail': 'dyno.email',
    'dyno.agentPhoto': 'dyno.agentheadshot',
    'dyno.propertyAddress': 'dyno.propertyaddress',
    'dyno.propertyfeatures': 'dyno.propertyfeatures',
    
    # –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'dyno.agentname': 'dyno.name',
    'dyno.agentemail': 'dyno.email', 
    'dyno.agentphone': 'dyno.phone',
    'dyno.agentphoto': 'dyno.agentheadshot',
    'dyno.propertyaddress': 'dyno.propertyaddress',
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    'dyno.propertyimage1': 'dyno.propertyimage',  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ main —Å–ª–∞–π–¥–µ
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è photo template
photo_field_mapping = {
    'dyno.propertyimage': 'dyno.propertyimage2',  # –í photo template –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è propertyimage2
    'dyno.agentphoto': 'dyno.agentheadshot'       # –í photo template –º–æ–∂–µ—Ç –±—ã—Ç—å agentheadshot
}

def has_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG
    """
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG
    """
    fields = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ dyno –ø–æ–ª–µ–π
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG - –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∫–ª—é—á–∞—è &
    """
    if not text:
        return text
    
    # –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è XML/SVG
    text = str(text)
    text = text.replace('&', '&amp;')  # –í–ê–ñ–ù–û: & –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def generate_svg_preview(svg_content, template_id, width=400, height=300):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –ø—Ä–µ–≤—å—é –∏–∑ SVG —à–∞–±–ª–æ–Ω–∞
    """
    try:
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {template_id}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        preview_dir = os.path.join(OUTPUT_DIR, 'previews')
        os.makedirs(preview_dir, exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PNG –ø—Ä–µ–≤—å—é
        png_filename = f"{template_id}_preview.png"
        png_path = os.path.join(preview_dir, png_filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é SVG —Å –∑–∞–º–µ–Ω–æ–π dyno –ø–æ–ª–µ–π –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
        preview_svg = create_preview_svg(svg_content)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Playwright –¥–ª—è PNG –ø—Ä–µ–≤—å—é
        try:
            from png_preview_with_playwright import svg_to_png_with_playwright
            success = svg_to_png_with_playwright(preview_svg, png_path, width, height)
            if not success:
                raise Exception("Playwright failed")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}, —Å–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            from PIL import Image, ImageDraw
            img = Image.new('RGB', (width, height), color='white')
            draw = ImageDraw.Draw(img)
            draw.text((width//2, height//2), 'Preview', fill='black', anchor='mm')
            img.save(png_path)
        
        print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {png_filename}")
        
        return {
            'success': True,
            'filename': png_filename,
            'url': f'/output/previews/{png_filename}',
            'path': png_path
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}")
        return {
            'success': False,
            'error': str(e)
        }

def create_preview_svg(svg_content):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é SVG –∑–∞–º–µ–Ω—è—è dyno –ø–æ–ª—è –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    """
    preview_svg = svg_content
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–≤—å—é
    preview_data = {
        'dyno.agentName': 'John Smith',
        'dyno.propertyAddress': '123 Main Street, Beverly Hills, CA 90210',
        'dyno.price': '$450,000',
        'dyno.bedrooms': '3',
        'dyno.bathrooms': '2',
        'dyno.sqft': '1,850',
        'dyno.agentPhone': '(555) 123-4567',
        'dyno.agentEmail': 'john@realty.com',
        'dyno.openHouseDate': 'Saturday, June 8th',
        'dyno.openHouseTime': '2:00 PM - 4:00 PM',
        'dyno.agentPhoto': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
        'dyno.propertyImage': 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop',
        'dyno.propertyimage2': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300&fit=crop',
        'dyno.propertyimage3': 'https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=400&h=300&fit=crop',
        'dyno.propertyimage4': 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=400&h=300&fit=crop',
        'dyno.propertyimage5': 'https://images.unsplash.com/photo-1560448075-bb485b067938?w=400&h=300&fit=crop',
        'dyno.companyLogo': 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200&h=100&fit=crop'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª—è –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
    for field, value in preview_data.items():
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã dyno –ø–æ–ª–µ–π
        patterns = [
            f'{{{{{field}}}}}',           # {{dyno.field}}
            f'{{{field}}}',               # {dyno.field}
            f'>{field}<',                 # >dyno.field<
        ]
        
        for pattern in patterns:
            if pattern.startswith('>') and pattern.endswith('<'):
                preview_svg = preview_svg.replace(pattern, f'>{value}<')
            else:
                preview_svg = preview_svg.replace(pattern, value)
    
    return preview_svg

def replace_headshot_url(svg: str, safe_url: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ URL –≤ headshot - –º–µ–Ω—è–µ—Ç –¢–û–õ–¨–ö–û href/xlink:href, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    """
    # –ù–∞—Ö–æ–¥–∏–º –¢–û–õ–¨–ö–û —Ç–µ–≥ <image> –∏–ª–∏ <use> —Å –Ω—É–∂–Ω—ã–º id (–ø–æ—Ä—è–¥–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ª—é–±–æ–π)
    tag_pattern = re.compile(
        r'<(?:image|use)\b(?:(?!>).)*\bid\s*=\s*(["\'])dyno\.agentheadshot\1(?:(?!>).)*>',
        flags=re.DOTALL | re.IGNORECASE
    )

    # –í–Ω—É—Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –º–µ–Ω—è–µ–º href/xlink:href, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ
    def _href_only_rewrite(m: re.Match) -> str:
        tag = m.group(0)

        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ href=... (–µ—Å–ª–∏ –µ—Å—Ç—å)
        tag = re.sub(
            r'(?<!:)\bhref\s*=\s*(["\'])(.*?)\1',
            lambda mm: f'href={mm.group(1)}{safe_url}{mm.group(1)}',
            tag,
            flags=re.IGNORECASE
        )

        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ xlink:href=... (–µ—Å–ª–∏ –µ—Å—Ç—å)
        tag = re.sub(
            r'\bxlink:href\s*=\s*(["\'])(.*?)\1',
            lambda mm: f'xlink:href={mm.group(1)}{safe_url}{mm.group(1)}',
            tag,
            flags=re.IGNORECASE
        )

        return tag

    return tag_pattern.sub(_href_only_rewrite, svg)

def process_svg_font_perfect(svg_content, replacements):
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π vs –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
    - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π aspect ratio –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ use —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ pattern –±–ª–æ–∫–∞—Ö
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ Inter –∏ Montserrat
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    - –ü–û–õ–ù–û–ï —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è URL –∏ —Ç–µ–∫—Å—Ç–æ–≤
    - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤
    """
    print("üé® –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò SVG (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫—Ä—É–≥–ª—ã—Ö —Ö–µ–¥—à–æ—Ç–æ–≤)")
    
    processed_svg = svg_content
    
    def determine_element_shape(svg_content, pattern_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)"""
        
        # –ò—â–µ–º clipPath —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å pattern
        clip_pattern = f'<clipPath[^>]*id="[^"]*{re.escape(pattern_id)}[^"]*"[^>]*>(.*?)</clipPath>'
        clip_match = re.search(clip_pattern, svg_content, re.DOTALL)
        
        if clip_match:
            clip_content = clip_match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ circle –∏–ª–∏ ellipse
            if '<circle' in clip_content or '<ellipse' in clip_content:
                return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rect —Å rx/ry (—Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã)
            rect_pattern = r'<rect[^>]*rx="([^"]*)"[^>]*ry="([^"]*)"[^>]*>'
            rect_match = re.search(rect_pattern, clip_content)
            if rect_match:
                rx = float(rect_match.group(1) or 0)
                ry = float(rect_match.group(2) or 0)
                
                # –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–π, —Å—á–∏—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–º
                if rx > 20 or ry > 20:
                    return 'circular'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º path —Å –∫—Ä—É–≥–ª—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
            if '<path' in clip_content:
                path_pattern = r'd="([^"]*)"'
                path_match = re.search(path_pattern, clip_content)
                if path_match:
                    path_data = path_match.group(1)
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –¥—É–≥ (A) –∏–ª–∏ –º–Ω–æ–≥–æ –∫—Ä–∏–≤—ã—Ö (C)
                    if 'A' in path_data or path_data.count('C') > 4:
                        return 'circular'
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ pattern
        pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*width="([^"]*)"[^>]*height="([^"]*)"[^>]*>'
        pattern_match = re.search(pattern_pattern, svg_content)
        
        if pattern_match:
            width = float(pattern_match.group(1) or 0)
            height = float(pattern_match.group(2) or 0)
            
            # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫—Ä—É–≥–ª—ã–π
            if abs(width - height) < 5:
                return 'circular'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
        return 'rectangular'
    
    def determine_image_type(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª—è"""
        field_lower = dyno_field.lower()
        
        if 'headshot' in field_lower or 'agent' in field_lower or 'profile' in field_lower or 'agentphoto' in field_lower:
            return 'headshot'
        elif 'propertyimage' in field_lower or 'property' in field_lower:
            return 'property'
        elif 'logo' in field_lower or 'company' in field_lower:
            return 'logo'
        else:
            return 'general'
    
    def get_aspect_ratio_for_image(image_type, element_shape):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio –¥–ª—è —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image_type == 'headshot':
            # –î–ª—è headshot - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë –ª–∏—Ü–æ, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            return 'xMidYMid meet'
        elif image_type == 'property':
            # –î–ª—è property images - –∑–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å –±–ª–æ–∫, –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            return 'xMidYMid slice'
        elif image_type == 'logo':
            # –î–ª—è –ª–æ–≥–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            return 'xMidYMid meet'
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            return 'xMidYMid meet'
    
    def is_image_field(dyno_field):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        field_lower = dyno_field.lower()
        return any(keyword in field_lower for keyword in ['image', 'photo', 'headshot', 'logo', 'picture'])
    
    def find_headshot_field(replacements):
        """–ò—â–µ—Ç –ø–æ–ª–µ headshot –≤ replacements (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)"""
        headshot_fields = ['dyno.agentheadshot', 'dyno.agentphoto', 'dyno.headshot', 'dyno.agent', 'dyno.photo']
        
        for field in headshot_fields:
            if field in replacements:
                return field
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for field in replacements.keys():
            if any(keyword in field.lower() for keyword in ['headshot', 'agent', 'photo', 'profile']):
                return field
        
        return None
    
    def is_address_field(dyno_field):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–æ–º"""
        field_lower = dyno_field.lower()
        address_keywords = ['address', 'location', 'addr', 'street', 'propertyaddress']
        
        for keyword in address_keywords:
            if keyword in field_lower:
                return True
        
        return False
    
    def wrap_address_text(address_text, max_length=35):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ —Å—Ç—Ä–æ–∫–∏"""
        if len(address_text) <= max_length:
            return address_text, ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
        parts = address_text.split(', ')
        if len(parts) >= 2:
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ + —É–ª–∏—Ü–∞
            line1 = parts[0]
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            line2 = ', '.join(parts[1:])
            return line1, line2
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç—ã—Ö, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        words = address_text.split()
        if len(words) <= 3:
            return address_text, ""
        
        # –ò—â–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
        mid = len(words) // 2
        line1 = ' '.join(words[:mid])
        line2 = ' '.join(words[mid:])
        return line1, line2
    
    def wrap_address_text(address_text, max_length=35):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–∞ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        """
        if not address_text or len(address_text) <= max_length:
            return address_text, ""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        words = address_text.split()
        
        if len(words) <= 1:
            return address_text, ""
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        best_break = len(words) // 2
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
        for i, word in enumerate(words):
            if ',' in word and i > 0 and i < len(words) - 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                first_part = ' '.join(words[:i+1])
                if len(first_part) >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    best_break = i + 1
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø—è—Ç—É—é, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if best_break == len(words) // 2:
            for i, word in enumerate(words):
                if i > 0 and i < len(words) - 1:
                    first_part = ' '.join(words[:i+1])
                    if 20 <= len(first_part) <= max_length:
                        best_break = i + 1
                        break
        
        first_line = ' '.join(words[:best_break])
        second_line = ' '.join(words[best_break:])
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(second_line) > max_length:
            return address_text, ""
        
        return first_line, second_line
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    successful_replacements = 0
    total_fields = len(replacements)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        original_field = dyno_field
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
        alternative_field = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if dyno_field in field_mapping:
            alternative_field = field_mapping[dyno_field]
            print(f"   üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è: {alternative_field}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            dyno_field_lower = dyno_field.lower()
            for key, value in field_mapping.items():
                if key.lower() == dyno_field_lower:
                    alternative_field = value
                    print(f"   üîÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {dyno_field} ‚Üí {alternative_field}")
                    break
        
        print(f"   üîç –ü–æ–ª–µ: {dyno_field}, –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {alternative_field}, –ó–∞–º–µ–Ω–∞: {replacement}")
        
        if is_image_field(dyno_field):
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {str(replacement)[:50]}...")
            
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
            original_svg = processed_svg
            processed_svg = replace_image_in_svg(processed_svg, dyno_field, replacement)
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
            if processed_svg == original_svg and alternative_field:
                print(f"üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ: {alternative_field}")
                processed_svg = replace_image_in_svg(processed_svg, alternative_field, replacement)
                if processed_svg != original_svg:
                    dyno_field = alternative_field  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ª–æ–≥–æ–≤
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã
            if processed_svg != original_svg:
                successful_replacements += 1
                print(f"‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
            else:
                print(f"‚ùå –ü–æ–ª–µ {dyno_field} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å")
        else:
            # –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ü–û–õ–ï–ô
            safe_replacement = safe_escape_for_svg(str(replacement))
            
            if is_address_field(dyno_field):
                print(f"   üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º: {dyno_field}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
                first_line, second_line = wrap_address_text(str(replacement))
                
                print(f"      üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {first_line}")
                print(f"      üìù –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: {second_line}")
                
                # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                if not re.search(element_pattern, processed_svg) and alternative_field:
                    element_pattern = f'<text[^>]*id="{re.escape(alternative_field)}"[^>]*>(.*?)</text>'
                    if re.search(element_pattern, processed_svg):
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {alternative_field}")
                        dyno_field = alternative_field
                
                def replace_address_element(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tspan
                    tspan_pattern = r'<tspan[^>]*x="([^"]*)"[^>]*y="([^"]*)"[^>]*>([^<]*)</tspan>'
                    tspan_match = re.search(tspan_pattern, element_content)
                    
                    if tspan_match:
                        x_pos = tspan_match.group(1)
                        y_pos = tspan_match.group(2)
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–≤—É–º—è tspan —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                        if second_line:
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                            try:
                                y_float = float(y_pos)
                                second_y = y_float + 35
                            except:
                                second_y = f"{y_pos}+35"
                            
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan><tspan x="{x_pos}" y="{second_y}">{safe_escape_for_svg(second_line)}</tspan>'
                        else:
                            new_content = f'<tspan x="{x_pos}" y="{y_pos}">{safe_escape_for_svg(first_line)}</tspan>'
                        
                        return full_element.replace(element_content, new_content)
                    else:
                        return full_element
                
                new_svg = re.sub(element_pattern, replace_address_element, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –ê–¥—Ä–µ—Å {dyno_field} –∑–∞–º–µ–Ω–µ–Ω —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –ê–¥—Ä–µ—Å {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {dyno_field}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id="dyno.field"
                element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                if not re.search(element_pattern, processed_svg) and alternative_field:
                    element_pattern = f'<text[^>]*id="{re.escape(alternative_field)}"[^>]*>(.*?)</text>'
                    if re.search(element_pattern, processed_svg):
                        print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {alternative_field}")
                        dyno_field = alternative_field
                
                def replace_element_content(match):
                    full_element = match.group(0)
                    element_content = match.group(1)
                    
                    print(f"      üìù –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {dyno_field}")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                    def replace_tspan_content(tspan_match):
                        opening_tag = tspan_match.group(1)  # <tspan ...>
                        old_content = tspan_match.group(2)  # —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        closing_tag = tspan_match.group(3)  # </tspan>
                        
                        print(f"         üéØ –ó–∞–º–µ–Ω—è—é: '{old_content}' ‚Üí '{safe_replacement}'")
                        
                        return opening_tag + safe_replacement + closing_tag
                    
                    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ tspan
                    tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
                    new_content = re.sub(tspan_pattern, replace_tspan_content, element_content, count=1)
                    
                    print(f"      ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    return full_element.replace(element_content, new_content)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
                new_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
                
                if new_svg != processed_svg:
                    processed_svg = new_svg
                    print(f"      ‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
                    successful_replacements += 1
                else:
                    print(f"      ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å id='{dyno_field}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–û–•–†–ê–ù–Ø–ï–ú –®–†–ò–§–¢–´ INTER –ò MONTSERRAT
    print("\nüî§ –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ä–∏—Ñ—Ç—ã Inter –∏ Montserrat...")
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú GOOGLE FONTS –ò–ú–ü–û–†–¢ –î–õ–Ø INTER –ò MONTSERRAT
    print("üì• –î–æ–±–∞–≤–ª—è—é Google Fonts –∏–º–ø–æ—Ä—Ç –¥–ª—è Inter –∏ Montserrat...")
    
    # –ò—â–µ–º —Ç–µ–≥ <defs> –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if '<defs>' in processed_svg:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π <defs>
        defs_pattern = r'(<defs>)'
        font_style = r'\1\n<style>@import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap");</style>'
        processed_svg = re.sub(defs_pattern, font_style, processed_svg)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π <defs> –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ <svg>
        svg_pattern = r'(<svg[^>]*>)'
        font_defs = r'\1\n<defs>\n<style>@import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap");</style>\n</defs>'
        processed_svg = re.sub(svg_pattern, font_defs, processed_svg)
    
    print("‚úÖ Google Fonts –∏–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ï–≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ê–ú–ü–ï–†–°–ê–ù–î–´
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –≤ SVG...")
    
    # –ò—â–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –≤–Ω–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    unescaped_ampersands = re.findall(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', processed_svg)
    
    if unescaped_ampersands:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(unescaped_ampersands)} –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–≤, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
        processed_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', processed_svg)
        print("‚úÖ –í—Å–µ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        print("‚úÖ –ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {successful_replacements}/{total_fields} –ø–æ–ª–µ–π –∑–∞–º–µ–Ω–µ–Ω–æ")
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    return processed_svg

def create_dynamic_template(template_id, template_role):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–∞ –ª–µ—Ç—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
    cursor.execute('SELECT id FROM templates WHERE id = ?', (template_id,))
    if cursor.fetchone():
        conn.close()
        return True
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    if template_role == 'main':
        content = '''<svg width="1200" height="800" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="white"/>
            <text x="600" y="200" text-anchor="middle" font-size="48" fill="black">Dynamic Main Template</text>
            <text id="dyno.agentName" x="600" y="300" text-anchor="middle" font-size="24" fill="blue">Agent: {dyno.agentName}</text>
            <text id="dyno.propertyAddress" x="600" y="350" text-anchor="middle" font-size="20" fill="green">Address: {dyno.propertyAddress}</text>
            <text id="dyno.price" x="600" y="400" text-anchor="middle" font-size="32" fill="red">Price: {dyno.price}</text>
            <text id="dyno.agentPhone" x="600" y="450" text-anchor="middle" font-size="18" fill="purple">Phone: {dyno.agentPhone}</text>
            <text id="dyno.agentEmail" x="600" y="500" text-anchor="middle" font-size="16" fill="orange">Email: {dyno.agentEmail}</text>
            <text id="dyno.bedrooms" x="600" y="550" text-anchor="middle" font-size="20" fill="brown">Bedrooms: {dyno.bedrooms}</text>
            <text id="dyno.bathrooms" x="600" y="580" text-anchor="middle" font-size="20" fill="brown">Bathrooms: {dyno.bathrooms}</text>
            <text id="dyno.date" x="600" y="620" text-anchor="middle" font-size="18" fill="darkgreen">Date: {dyno.date}</text>
            <text id="dyno.time" x="600" y="650" text-anchor="middle" font-size="18" fill="darkgreen">Time: {dyno.time}</text>
            <text id="dyno.propertyfeatures" x="600" y="680" text-anchor="middle" font-size="14" fill="gray">Features: {dyno.propertyfeatures}</text>
        </svg>'''
        name = f"Dynamic Main Template ({template_id[:8]})"
    else:
        content = '''<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="lightblue"/>
            <text x="400" y="200" text-anchor="middle" font-size="36" fill="black">Dynamic Photo Template</text>
            <rect id="dyno.propertyimage1" x="100" y="250" width="600" height="300" fill="url(#property_pattern)"/>
            <defs>
                <pattern id="property_pattern" patternUnits="objectBoundingBox" width="1" height="1">
                    <image id="property_image" href="https://via.placeholder.com/600x300/cccccc/666666?text=Property+Image" preserveAspectRatio="xMidYMid slice"/>
                </pattern>
            </defs>
        </svg>'''
        name = f"Dynamic Photo Template ({template_id[:8]})"
    
    cursor.execute('''
        INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (template_id, name, 'dynamic', template_role, content, 'dyno.agentName,dyno.agentPhone,dyno.agentEmail,dyno.propertyAddress,dyno.price,dyno.bedrooms,dyno.bathrooms,dyno.date,dyno.time,dyno.propertyfeatures'))
    
    conn.commit()
    conn.close()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω: {template_id}")
    return True

def ensure_db_exists():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É templates
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT NOT NULL,
            template_role TEXT NOT NULL,
            svg_content TEXT NOT NULL,
            dyno_fields TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É carousels
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carousels (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            main_template_id TEXT NOT NULL,
            photo_template_id TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_template_id) REFERENCES templates (id),
            FOREIGN KEY (photo_template_id) REFERENCES templates (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def upload_to_supabase_storage(file_content, filename, folder="generated"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage
    """
    if not supabase:
        print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = f"{folder}/{filename}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
        if filename.lower().endswith('.jpg') or filename.lower().endswith('.jpeg'):
            # JPG —Ñ–∞–π–ª - –ø–µ—Ä–µ–¥–∞–µ–º bytes –∫–∞–∫ –µ—Å—Ç—å
            file_data = file_content
            content_type = "image/jpeg"
        elif filename.lower().endswith('.png'):
            # PNG —Ñ–∞–π–ª - –ø–µ—Ä–µ–¥–∞–µ–º bytes –∫–∞–∫ –µ—Å—Ç—å
            file_data = file_content
            content_type = "image/png"
        else:
            # SVG –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –∫–æ–¥–∏—Ä—É–µ–º –≤ UTF-8
            file_data = file_content.encode('utf-8') if isinstance(file_content, str) else file_content
            content_type = "image/svg+xml"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage
        result = supabase.storage.from_("carousel-assets").upload(
            path=file_path,
            file=file_data,
            file_options={"content-type": content_type}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = supabase.storage.from_("carousel-assets").get_public_url(file_path)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ
        if public_url and public_url.endswith('?'):
            public_url = public_url.rstrip('?')
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {public_url}")
        return public_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
        return None

def save_file_locally_or_supabase(content, filename, folder="carousel"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) –∏–ª–∏ –≤ Supabase (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render –∏–ª–∏ –µ—Å—Ç—å Supabase
    is_render = os.environ.get('RENDER', False) or bool(os.environ.get('SUPABASE_URL'))
    
    if is_render and supabase:
        # –ù–∞ Render - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
        return upload_to_supabase_storage(content, filename, folder)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        local_path = os.path.join(OUTPUT_DIR, folder, filename)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            mode = 'wb' if isinstance(content, bytes) else 'w'
            encoding = None if isinstance(content, bytes) else 'utf-8'
            
            with open(local_path, mode, encoding=encoding) as f:
                f.write(content)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
            return f"/output/{folder}/{filename}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
            return None

def create_app():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–∞ –¥–ª—è Gunicorn)
    """
    ensure_db_exists()
    return app

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/templates')
def templates_page():
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id, name, category, template_role, created_at FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        templates = []
        for template in templates_data:
            templates.append({
                'id': template[0],
                'name': template[1],
                'category': template[2],
                'template_role': template[3],
                'created_at': template[4]
            })
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ HTML —à–∞–±–ª–æ–Ω
        return render_template('templates.html', templates=templates)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ templates_page: {str(e)}")
        return render_template('templates.html', templates=[])

@app.route('/delete/<template_id>', methods=['POST'])
def delete_template_form(template_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (–¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)"""
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT name FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return f"<script>alert('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'); window.location.href='/templates';</script>"
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', [template_id])
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É: {template_name} (ID: {template_id})")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        return f"<script>alert('–®–∞–±–ª–æ–Ω \"{template_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'); window.location.href='/templates';</script>"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É: {e}")
        return f"<script>alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'); window.location.href='/templates';</script>"

@app.route('/upload')
def upload_page():
    return render_template('upload.html')

@app.route('/preview')
def preview_page():
    return render_template('preview.html')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø—Ä–µ–≤—å—é
@app.route('/output/template_previews/<filename>')
def serve_template_previews(filename):
    preview_dir = os.path.join(OUTPUT_DIR, 'template_previews')
    return send_from_directory(preview_dir, filename)

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
@app.route('/api/upload-single', methods=['POST'])
def upload_single_template():
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–≤—å—é
        from manual_preview_system import save_preview_image, validate_preview_image, create_default_preview
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã (svg_file)
        if 'svg_file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['svg_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        template_role = request.form.get('template_role', '')
        
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        svg_content = file.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dyno –ø–æ–ª–µ–π
        has_dyno = has_dyno_fields_simple(svg_content)
        dyno_fields = extract_dyno_fields_simple(svg_content) if has_dyno else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        template_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [template_id, name, category, template_role, svg_content, ','.join(dyno_fields)])
        
        conn.commit()
        conn.close()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        preview_result = None
        if 'preview_file' in request.files and request.files['preview_file'].filename:
            preview_file = request.files['preview_file']
            print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é: {preview_file.filename}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
            validation = validate_preview_image(preview_file)
            if validation['valid']:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é
                preview_result = save_preview_image(preview_file, template_id)
                if preview_result['success']:
                    print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {preview_result['error']}")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–µ–≤—å—é –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {validation['error']}")
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if not preview_result or not preview_result['success']:
            print(f"üé® –°–æ–∑–¥–∞—é –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é –¥–ª—è {template_id}")
            preview_result = create_default_preview(name, template_id)
        
        response_data = {
            'success': True,
            'template_id': template_id,
            'has_dyno_fields': has_dyno,
            'dyno_fields': dyno_fields,
            'message': f'–®–∞–±–ª–æ–Ω "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é
        if preview_result and preview_result['success']:
            response_data['preview_url'] = preview_result['url']
            response_data['preview_uploaded'] = not preview_result.get('is_default', False)
            if preview_result.get('is_default'):
                response_data['preview_message'] = '–°–æ–∑–¥–∞–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
            else:
                response_data['preview_message'] = '–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!'
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/upload-carousel', methods=['POST'])
def upload_carousel():
    try:
        if 'main_file' not in request.files or 'photo_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –æ–±–∞ —Ñ–∞–π–ª–∞: main –∏ photo'}), 400
        
        main_file = request.files['main_file']
        photo_file = request.files['photo_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        
        if main_file.filename == '' or photo_file.filename == '':
            return jsonify({'error': '–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        if not (allowed_file(main_file.filename) and allowed_file(photo_file.filename)):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        main_svg = main_file.read().decode('utf-8')
        photo_svg = photo_file.read().decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è
        main_dyno_info = {
            'has_dyno': has_dyno_fields_simple(main_svg),
            'fields': extract_dyno_fields_simple(main_svg)
        }
        
        photo_dyno_info = {
            'has_dyno': has_dyno_fields_simple(photo_svg),
            'fields': extract_dyno_fields_simple(photo_svg)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        main_template_id = str(uuid.uuid4())
        photo_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è main —à–∞–±–ª–æ–Ω–∞: {name} - Main")
        main_preview = generate_svg_preview(main_svg, main_template_id)
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è photo —à–∞–±–ª–æ–Ω–∞: {name} - Photo")
        photo_preview = generate_svg_preview(photo_svg, photo_template_id)
        
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é
        if main_preview['success']:
            response_data['main_preview_url'] = main_preview['url']
        if photo_preview['success']:
            response_data['photo_preview_url'] = photo_preview['url']
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ photo —Å–ª–∞–π–¥–∞–º–∏
@app.route('/api/upload-carousel-multi', methods=['POST'])
def upload_carousel_multi():
    try:
        if 'main_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º main —Ñ–∞–π–ª'}), 400
        
        main_file = request.files['main_file']
        name = request.form.get('name', '')
        category = request.form.get('category', '')
        photo_count = int(request.form.get('photo_count', 1))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ photo —Å–ª–∞–π–¥–æ–≤
        
        if main_file.filename == '':
            return jsonify({'error': 'Main —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(main_file.filename):
            return jsonify({'error': '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ photo —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        photo_files = []
        for i in range(1, photo_count + 1):
            photo_file_key = f'photo_file_{i}'
            if photo_file_key not in request.files:
                return jsonify({'error': f'–ù–µ–æ–±—Ö–æ–¥–∏–º photo —Ñ–∞–π–ª {i}'}), 400
            
            photo_file = request.files[photo_file_key]
            if photo_file.filename == '':
                return jsonify({'error': f'Photo —Ñ–∞–π–ª {i} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω'}), 400
            
            if not allowed_file(photo_file.filename):
                return jsonify({'error': f'Photo —Ñ–∞–π–ª {i}: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SVG —Ñ–∞–π–ª—ã'}), 400
            
            photo_files.append(photo_file)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ main —Ñ–∞–π–ª–∞
        main_svg = main_file.read().decode('utf-8')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è main
        main_dyno_info = {
            'has_dyno': has_dyno_fields_simple(main_svg),
            'fields': extract_dyno_fields_simple(main_svg)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        main_template_id = str(uuid.uuid4())
        carousel_id = str(uuid.uuid4())
        photo_template_ids = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ photo —à–∞–±–ª–æ–Ω—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for i, photo_file in enumerate(photo_files):
            photo_template_id = str(uuid.uuid4())
            photo_template_ids.append(photo_template_id)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ photo —Ñ–∞–π–ª–∞
            photo_svg = photo_file.read().decode('utf-8')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º dyno –ø–æ–ª—è photo
            photo_dyno_info = {
                'has_dyno': has_dyno_fields_simple(photo_svg),
                'fields': extract_dyno_fields_simple(photo_svg)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
            cursor.execute('''
                INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', [photo_template_id, f"{name} - Photo {i+1}", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ photo
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ photo —Å–ª–∞–π–¥–∞
        for i, photo_template_id in enumerate(photo_template_ids):
            cursor.execute('''
                INSERT INTO carousels (id, name, main_template_id, photo_template_id)
                VALUES (?, ?, ?, ?)
            ''', [str(uuid.uuid4()), f"{name} - Photo {i+1}", main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_ids': photo_template_ids,
            'photo_count': photo_count,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —Å {photo_count} photo —Å–ª–∞–π–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API —Ä–æ—É—Ç—ã
@app.route('/api/health')
def health():
    return jsonify({"status": "ok", "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç"})

# API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
@app.route('/api/carousel', methods=['POST'])
def create_carousel():
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ photo —Å–ª–∞–π–¥–æ–≤
    """
    try:
        data = request.get_json()
        print(f"üì• –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏: {data}")
        
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        replacements = data.get('replacements', {})
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        return create_and_generate_carousel()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

@app.route('/api/templates/all-previews')
def get_all_templates():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å –ø—Ä–µ–≤—å—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ—Ä–æ–Ω—Ç–∞"""
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, name, category, template_role, svg_content FROM templates ORDER BY created_at DESC')
        templates_data = cursor.fetchall()
        
        conn.close()
        
        templates = []
        for template in templates_data:
            template_id = template[0]
            template_name = template[1]
            category = template[2]
            template_role = template[3]
            svg_content = template[4]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PNG –ø—Ä–µ–≤—å—é
            preview_dir = os.path.join(OUTPUT_DIR, 'previews')
            os.makedirs(preview_dir, exist_ok=True)
            preview_path = os.path.join(preview_dir, f"{template_id}_preview.png")
            
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            if not os.path.exists(preview_path):
                print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {template_id}")
                success = False
                
                try:
                    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Playwright –¥–ª—è PNG –ø—Ä–µ–≤—å—é
                    from png_preview_with_playwright import svg_to_png_with_playwright
                    success = svg_to_png_with_playwright(svg_content, preview_path, 400, 600)
                    if success:
                        print(f"‚úÖ PNG –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {preview_path}")
                except ImportError:
                    print("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Playwright: {e}")
                
                # –ï—Å–ª–∏ Playwright –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º fallback –ø—Ä–µ–≤—å—é
                if not success:
                    try:
                        from PIL import Image, ImageDraw
                        img = Image.new('RGB', (400, 600), color='white')
                        draw = ImageDraw.Draw(img)
                        
                        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–≤—å—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                        draw.rectangle([10, 10, 390, 590], outline='gray', width=2)
                        draw.text((200, 300), template_name, fill='black', anchor='mm')
                        
                        img.save(preview_path)
                        print(f"‚úÖ Fallback –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {preview_path}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –ø—Ä–µ–≤—å—é: {e}")
            
            # URL –¥–ª—è –ø—Ä–µ–≤—å—é
            preview_url = f'/output/previews/{template_id}_preview.png'
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ—Ä–æ–Ω—Ç–∞
            templates.append({
                'id': template_id,
                'name': template_name,
                'category': category,
                'template_role': template_role,
                'preview_url': preview_url
            })
        
        return jsonify({
            'templates': templates
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/preview')
def get_template_preview(template_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º SVG —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        svg_content = result[0]
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PNG –ø—Ä–µ–≤—å—é
        preview_dir = os.path.join(OUTPUT_DIR, 'previews')
        os.makedirs(preview_dir, exist_ok=True)
        preview_path = os.path.join(preview_dir, f"{template_id}_preview.png")
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SVG –Ω–∞–ø—Ä—è–º—É—é (Cairo –æ—Ç–∫–ª—é—á–µ–Ω)
        if not os.path.exists(preview_path):
            print(f"üñºÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é SVG –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞: {template_id} (Cairo –æ—Ç–∫–ª—é—á–µ–Ω)")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG –ø—Ä–µ–≤—å—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            preview_svg = generate_svg_preview(svg_content, 400, 600)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º SVG –∫–∞–∫ –ø—Ä–µ–≤—å—é
            from flask import Response
            return Response(preview_svg, mimetype='image/svg+xml')
        
        # –ï—Å–ª–∏ PNG –ø—Ä–µ–≤—å—é —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        try:
            return send_from_directory(preview_dir, f"{template_id}_preview.png")
        except:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å PNG, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SVG
            preview_svg = generate_svg_preview(svg_content, 400, 600)
            from flask import Response
            return Response(preview_svg, mimetype='image/svg+xml')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/templates/<template_id>/delete', methods=['DELETE'])
def delete_template(template_id):
    try:
        ensure_db_exists()
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        cursor.execute('SELECT name FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name = result[0]
        
        # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        cursor.execute('DELETE FROM templates WHERE id = ?', [template_id])
        
        conn.commit()
        conn.close()
        
        return jsonify({
            'success': True,
            'message': f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π (–ø—Ä–æ—Å—Ç–æ–π)
@app.route('/api/carousels', methods=['GET'])
def get_carousels():
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏"""
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, category, main_template_id, photo_template_id, created_at
            FROM carousels
            ORDER BY created_at DESC
        ''')
        
        carousels_data = cursor.fetchall()
        conn.close()
        
        carousels = []
        for carousel in carousels_data:
            carousels.append({
                'id': carousel[0],
                'name': carousel[1],
                'category': carousel[2],
                'main_template_id': carousel[3],
                'photo_template_id': carousel[4],
                'created_at': carousel[5]
            })
        
        return jsonify({
            'success': True,
            'carousels': carousels,
            'count': len(carousels)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π (–ø–æ–ª–Ω—ã–π)
@app.route('/api/carousels/all', methods=['GET'])
def get_all_carousels():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –ø—Ä–µ–≤—å—é –¥–ª—è main –∏ photo —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        from manual_preview_system import get_template_preview_url
        
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–∞—Ö
        cursor.execute('''
            SELECT c.id, c.name, c.category, c.main_template_id, c.photo_template_id, c.created_at,
                   mt.name as main_name, pt.name as photo_name,
                   mt.dyno_fields as main_dyno_fields, pt.dyno_fields as photo_dyno_fields
            FROM carousels c
            LEFT JOIN templates mt ON c.main_template_id = mt.id
            LEFT JOIN templates pt ON c.photo_template_id = pt.id
            ORDER BY c.created_at DESC
        ''')
        
        carousels_data = cursor.fetchall()
        conn.close()
        
        carousels = []
        for carousel in carousels_data:
            carousel_id = carousel[0]
            carousel_name = carousel[1]
            category = carousel[2]
            main_template_id = carousel[3]
            photo_template_id = carousel[4]
            created_at = carousel[5]
            main_name = carousel[6]
            photo_name = carousel[7]
            main_dyno_fields = carousel[8] if carousel[8] else ""
            photo_dyno_fields = carousel[9] if carousel[9] else ""
            
            # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–µ–≤—å—é –¥–ª—è main –∏ photo —à–∞–±–ª–æ–Ω–æ–≤
            main_preview_url = get_template_preview_url(main_template_id) if main_template_id else ''
            photo_preview_url = get_template_preview_url(photo_template_id) if photo_template_id else ''
            
            carousel_info = {
                'id': carousel_id,
                'name': carousel_name,
                'category': category,
                'created_at': created_at,
                'main_template': {
                    'id': main_template_id,
                    'name': main_name,
                    'preview_url': main_preview_url,
                    'dyno_fields': main_dyno_fields.split(',') if main_dyno_fields else []
                },
                'photo_template': {
                    'id': photo_template_id,
                    'name': photo_name,
                    'preview_url': photo_preview_url,
                    'dyno_fields': photo_dyno_fields.split(',') if photo_dyno_fields else []
                }
            }
            
            carousels.append(carousel_info)
        
        return jsonify({
            'success': True,
            'carousels': carousels,
            'total_count': len(carousels)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–µ–π: {str(e)}'}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/carousels/<carousel_id>', methods=['GET'])
def get_carousel(carousel_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏"""
    try:
        from manual_preview_system import get_template_preview_url
        
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–∞—Ö
        cursor.execute('''
            SELECT c.id, c.name, c.category, c.main_template_id, c.photo_template_id, c.created_at,
                   mt.name as main_name, pt.name as photo_name,
                   mt.dyno_fields as main_dyno_fields, pt.dyno_fields as photo_dyno_fields
            FROM carousels c
            LEFT JOIN templates mt ON c.main_template_id = mt.id
            LEFT JOIN templates pt ON c.photo_template_id = pt.id
            WHERE c.id = ?
        ''', [carousel_id])
        
        carousel_data = cursor.fetchone()
        conn.close()
        
        if not carousel_data:
            return jsonify({'error': '–ö–∞—Ä—É—Å–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        carousel_id = carousel_data[0]
        carousel_name = carousel_data[1]
        category = carousel_data[2]
        main_template_id = carousel_data[3]
        photo_template_id = carousel_data[4]
        created_at = carousel_data[5]
        main_name = carousel_data[6]
        photo_name = carousel_data[7]
        main_dyno_fields = carousel_data[8] if carousel_data[8] else ""
        photo_dyno_fields = carousel_data[9] if carousel_data[9] else ""
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–µ–≤—å—é –¥–ª—è main –∏ photo —à–∞–±–ª–æ–Ω–æ–≤
        main_preview_url = get_template_preview_url(main_template_id) if main_template_id else ''
        photo_preview_url = get_template_preview_url(photo_template_id) if photo_template_id else ''
        
        carousel_info = {
            'id': carousel_id,
            'name': carousel_name,
            'category': category,
            'created_at': created_at,
            'main_template': {
                'id': main_template_id,
                'name': main_name,
                'preview_url': main_preview_url,
                'dyno_fields': main_dyno_fields.split(',') if main_dyno_fields else []
            },
            'photo_template': {
                'id': photo_template_id,
                'name': photo_name,
                'preview_url': photo_preview_url,
                'dyno_fields': photo_dyno_fields.split(',') if photo_dyno_fields else []
            }
        }
        
        return jsonify({
            'success': True,
            'carousel': carousel_info
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@app.route('/api/generate/single', methods=['POST'])
def generate_single():
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        output_filename = f"single_{str(uuid.uuid4())}.svg"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_url = save_file_locally_or_supabase(processed_svg, output_filename, "single")
        
        if not output_url:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}), 500
        
        return jsonify({
            'success': True,
            'template_name': template_name,
            'output_url': output_url,
            'replacements_applied': len(replacements)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {data}")
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'data' –≤–º–µ—Å—Ç–æ 'replacements'
        replacements = data.get('data', data.get('replacements', {}))
        
        print(f"üîç Received data: {data}")
        print(f"üìã Replacements: {replacements}")
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        if not main_result:
            print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω {main_template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π")
            create_dynamic_template(main_template_id, 'main')
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
            main_result = cursor.fetchone()
        
        if not photo_result:
            print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω {photo_template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π")
            create_dynamic_template(photo_template_id, 'photo')
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
            photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞'}), 500
        
        main_name, main_svg_content = main_result
        photo_name, photo_svg_content = photo_result
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ SVG
        svg_fields_main = extract_dyno_fields_simple(main_svg_content)
        svg_fields_photo = extract_dyno_fields_simple(photo_svg_content)
        
        print(f"üîç Main SVG –ø–æ–ª—è: {svg_fields_main}")
        print(f"üîç Photo SVG –ø–æ–ª—è: {svg_fields_photo}")
        print(f"üîç –í—Å–µ replacements: {replacements}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤ photo SVG
        print("üîç –í–°–ï –ø–æ–ª—è –≤ photo SVG:")
        for field in svg_fields_photo:
            print(f"   - {field}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        print("üîç –ü–æ–ª—è –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:")
        for key, value in replacements.items():
            print(f"   - {key} = {str(value)[:50]}...")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º replacements –¥–ª—è main SVG
        filtered_replacements_main = {k: v for k, v in replacements.items() if k in svg_fields_main or field_mapping.get(k, k) in svg_fields_main}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º replacements –¥–ª—è photo SVG
        filtered_replacements_photo = {k: v for k, v in replacements.items() if k in svg_fields_photo or field_mapping.get(k, k) in svg_fields_photo}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ñ—Ä–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ replacements –¥–ª—è photo template")
        
        print(f"üîç Replacements –¥–ª—è main SVG: {filtered_replacements_main}")
        print(f"üîç Replacements –¥–ª—è photo SVG: {filtered_replacements_photo}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è photo template
        print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ photo replacements:")
        for key, value in replacements.items():
            mapped_key = field_mapping.get(key, key)
            in_photo = key in svg_fields_photo or mapped_key in svg_fields_photo
            print(f"   {key} -> {mapped_key} -> –≤ photo: {in_photo}")
        processed_main_svg = process_svg_font_perfect(main_svg_content, filtered_replacements_main)
        processed_photo_svg = process_svg_font_perfect(photo_svg_content, filtered_replacements_photo)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SVG
        main_svg_filename = f"carousel_{carousel_id}_main.svg"
        photo_svg_filename = f"carousel_{carousel_id}_photo.svg"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É carousel –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        carousel_output_dir = os.path.join(OUTPUT_DIR, 'carousel')
        os.makedirs(carousel_output_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª—ã
        main_svg_path = os.path.join(carousel_output_dir, main_svg_filename)
        photo_svg_path = os.path.join(carousel_output_dir, photo_svg_filename)
        
        with open(main_svg_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_svg_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é main SVG: {main_svg_filename}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é photo SVG: {photo_svg_filename}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        main_url = save_file_locally_or_supabase(processed_main_svg, main_svg_filename, "carousel")
        photo_url = save_file_locally_or_supabase(processed_photo_svg, photo_svg_filename, "carousel")
        
        if not main_url or not photo_url:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'}), 500
        

        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL)
        is_render = os.environ.get('RENDER', False) or (os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_URL') != 'https://vahgmyuowsilbxqdjjii.supabase.co')
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG
        if is_render and supabase:
            # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase SVG URL
            main_image_url = main_url
            photo_image_url = photo_url
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ SVG URL
            main_image_url = f'/output/carousel/{main_svg_filename}'
            photo_image_url = f'/output/carousel/{photo_svg_filename}'
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        images = [
            {
                'slide_number': 1,
                'template_id': main_template_id,
                'template_name': main_name,
                'filename': main_svg_filename,
                'url': main_image_url,
                'status': 'completed'
            },
            {
                'slide_number': 2,
                'template_id': photo_template_id,
                'template_name': photo_name,
                'filename': photo_svg_filename,
                'url': photo_image_url,
                'status': 'completed'
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL)
        image_urls = [main_image_url, photo_image_url]
        
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': main_image_url,
            'photo_url': photo_image_url,
            'replacements_applied': len(replacements),
            # –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã URL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            'images': image_urls,  # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ URL
            'slides': image_urls,  # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ URL
            'urls': image_urls,    # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ URL
            'image_url': image_urls[0],  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            'data': {'images': image_urls},  # –° –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'images_detailed': images,  # –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            'slides_count': 2,
            'status': 'completed',
            'format': 'svg',
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'images_detailed_alt': [
                {
                    'type': 'main',
                    'url': main_image_url,
                    'template_name': main_name
                },
                {
                    'type': 'photo',
                    'url': photo_image_url,
                    'template_name': photo_name
                }
            ],
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_filename': main_svg_filename,
            'photo_filename': photo_svg_filename,
            'main_svg_filename': main_svg_filename,
            'photo_svg_filename': photo_svg_filename,




            'main_svg_path': main_svg_path,
            'photo_svg_path': photo_svg_path,


        }
        
        print(f"üîç /api/generate/carousel response: {response_data}")
        print(f"üìä Images count: {len(images)}")
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º —à–∞–±–ª–æ–Ω–æ–≤
@app.route('/api/generate/carousel-by-name', methods=['POST'])
def generate_carousel_by_name():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤–º–µ—Å—Ç–æ ID
    """
    try:
        data = request.get_json()
        print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å (by-name): {data}")
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        replacements = data.get('replacements', {})
        
        if not main_template_name or not photo_template_name:
            return jsonify({'error': 'main_template_name –∏ photo_template_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        print(f"üîç –ò—â—É —à–∞–±–ª–æ–Ω—ã –ø–æ –∏–º–µ–Ω–∞–º:")
        print(f"   Main: {main_template_name}")
        print(f"   Photo: {photo_template_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∞–º
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ò—â–µ–º main —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [main_template_name])
        main_result = cursor.fetchone()
        
        if not main_result:
            conn.close()
            return jsonify({'error': f'Main —à–∞–±–ª–æ–Ω "{main_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ò—â–µ–º photo —à–∞–±–ª–æ–Ω
        cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [photo_template_name])
        photo_result = cursor.fetchone()
        
        if not photo_result:
            conn.close()
            return jsonify({'error': f'Photo —à–∞–±–ª–æ–Ω "{photo_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        conn.close()
        
        main_id, main_name, main_svg = main_result
        photo_id, photo_name, photo_svg = photo_result
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã:")
        print(f"   Main: {main_name} (ID: {main_id})")
        print(f"   Photo: {photo_name} (ID: {photo_id})")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à—Ä–∏—Ñ—Ç–æ–≤
        print(f"üîç Replacements –ø–æ–ª—É—á–µ–Ω—ã: {replacements}")
        print(f"üîç Main SVG –ø–æ–ª—è: {extract_dyno_fields_simple(main_svg)}")
        print(f"üîç Photo SVG –ø–æ–ª—è: {extract_dyno_fields_simple(photo_svg)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º replacements –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        svg_fields_main = extract_dyno_fields_simple(main_svg)
        svg_fields_photo = extract_dyno_fields_simple(photo_svg)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤ photo SVG
        print("üîç –í–°–ï –ø–æ–ª—è –≤ photo SVG:")
        for field in svg_fields_photo:
            print(f"   - {field}")
        
        filtered_replacements_main = {k: v for k, v in replacements.items() if k in svg_fields_main or field_mapping.get(k, k) in svg_fields_main}
        filtered_replacements_photo = {k: v for k, v in replacements.items() if k in svg_fields_photo or field_mapping.get(k, k) in svg_fields_photo}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ñ—Ä–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ replacements –¥–ª—è photo template")
        
        print(f"üîç Filtered replacements –¥–ª—è main: {filtered_replacements_main}")
        print(f"üîç Filtered replacements –¥–ª—è photo: {filtered_replacements_photo}")
        
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Main —à–∞–±–ª–æ–Ω...")
        processed_main_svg = process_svg_font_perfect(main_svg, filtered_replacements_main)
        
        print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Photo —à–∞–±–ª–æ–Ω...")
        processed_photo_svg = process_svg_font_perfect(photo_svg, filtered_replacements_photo)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.join(OUTPUT_DIR, 'carousel'), exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        main_svg_filename = f"carousel_{carousel_id}_main.svg"
        photo_svg_filename = f"carousel_{carousel_id}_photo.svg"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.join(OUTPUT_DIR, 'carousel'), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª—ã
        main_svg_path = os.path.join(OUTPUT_DIR, 'carousel', main_svg_filename)
        photo_svg_path = os.path.join(OUTPUT_DIR, 'carousel', photo_svg_filename)
        
        with open(main_svg_path, 'w', encoding='utf-8') as f:
            f.write(processed_main_svg)
        
        with open(photo_svg_path, 'w', encoding='utf-8') as f:
            f.write(processed_photo_svg)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é main SVG: {main_svg_filename}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é photo SVG: {photo_svg_filename}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        main_url = save_file_locally_or_supabase(processed_main_svg, main_svg_filename, "carousel")
        photo_url = save_file_locally_or_supabase(processed_photo_svg, photo_svg_filename, "carousel")
        
        if not main_url or not photo_url:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'}), 500
        

        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL)
        is_render = os.environ.get('RENDER', False) or (os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_URL') != 'https://vahgmyuowsilbxqdjjii.supabase.co')
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG
        if is_render and supabase:
            # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase SVG URL
            main_image_url = main_url
            photo_image_url = photo_url
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ SVG URL
            main_image_url = f'/output/carousel/{main_svg_filename}'
            photo_image_url = f'/output/carousel/{photo_svg_filename}'
        
        print(f"üéâ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
        
        return jsonify({
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_id,
            'photo_template_id': photo_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': main_image_url,
            'photo_url': photo_image_url,
            'replacements_applied': len(replacements),
            'format': 'svg',
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'images_detailed': [
                {
                    'type': 'main',
                    'url': main_image_url,
                    'template_name': main_name
                },
                {
                    'type': 'photo',
                    'url': photo_image_url,
                    'template_name': photo_name
                }
            ]
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ (–¥–æ 10 —Å–ª–∞–π–¥–æ–≤)
@app.route('/api/carousel/create-and-generate', methods=['POST'])
def create_and_generate_carousel():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å —Å main —Å–ª–∞–π–¥–æ–º + –¥–æ 9 —Ñ–æ—Ç–æ —Å–ª–∞–π–¥–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç dyno.propertyimage2, dyno.propertyimage3, ... dyno.propertyimage10
    
    –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –ø–æ–ª–µ–π:
    - Main —Å–ª–∞–π–¥: dyno.propertyimage, dyno.agentheadshot –∏ —Ç.–¥.
    - Photo —Å–ª–∞–π–¥ 1: dyno.propertyimage2
    - Photo —Å–ª–∞–π–¥ 2: dyno.propertyimage3
    - –ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ dyno.propertyimage10
    """
    try:
        data = request.get_json()
        print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å create-and-generate: {data}")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        carousel_name = data.get('name', 'Untitled Carousel')
        slides = data.get('slides', [])
        main_template_name = data.get('main_template_name')
        photo_template_name = data.get('photo_template_name')
        replacements = data.get('replacements', {})
        slides_count = data.get('slides_count', 0)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–∞–π–¥–æ–≤
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å template names
        if main_template_name and photo_template_name:
            print(f"üîç –ò—â—É —à–∞–±–ª–æ–Ω—ã –ø–æ –∏–º–µ–Ω–∞–º:")
            print(f"   Main: {main_template_name}")
            print(f"   Photo: {photo_template_name}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {slides_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∞–º
            ensure_db_exists()
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            
            # –ò—â–µ–º main —à–∞–±–ª–æ–Ω
            cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [main_template_name])
            main_result = cursor.fetchone()
            
            if not main_result:
                conn.close()
                return jsonify({'error': f'Main —à–∞–±–ª–æ–Ω "{main_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            # –ò—â–µ–º photo —à–∞–±–ª–æ–Ω
            cursor.execute('SELECT id, name, svg_content FROM templates WHERE name = ?', [photo_template_name])
            photo_result = cursor.fetchone()
            
            if not photo_result:
                conn.close()
                return jsonify({'error': f'Photo —à–∞–±–ª–æ–Ω "{photo_template_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            
            conn.close()
            
            main_id, main_name, main_svg = main_result
            photo_id, photo_name, photo_svg = photo_result
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã:")
            print(f"   Main: {main_name} (ID: {main_id})")
            print(f"   Photo: {photo_name} (ID: {photo_id})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º slides_count –∏–∑ payload –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
            photo_count = slides_count
            print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤ –∏–∑ payload: {photo_count}")
            
            # –ï—Å–ª–∏ slides_count –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if photo_count == 0:
                photo_count = len([k for k in replacements.keys() if k.startswith('dyno.propertyimage') and k != 'dyno.propertyimage'])
                print(f"üîç slides_count –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å—á–∏—Ç–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {photo_count} photo —Å–ª–∞–π–¥–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–∞–π–¥–æ–≤
            property_image_fields = []
            for i in range(2, photo_count + 2):  # propertyimage2, propertyimage3, etc.
                field_name = f'dyno.propertyimage{i}'
                if field_name in replacements:
                    property_image_fields.append((field_name, i))
                else:
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ replacements")
            
            if len(property_image_fields) < photo_count:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—à–µ–Ω–æ {photo_count} —Å–ª–∞–π–¥–æ–≤, –Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(property_image_fields)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                photo_count = len(property_image_fields)
            
            print(f"üîç –°–æ–∑–¥–∞–µ–º {photo_count} photo —Å–ª–∞–π–¥–æ–≤")
            print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ property_image –ø–æ–ª—è: {property_image_fields}")
            print(f"üîç –í—Å–µ replacements: {list(replacements.keys())}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º main SVG (–∏—Å–ø–æ–ª—å–∑—É–µ–º dyno.propertyimage, dyno.agentheadshot –∏ —Ç.–¥.)
            print("üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Main —à–∞–±–ª–æ–Ω...")
            svg_fields_main = extract_dyno_fields_simple(main_svg)
            print(f"üîç Main SVG –ø–æ–ª—è: {svg_fields_main}")
            
            # –î–ª—è main –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï –ø–æ–ª—è –∏–∑ replacements
            main_replacements = replacements.copy()
            
            # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è SVG
            if 'dyno.slides_count' in main_replacements:
                del main_replacements['dyno.slides_count']
                print(f"   üö´ –£–±–∏—Ä–∞—é —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ dyno.slides_count")
            if 'dyno.generate_multiple' in main_replacements:
                del main_replacements['dyno.generate_multiple']
                print(f"   üö´ –£–±–∏—Ä–∞—é —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ dyno.generate_multiple")
            
            print(f"üîç Main replacements: {main_replacements}")
            processed_main_svg = process_svg_font_perfect(main_svg, main_replacements)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
            carousel_id = str(uuid.uuid4())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º main —Ñ–∞–π–ª
            main_filename = f"carousel_{carousel_id}_main.svg"
            main_url = save_file_locally_or_supabase(processed_main_svg, main_filename, "carousel")
            
            if not main_url:
                return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è main —Ñ–∞–π–ª–∞'}), 500
            
            print(f"‚úÖ Main —Å–ª–∞–π–¥ SVG —Å–æ–∑–¥–∞–Ω: {main_url}")
            
            # –°–æ–∑–¥–∞–µ–º photo —Å–ª–∞–π–¥—ã
            photo_urls = []
            images = [
                {
                    'type': 'main',
                    'svg_url': main_url,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º SVG URL –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏
                    'template_name': main_name
                }
            ]
            
            for i, (property_image_field, field_number) in enumerate(property_image_fields):
                print(f"üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Photo —Å–ª–∞–π–¥ {i+1} (–ø–æ–ª–µ: {property_image_field})...")
                
                # –°–æ–∑–¥–∞–µ–º replacements –¥–ª—è —ç—Ç–æ–≥–æ photo —Å–ª–∞–π–¥–∞
                # –î–ª—è photo —Å–ª–∞–π–¥–∞ —Å–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                photo_replacements = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ photo SVG –ø–æ–ª–µ dyno.propertyimage
                svg_fields_photo = extract_dyno_fields_simple(photo_svg)
                print(f"üîç Photo SVG –ø–æ–ª—è: {svg_fields_photo}")
                
                # –î–ª—è photo —Å–ª–∞–π–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                # –ï—Å–ª–∏ —ç—Ç–æ photo —Å–ª–∞–π–¥ 1, –±–µ—Ä–µ–º dyno.propertyimage2
                # –ï—Å–ª–∏ —ç—Ç–æ photo —Å–ª–∞–π–¥ 2, –±–µ—Ä–µ–º dyno.propertyimage3 –∏ —Ç.–¥.
                target_image_field = f'dyno.propertyimage{i+2}'  # i+2 –ø–æ—Ç–æ–º—É —á—Ç–æ i –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                
                print(f"   üîç Photo —Å–ª–∞–π–¥ {i+1}: –∏—â—É –ø–æ–ª–µ {target_image_field}")
                print(f"   üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ replacements: {list(replacements.keys())}")
                
                if target_image_field in replacements:
                    print(f"   ‚úÖ –ü–æ–ª–µ {target_image_field} –Ω–∞–π–¥–µ–Ω–æ –≤ replacements: {replacements[target_image_field][:50]}...")
                    
                    # –í photo SVG –∏—Å–ø–æ–ª—å–∑—É–µ–º target_image_field –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, dyno.propertyimage2)
                    if target_image_field in svg_fields_photo:
                        photo_replacements[target_image_field] = replacements[target_image_field]
                        print(f"   üì∏ –ó–∞–º–µ–Ω—è—é {target_image_field} –Ω–∞ {replacements[target_image_field][:50]}...")
                    else:
                        print(f"   ‚ö†Ô∏è –í photo SVG –Ω–µ—Ç –ø–æ–ª—è {target_image_field}")
                        print(f"   üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ photo SVG: {svg_fields_photo}")
                else:
                    print(f"   ‚ùå –ü–æ–ª–µ {target_image_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ replacements")
                    print(f"   üîç –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è: {[k for k in replacements.keys() if 'propertyimage' in k]}")
                
                print(f"üîç Photo {i+1} replacements: {photo_replacements}")
                
                print(f"üîç Photo {i+1} replacements: {photo_replacements}")
                processed_photo_svg = process_svg_font_perfect(photo_svg, photo_replacements)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo —Ñ–∞–π–ª
                photo_filename = f"carousel_{carousel_id}_photo_{i+1}.svg"
                photo_url = save_file_locally_or_supabase(processed_photo_svg, photo_filename, "carousel")
                
                if photo_url:
                    photo_urls.append(photo_url)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º photo —Å–ª–∞–π–¥ –≤ images (–±–µ–∑ JPG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
                    images.append({
                        'type': f'photo_{i+1}',
                        'svg_url': photo_url,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º SVG URL –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏
                        'template_name': photo_name,
                        'property_image': replacements[target_image_field]
                    })
                    print(f"   ‚úÖ Photo —Å–ª–∞–π–¥ {i+1} —Å–æ–∑–¥–∞–Ω: {photo_url}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Photo —Å–ª–∞–π–¥ {i+1}")
            
            print(f"üéâ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: 1 main + {len(photo_urls)} photo")
            
            return jsonify({
                'success': True,
                'carousel_id': carousel_id,
                'main_template_name': main_name,
                'photo_template_name': photo_name,
                'images': images,
                'main_url': main_url,
                'photo_urls': photo_urls,
                'total_slides': 1 + len(photo_urls),
                'replacements_applied': len(replacements)
            })
        
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∞—Å—Å–∏–≤–æ–º slides
        if not slides:
            return jsonify({'error': '–ú–∞—Å—Å–∏–≤ slides –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        print(f"üé† –°–æ–∑–¥–∞—é –∫–∞—Ä—É—Å–µ–ª—å: {carousel_name}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {len(slides)}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥–æ–≤: {slides}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_dir = os.path.join(OUTPUT_DIR, 'carousel', carousel_id)
        os.makedirs(carousel_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º main template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [main_template_id, f"{name} - Main", category, "main", main_svg, ','.join(main_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo template
        cursor.execute('''
            INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', [photo_template_id, f"{name} - Photo", category, "photo", photo_svg, ','.join(photo_dyno_info.get('fields', []))])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, name, main_template_id, photo_template_id])
        
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è main —à–∞–±–ª–æ–Ω–∞: {name} - Main")
        main_preview = generate_svg_preview(main_svg, main_template_id)
        
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è photo —à–∞–±–ª–æ–Ω–∞: {name} - Photo")
        photo_preview = generate_svg_preview(photo_svg, photo_template_id)
        
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'main_template_id': main_template_id,
            'photo_template_id': photo_template_id,
            'main_dyno_fields': main_dyno_info.get('fields', []) if main_dyno_info else [],
            'photo_dyno_fields': photo_dyno_info.get('fields', []) if photo_dyno_info else [],
            'message': f'–ö–∞—Ä—É—Å–µ–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é
        if main_preview['success']:
            response_data['main_preview_url'] = main_preview['url']
        if photo_preview['success']:
            response_data['photo_preview_url'] = photo_preview['url']
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—É—Å–µ–ª–∏
@app.route('/api/carousel/<carousel_id>/slides', methods=['GET'])
def get_carousel_slides(carousel_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–π–¥–∞—Ö –∫–∞—Ä—É—Å–µ–ª–∏
    """
    try:
        print(f"üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—É—Å–µ–ª–∏: {carousel_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_dir = os.path.join(OUTPUT_DIR, 'carousel', carousel_id)
        
        if not os.path.exists(carousel_dir):
            return jsonify({'error': '–ö–∞—Ä—É—Å–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, slides_count, created_at FROM carousels_full WHERE id = ?', [carousel_id])
        carousel_result = cursor.fetchone()
        
        conn.close()
        
        if not carousel_result:
            return jsonify({'error': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        carousel_name, slides_count, created_at = carousel_result
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        slides = []
        for i in range(1, slides_count + 1):
            slide_svg_filename = f"slide_{i:02d}.svg"
            slide_jpg_filename = f"slide_{i:02d}.jpg"
            
            slide_svg_path = os.path.join(carousel_dir, slide_svg_filename)
            slide_jpg_path = os.path.join(carousel_dir, slide_jpg_filename)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL)
            is_render = os.environ.get('RENDER', False) or (os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_URL') != 'https://vahgmyuowsilbxqdjjii.supabase.co')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JPG —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
            if os.path.exists(slide_jpg_path):
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if is_render and supabase:
                    # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase URL
                    image_url = f"https://vahgmyuowsilbxqdjjii.supabase.co/storage/v1/object/public/images/carousel/{carousel_id}/{slide_jpg_filename}"
                else:
                    # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
                    image_url = f'/output/carousel/{carousel_id}/{slide_jpg_filename}'
                
                slides.append({
                    'slide_number': i,
                    'filename': slide_jpg_filename,
                    'image_url': image_url,
                    'status': 'completed',
                    'format': 'jpg'
                })
            elif os.path.exists(slide_svg_path):
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if is_render and supabase:
                    # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase URL
                    image_url = f"https://vahgmyuowsilbxqdjjii.supabase.co/storage/v1/object/public/images/carousel/{carousel_id}/{slide_svg_filename}"
                else:
                    # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
                    image_url = f'/output/carousel/{carousel_id}/{slide_svg_filename}'
                
                slides.append({
                    'slide_number': i,
                    'filename': slide_svg_filename,
                    'image_url': image_url,
                    'status': 'completed',
                    'format': 'svg'
                })
            else:
                slides.append({
                    'slide_number': i,
                    'filename': slide_svg_filename,
                    'image_url': '',
                    'status': 'error'
                })
        
        return jsonify({
            'carousel_id': carousel_id,
            'name': carousel_name,
            'status': 'completed',
            'slides_count': slides_count,
            'created_at': created_at,
            'slides': slides
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}'}), 500

# API –¥–ª—è –ø—Ä–µ–≤—å—é SVG
@app.route('/api/preview/template/<template_id>', methods=['GET'])
def preview_template(template_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
        preview_type = request.args.get('type', 'png')
        width = int(request.args.get('width', 400))
        height = int(request.args.get('height', 300))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_svg_preview(svg_content, preview_type, width, height)
        
        if preview_result['success']:
            preview_result['template_name'] = template_name
            preview_result['template_id'] = template_id
            return jsonify(preview_result)
        else:
            return jsonify({'error': preview_result['error']}), 500
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

@app.route('/api/preview/with-data', methods=['POST'])
def preview_with_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        data = request.get_json()
        template_id = data.get('template_id')
        replacements = data.get('replacements', {})
        preview_type = data.get('type', 'png')
        width = int(data.get('width', 400))
        height = int(data.get('height', 300))
        
        if not template_id:
            return jsonify({'error': 'template_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return jsonify({'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        template_name, svg_content = result
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏
        preview_result = create_preview_with_data(svg_content, replacements, preview_type)
        
        if preview_result['success']:
            preview_result['template_name'] = template_name
            preview_result['template_id'] = template_id
            return jsonify(preview_result)
        else:
            return jsonify({'error': preview_result['error']}), 500
            
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏: {str(e)}'}), 500

@app.route('/api/preview/carousel', methods=['POST'])
def preview_carousel():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –∫–∞—Ä—É—Å–µ–ª–∏ (main + photo —Å–ª–∞–π–¥—ã)"""
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('replacements', {})
        preview_type = data.get('type', 'png')
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg = main_result
        photo_name, photo_svg = photo_result
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        main_preview = create_preview_with_data(main_svg, replacements, preview_type)
        
        # –î–ª—è photo –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ replacements —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        photo_replacements = {}
        for key, value in replacements.items():
            # –ò—Å–∫–ª—é—á–∞–µ–º dyno.propertyimage (—ç—Ç–æ –¥–ª—è main —Å–ª–∞–π–¥–∞)
            if key != 'dyno.propertyimage':
                photo_replacements[key] = value
        
        print(f"üîç Photo –ø—Ä–µ–≤—å—é replacements: {list(photo_replacements.keys())}")
        photo_preview = create_preview_with_data(photo_svg, photo_replacements, preview_type)
        
        return jsonify({
            'success': True,
            'main_preview': {
                'template_name': main_name,
                'template_id': main_template_id,
                **main_preview
            },
            'photo_preview': {
                'template_name': photo_name,
                'template_id': photo_template_id,
                **photo_preview
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

@app.route('/api/convert-to-png', methods=['POST'])
def convert_svg_to_png_api():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG URL –≤ PNG"""
    try:
        data = request.get_json()
        svg_url = data.get('svg_url')
        
        if not svg_url:
            return jsonify({'error': 'svg_url –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG: {svg_url}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º SVG
        response = requests.get(svg_url, timeout=30)
        if response.status_code != 200:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å SVG'}), 400
        
        svg_content = response.text
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è PNG —Ñ–∞–π–ª–∞
        png_filename = f"converted_{uuid.uuid4().hex[:8]}.png"
        png_path = os.path.join(OUTPUT_DIR, 'converted', png_filename)
        os.makedirs(os.path.dirname(png_path), exist_ok=True)
        
        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Playwright
        success = False
        try:
            from png_preview_with_playwright import svg_to_png_with_playwright
            success = svg_to_png_with_playwright(svg_content, png_path, 1080, 1350)
            if success:
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Playwright: {png_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Playwright: {e}")
        
        # Fallback —á–µ—Ä–µ–∑ PIL
        if not success:
            try:
                from PIL import Image, ImageDraw
                img = Image.new('RGB', (1080, 1350), color='white')
                draw = ImageDraw.Draw(img)
                draw.text((540, 675), 'SVG ‚Üí PNG', fill='black', anchor='mm')
                img.save(png_path)
                success = True
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ PIL fallback: {png_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ PIL: {e}")
        
        if success:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º PNG –≤ Supabase
            with open(png_path, 'rb') as f:
                png_data = f.read()
            
            png_url = upload_to_supabase_storage(png_data, png_filename, "converted")
            
            if png_url:
                return jsonify({
                    'success': True,
                    'png_url': png_url,
                    'filename': png_filename
                })
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
                return jsonify({
                    'success': True,
                    'png_url': f'/output/converted/{png_filename}',
                    'filename': png_filename
                })
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PNG'}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}'}), 500

@app.route('/api/preview/cleanup', methods=['POST'])
def cleanup_previews():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã"""
    try:
        max_age_hours = request.json.get('max_age_hours', 24) if request.json else 24
        cleanup_old_previews(max_age_hours)
        
        return jsonify({
            'success': True,
            'message': f'–ü—Ä–µ–≤—å—é —Å—Ç–∞—Ä—à–µ {max_age_hours} —á–∞—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–≤—å—é: {str(e)}'}), 500

def convert_svg_to_jpg(svg_content, output_path, width=2400, height=1600, quality=95):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG –≤ JPG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    """
    try:
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ JPG: {output_path}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (Cairo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        print("‚ö†Ô∏è Cairo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPG —á–µ—Ä–µ–∑ PIL
        img = Image.open(io.BytesIO(png_data))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
            img = background
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPG —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        img.save(output_path, 'JPEG', quality=quality, optimize=True)
        
        print(f"‚úÖ JPG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path} ({width}x{height}, DPI: 600)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ JPG: {e}")
        return False

def convert_svg_to_png(svg_content, output_path, width=1200, height=800):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG –≤ PNG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    """
    try:
        print(f"üñºÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG: {output_path}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (Cairo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        print("‚ö†Ô∏è Cairo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
        with open(output_path, 'wb') as f:
            f.write(png_data)
        
        print(f"‚úÖ PNG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG: {e}")
        return False

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ photo —Å–ª–∞–π–¥–∞–º–∏
@app.route('/api/generate/carousel-multi', methods=['POST'])
def generate_carousel_multi():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ photo —Å–ª–∞–π–¥–∞–º–∏
    """
    try:
        data = request.get_json()
        print(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å (multi): {data}")
        main_template_id = data.get('main_template_id')
        photo_template_ids = data.get('photo_template_ids', [])  # –°–ø–∏—Å–æ–∫ ID photo —à–∞–±–ª–æ–Ω–æ–≤
        replacements = data.get('replacements', {})
        
        if not main_template_id or not photo_template_ids:
            return jsonify({'error': 'main_template_id –∏ photo_template_ids –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 404
        
        main_name, main_svg = main_result
        photo_name, photo_svg = photo_result
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –æ–±–æ–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        main_preview = create_preview_with_data(main_svg, replacements, preview_type)
        
        # –î–ª—è photo –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ replacements —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        photo_replacements = {}
        for key, value in replacements.items():
            # –ò—Å–∫–ª—é—á–∞–µ–º dyno.propertyimage (—ç—Ç–æ –¥–ª—è main —Å–ª–∞–π–¥–∞)
            if key != 'dyno.propertyimage':
                photo_replacements[key] = value
        
        print(f"üîç Photo –ø—Ä–µ–≤—å—é replacements: {list(photo_replacements.keys())}")
        photo_preview = create_preview_with_data(photo_svg, photo_replacements, preview_type)
        
        return jsonify({
            'success': True,
            'main_preview': {
                'template_name': main_name,
                'template_id': main_template_id,
                **main_preview
            },
            'photo_preview': {
                'template_name': photo_name,
                'template_id': photo_template_id,
                **photo_preview
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

def find_alternative_field(field, replacements):
    """–ò—â–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ replacements"""
    field_lower = field.lower()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è headshot –ø–æ–ª–µ–π - –†–ê–°–®–ò–†–ï–ù–ù–´–ô
    if 'headshot' in field_lower or 'agent' in field_lower or 'photo' in field_lower:
        headshot_alternatives = ['dyno.agentheadshot', 'dyno.agentphoto', 'dyno.headshot', 'dyno.agent', 'dyno.photo', 'dyno.agentPhoto', 'dyno.agentName']
        for alt in headshot_alternatives:
            if alt in replacements:
                return alt
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è property image –ø–æ–ª–µ–π
    elif 'propertyimage' in field_lower:
        # –ò—â–µ–º –ª—é–±–æ–µ propertyimage –ø–æ–ª–µ
        for key in replacements.keys():
            if 'propertyimage' in key.lower():
                return key
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è logo –ø–æ–ª–µ–π
    elif 'logo' in field_lower:
        logo_alternatives = ['dyno.logo', 'dyno.companylogo', 'dyno.brandlogo']
        for alt in logo_alternatives:
            if alt in replacements:
                return alt
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    elif any(keyword in field_lower for keyword in ['name', 'title', 'address', 'price']):
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for key in replacements.keys():
            if any(keyword in key.lower() for keyword in ['name', 'title', 'address', 'price']):
                return key
    
    return None

if __name__ == '__main__':
    ensure_db_exists()
    
    cleanup_old_previews()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(host='0.0.0.0', port=5001, debug=True)
