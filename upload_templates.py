#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ SVG —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import uuid
import os
import re

DATABASE_PATH = 'templates.db'

def extract_dyno_fields(svg_content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç dyno –ø–æ–ª—è –∏–∑ SVG"""
    fields = set()
    
    patterns = [
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        fields.update(matches)
    
    return sorted(list(fields))

def upload_template(svg_file_path, template_name, template_role):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SVG —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    if not os.path.exists(svg_file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {svg_file_path}")
        return None
    
    # –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
    with open(svg_file_path, 'r', encoding='utf-8') as f:
        svg_content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º dyno –ø–æ–ª—è
    dyno_fields = extract_dyno_fields(svg_content)
    
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω: {template_name}")
    print(f"   –§–∞–π–ª: {svg_file_path}")
    print(f"   –†–æ–ª—å: {template_role}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ dyno –ø–æ–ª–µ–π: {len(dyno_fields)}")
    
    for field in dyno_fields:
        print(f"      - {field}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    template_id = str(uuid.uuid4())
    
    cursor.execute('''
        INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', [template_id, template_name, 'uploaded', template_role, svg_content, ','.join(dyno_fields)])
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —Å ID: {template_id}")
    return template_id

def upload_templates_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üì§ –ó–ê–ì–†–£–ó–ö–ê SVG –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ SVG —Ñ–∞–π–ª–æ–≤
    svg_files = [f for f in os.listdir('.') if f.endswith('.svg')]
    
    if svg_files:
        print(f"üîç –ù–∞–π–¥–µ–Ω—ã SVG —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for i, file in enumerate(svg_files, 1):
            print(f"   {i}. {file}")
        print()
    
    templates = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º main —à–∞–±–ª–æ–Ω
    print("1Ô∏è‚É£ MAIN –®–ê–ë–õ–û–ù")
    main_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ main SVG —Ñ–∞–π–ª—É (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞): ").strip()
    
    if main_path and os.path.exists(main_path):
        main_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ main —à–∞–±–ª–æ–Ω–∞: ").strip() or "Main Template"
        main_id = upload_template(main_path, main_name, 'main')
        if main_id:
            templates.append(('main', main_id, main_name))
    else:
        print(f"‚ùå Main —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º photo —à–∞–±–ª–æ–Ω
    print("2Ô∏è‚É£ PHOTO –®–ê–ë–õ–û–ù")
    photo_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ photo SVG —Ñ–∞–π–ª—É (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞): ").strip()
    
    if photo_path and os.path.exists(photo_path):
        photo_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ photo —à–∞–±–ª–æ–Ω–∞: ").strip() or "Photo Template"
        photo_id = upload_template(photo_path, photo_name, 'photo')
        if photo_id:
            templates.append(('photo', photo_id, photo_name))
    else:
        print(f"‚ùå Photo —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±–∞ —à–∞–±–ª–æ–Ω–∞
    if len(templates) == 2:
        print(f"\nüé† –°–æ–∑–¥–∞—é –∫–∞—Ä—É—Å–µ–ª—å...")
        
        main_id = next(t[1] for t in templates if t[0] == 'main')
        photo_id = next(t[1] for t in templates if t[0] == 'photo')
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        carousel_id = str(uuid.uuid4())
        carousel_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏: ").strip() or "Uploaded Carousel"
        
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, carousel_name, main_id, photo_id])
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_name} ({carousel_id})")
    
    print(f"\nüìä –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û:")
    for role, template_id, name in templates:
        print(f"   {role.upper()}: {name} ({template_id})")
    
    return templates

def quick_upload():
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ"""
    
    print("‚ö° –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê")
    print("=" * 30)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º
    main_files = ['main.svg', 'main_template.svg', 'template_main.svg']
    photo_files = ['photo.svg', 'photo_template.svg', 'template_photo.svg']
    
    main_path = None
    photo_path = None
    
    for file in main_files:
        if os.path.exists(file):
            main_path = file
            break
    
    for file in photo_files:
        if os.path.exists(file):
            photo_path = file
            break
    
    templates = []
    
    if main_path:
        print(f"üìÑ –ù–∞–π–¥–µ–Ω main —à–∞–±–ª–æ–Ω: {main_path}")
        main_id = upload_template(main_path, "Main Template", 'main')
        if main_id:
            templates.append(('main', main_id, "Main Template"))
    
    if photo_path:
        print(f"üìÑ –ù–∞–π–¥–µ–Ω photo —à–∞–±–ª–æ–Ω: {photo_path}")
        photo_id = upload_template(photo_path, "Photo Template", 'photo')
        if photo_id:
            templates.append(('photo', photo_id, "Photo Template"))
    
    if len(templates) == 2:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å
        main_id = next(t[1] for t in templates if t[0] == 'main')
        photo_id = next(t[1] for t in templates if t[0] == 'photo')
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        carousel_id = str(uuid.uuid4())
        
        cursor.execute('''
            INSERT INTO carousels (id, name, main_template_id, photo_template_id)
            VALUES (?, ?, ?, ?)
        ''', [carousel_id, "Quick Upload Carousel", main_id, photo_id])
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ö–∞—Ä—É—Å–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {carousel_id}")
    
    return templates

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    print("2. –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–∏—â–µ—Ç main.svg –∏ photo.svg)")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "2":
        quick_upload()
    else:
        upload_templates_interactive()