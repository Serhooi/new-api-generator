#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å dyno.propertyimage2
"""

import sqlite3
import re

DATABASE_PATH = 'templates.db'

def debug_propertyimage2():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ dyno.propertyimage2 –≤ SVG —à–∞–±–ª–æ–Ω–∞—Ö"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê DYNO.PROPERTYIMAGE2")
    print("=" * 50)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ photo —à–∞–±–ª–æ–Ω—ã
    cursor.execute("SELECT id, name, svg_content FROM templates WHERE template_role = 'photo'")
    photo_templates = cursor.fetchall()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(photo_templates)} photo —à–∞–±–ª–æ–Ω–æ–≤")
    
    for template_id, name, svg_content in photo_templates:
        print(f"\nüéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à–∞–±–ª–æ–Ω: {name} ({template_id})")
        
        # –ò—â–µ–º –≤—Å–µ dyno –ø–æ–ª—è –≤ SVG
        dyno_patterns = [
            r'id="(dyno\.[^"]*)"',        # id="dyno.field"
            r"id='(dyno\.[^']*)'",        # id='dyno.field'
            r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
            r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        ]
        
        all_dyno_fields = set()
        for pattern in dyno_patterns:
            matches = re.findall(pattern, svg_content)
            all_dyno_fields.update(matches)
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ dyno –ø–æ–ª—è:")
        for field in sorted(all_dyno_fields):
            print(f"      - {field}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º propertyimage2
        if 'dyno.propertyimage2' in all_dyno_fields:
            print(f"   ‚úÖ dyno.propertyimage2 –ù–ê–ô–î–ï–ù!")
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º ID
            element_pattern = r'<[^>]*id="dyno\.propertyimage2"[^>]*>'
            match = re.search(element_pattern, svg_content)
            if match:
                element = match.group(0)
                print(f"   üìÑ –≠–ª–µ–º–µ–Ω—Ç: {element[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fill —Å pattern
                fill_match = re.search(r'fill="url\(#([^)]+)\)"', element)
                if fill_match:
                    pattern_id = fill_match.group(1)
                    print(f"   üéØ Pattern ID: {pattern_id}")
                    
                    # –ò—â–µ–º pattern –±–ª–æ–∫
                    pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                    pattern_match = re.search(pattern_pattern, svg_content, re.DOTALL)
                    if pattern_match:
                        print(f"   ‚úÖ Pattern –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω")
                    else:
                        print(f"   ‚ùå Pattern –±–ª–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"   ‚ùå Fill —Å pattern –ù–ï –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id='dyno.propertyimage2' –ù–ï –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ùå dyno.propertyimage2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —à–∞–±–ª–æ–Ω–µ")
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è
            similar_fields = [field for field in all_dyno_fields if 'property' in field.lower() or 'image' in field.lower()]
            if similar_fields:
                print(f"   üîç –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è: {similar_fields}")
    
    conn.close()

if __name__ == "__main__":
    debug_propertyimage2()