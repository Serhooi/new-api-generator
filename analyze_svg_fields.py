#!/usr/bin/env python3
"""
–ê–ù–ê–õ–ò–ó DYNO –ü–û–õ–ï–ô –í SVG –®–ê–ë–õ–û–ù–ï
==============================

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ dyno –ø–æ–ª—è –µ—Å—Ç—å –≤ SVG –∏ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–º–µ–Ω–∞
"""

import re
import sqlite3

def analyze_svg_template(template_id=None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç dyno –ø–æ–ª—è –≤ SVG —à–∞–±–ª–æ–Ω–µ"""
    print("üîç –ê–ù–ê–õ–ò–ó DYNO –ü–û–õ–ï–ô –í SVG –®–ê–ë–õ–û–ù–ï")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('templates.db')
        cursor = conn.cursor()
        
        if template_id:
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [template_id])
            result = cursor.fetchone()
            if not result:
                print(f"‚ùå –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            template_name, svg_content = result
            templates = [(template_id, template_name, svg_content)]
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            cursor.execute('SELECT id, name, svg_content FROM templates ORDER BY created_at DESC LIMIT 5')
            templates = cursor.fetchall()
        
        conn.close()
        
        for template_id, template_name, svg_content in templates:
            print(f"\nüìã –®–ê–ë–õ–û–ù: {template_name} ({template_id})")
            print("=" * 60)
            
            analyze_single_template(svg_content)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_single_template(svg_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω SVG —à–∞–±–ª–æ–Ω"""
    
    # 1. –ò—â–µ–º –≤—Å–µ dyno –ø–æ–ª—è —Å id
    print("\n1. üéØ DYNO –ü–û–õ–Ø –° ID:")
    id_pattern = r'id="(dyno\.[^"]*)"'
    id_matches = re.findall(id_pattern, svg_content)
    
    if id_matches:
        for field in sorted(set(id_matches)):
            print(f"   ‚úÖ {field}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç
            element_pattern = f'<([^>\\s]+)[^>]*id="{re.escape(field)}"[^>]*>'
            element_match = re.search(element_pattern, svg_content)
            if element_match:
                element_type = element_match.group(1)
                print(f"      üìù –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: <{element_type}>")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å fill="url(#pattern)", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º pattern
                fill_pattern = f'id="{re.escape(field)}"[^>]*fill="url\\(#([^)]+)\\)"'
                fill_match = re.search(fill_pattern, svg_content)
                if fill_match:
                    pattern_id = fill_match.group(1)
                    print(f"      üé® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pattern: #{pattern_id}")
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ dyno –ø–æ–ª–µ–π —Å id")
    
    # 2. –ò—â–µ–º dyno –ø–æ–ª—è –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    print("\n2. üîó DYNO –ü–û–õ–Ø –í –§–ò–ì–£–†–ù–´–• –°–ö–û–ë–ö–ê–•:")
    bracket_patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',  # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',      # {dyno.field}
    ]
    
    bracket_fields = set()
    for pattern in bracket_patterns:
        matches = re.findall(pattern, svg_content)
        bracket_fields.update(matches)
    
    if bracket_fields:
        for field in sorted(bracket_fields):
            print(f"   ‚úÖ {field}")
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ dyno –ø–æ–ª–µ–π –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö")
    
    # 3. –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è dyno
    print("\n3. üîç –í–°–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø DYNO:")
    all_dyno_pattern = r'dyno\.[a-zA-Z][a-zA-Z0-9]*'
    all_matches = re.findall(all_dyno_pattern, svg_content)
    
    if all_matches:
        unique_fields = sorted(set(all_matches))
        for field in unique_fields:
            print(f"   üìù {field}")
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π dyno")
    
    # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\n4. üñºÔ∏è –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    analyze_image_elements(svg_content)

def analyze_image_elements(svg_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG"""
    
    # –ò—â–µ–º pattern —ç–ª–µ–º–µ–Ω—Ç—ã
    pattern_pattern = r'<pattern[^>]*id="([^"]*)"[^>]*>'
    patterns = re.findall(pattern_pattern, svg_content)
    
    if patterns:
        print("   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ patterns:")
        for pattern_id in patterns:
            print(f"      üé® #{pattern_id}")
            
            # –ò—â–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç pattern
            usage_pattern = f'fill="url\\(#{re.escape(pattern_id)}\\)"[^>]*id="([^"]*)"'
            usage_match = re.search(usage_pattern, svg_content)
            if usage_match:
                element_id = usage_match.group(1)
                print(f"         üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º: {element_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ dyno –ø–æ–ª–µ?
                if element_id.startswith('dyno.'):
                    field_type = determine_field_type(element_id)
                    print(f"         üìê –¢–∏–ø –ø–æ–ª—è: {field_type}")
    
    # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç—ã
    image_pattern = r'<image[^>]*id="([^"]*)"[^>]*>'
    images = re.findall(image_pattern, svg_content)
    
    if images:
        print("   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ image —ç–ª–µ–º–µ–Ω—Ç—ã:")
        for image_id in images:
            print(f"      üñºÔ∏è #{image_id}")

def determine_field_type(field_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø dyno –ø–æ–ª—è"""
    field_lower = field_name.lower()
    
    if any(keyword in field_lower for keyword in ['image', 'photo', 'pic', 'headshot', 'logo', 'portrait']):
        return "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    elif any(keyword in field_lower for keyword in ['address', 'location', 'addr']):
        return "–∞–¥—Ä–µ—Å"
    elif any(keyword in field_lower for keyword in ['name', 'title', 'text']):
        return "—Ç–µ–∫—Å—Ç"
    elif any(keyword in field_lower for keyword in ['price', 'cost', 'amount']):
        return "—Ü–µ–Ω–∞"
    else:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def show_replacement_logic():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω—ã"""
    print("\nüîß –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ó–ê–ú–ï–ù–ê DYNO –ü–û–õ–ï–ô")
    print("=" * 50)
    
    print("""
üìã –ê–õ–ì–û–†–ò–¢–ú –ó–ê–ú–ï–ù–´:

1. üîç –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
   - –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="dyno.fieldName"
   - –≠–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å fill="url(#patternId)"
   - –ù–∞—Ö–æ–¥–∏—Ç pattern —Å —ç—Ç–∏–º ID
   - –í–Ω—É—Ç—Ä–∏ pattern –∏—â–µ—Ç <use xlink:href="#imageId">
   - –ó–∞–º–µ–Ω—è–µ—Ç href –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º <image id="imageId">

2. üìù –î–õ–Ø –¢–ï–ö–°–¢–ê:
   - –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç <text id="dyno.fieldName">
   - –í–Ω—É—Ç—Ä–∏ –∏—â–µ—Ç <tspan> —ç–ª–µ–º–µ–Ω—Ç—ã
   - –ó–∞–º–µ–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan

3. üè† –î–õ–Ø –ê–î–†–ï–°–û–í:
   - –ö–∞–∫ —Ç–µ–∫—Å—Ç, –Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
   - –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ tspan –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤

‚ö†Ô∏è –í–ê–ñ–ù–û:
- –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω—ã –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞—Ç—å
- dyno.companyLogo ‚â† dyno.logo ‚â† dyno.companylogo
- –†–µ–≥–∏—Å—Ç—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
""")

def create_field_mapping_suggestions(svg_content):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–∞–ø–ø–∏–Ω–≥—É –ø–æ–ª–µ–π"""
    print("\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ú–ê–ü–ü–ò–ù–ì–£ –ü–û–õ–ï–ô")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ dyno –ø–æ–ª—è –≤ SVG
    all_dyno_pattern = r'dyno\.[a-zA-Z][a-zA-Z0-9]*'
    svg_fields = sorted(set(re.findall(all_dyno_pattern, svg_content)))
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è
    standard_fields = [
        'dyno.agentName',
        'dyno.propertyAddress', 
        'dyno.price',
        'dyno.bedrooms',
        'dyno.bathrooms',
        'dyno.sqft',
        'dyno.agentPhone',
        'dyno.agentEmail',
        'dyno.agentPhoto',
        'dyno.propertyImage',
        'dyno.companyLogo'
    ]
    
    print("üìã –ü–û–õ–Ø –í SVG –®–ê–ë–õ–û–ù–ï:")
    for field in svg_fields:
        print(f"   ‚úÖ {field}")
    
    print("\nüìã –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ü–û–õ–Ø (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ):")
    for field in standard_fields:
        if field in svg_fields:
            print(f"   ‚úÖ {field} - –°–û–í–ü–ê–î–ê–ï–¢")
        else:
            print(f"   ‚ùå {field} - –ù–ï –ù–ê–ô–î–ï–ù–û –í SVG")
    
    print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ SVG —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ (dyno.companyLogo vs dyno.companylogo)")
    print("3. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ SVG –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† DYNO –ü–û–õ–ï–ô –í SVG")
    print("=" * 60)
    
    analyze_svg_template()
    show_replacement_logic()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        conn = sqlite3.connect('templates.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, name, svg_content FROM templates ORDER BY created_at DESC LIMIT 1')
        result = cursor.fetchone()
        conn.close()
        
        if result:
            template_id, template_name, svg_content = result
            print(f"\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ï–ì–û –®–ê–ë–õ–û–ù–ê: {template_name}")
            create_field_mapping_suggestions(svg_content)
    except:
        pass

if __name__ == "__main__":
    main()