#!/usr/bin/env python3
"""
–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ SVG –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è XML –æ—à–∏–±–æ–∫
"""

import re
import xml.etree.ElementTree as ET

def clean_svg_ultimate(svg_content):
    """
    –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ SVG —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å—é
    """
    print("üßπ –ù–∞—á–∏–Ω–∞—é —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É SVG...")
    
    cleaned = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
    print("‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã (–∫—Ä–æ–º–µ —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã")
    
    # 3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ image —Ç–µ–≥–æ–≤
    # –ò—â–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö image —Ç–µ–≥–æ–≤
    patterns = [
        r'<image([^>]*?)(?<!/)>(?!</image>)',  # <image ...> –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è
        r'<image([^>]*?)\s*>(?!</image>)',     # <image ...> —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        r'<image([^>]*?)(?<!/)\s*>',          # <image ...> –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ]
    
    for pattern in patterns:
        before_count = len(re.findall(pattern, cleaned))
        cleaned = re.sub(pattern, r'<image\1/>', cleaned)
        after_count = len(re.findall(pattern, cleaned))
        if before_count > 0:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {before_count} image —Ç–µ–≥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω: {pattern[:20]}...)")
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
    self_closing_tags = ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop', 'feOffset', 'feGaussianBlur', 'feFlood', 'feComposite', 'feMorphology']
    
    for tag in self_closing_tags:
        pattern = f'<{tag}([^>]*?)(?<!/)>(?!</{tag}>)'
        before_count = len(re.findall(pattern, cleaned))
        cleaned = re.sub(pattern, f'<{tag}\\1/>', cleaned)
        if before_count > 0:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {before_count} {tag} —Ç–µ–≥–æ–≤")
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    cleaned = re.sub(r'\s+\w+=""', '', cleaned)
    print("‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã")
    
    # 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    cleaned = re.sub(r'(\w+)=([^"\s>]+)(?=\s|>)', r'\1="\2"', cleaned)
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–≤—ã—á–∫–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö")
    
    # 7. –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    print("‚úÖ –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã")
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ XML
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_svg = cleaned[:1000] + "</svg>" if not cleaned[:1000].endswith("</svg>") else cleaned[:1000]
        ET.fromstring(test_svg)
        print("‚úÖ XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞ (—Ç–µ—Å—Ç)")
    except ET.ParseError as e:
        print(f"‚ö†Ô∏è XML –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã: {e}")
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
        print("üö® –ü—Ä–∏–º–µ–Ω—è—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        cleaned = re.sub(r'<image[^>]*(?<!/)>', '', cleaned)
        cleaned = re.sub(r'<use[^>]*(?<!/)>', '', cleaned)
        print("üö® –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏")
    
    print(f"üéØ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return cleaned

def update_app_with_ultimate_cleaning():
    """–û–±–Ω–æ–≤–ª—è–µ–º app.py —Å —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    
    print("üìù –ß–∏—Ç–∞—é app.py...")
    
    with open('app.py', 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ SVG
    old_cleaning_code = '''            # –û–ß–ò–©–ê–ï–ú SVG –ø–µ—Ä–µ–¥ rsvg-convert
            print("üßπ –û—á–∏—â–∞—é SVG –¥–ª—è rsvg-convert...")
            cleaned_svg = svg_content
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ image
            import re
            cleaned_svg = re.sub(r'<image([^>]*?)(?<!/)>', r'<image\\1/>', cleaned_svg)
            
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
            for tag in ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path']:
                cleaned_svg = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\\\1/>', cleaned_svg)
            
            print(f"üßπ SVG –æ—á–∏—â–µ–Ω –¥–ª—è rsvg-convert, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    new_cleaning_code = '''            # –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG
            print("üßπ –ü—Ä–∏–º–µ–Ω—è—é —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É SVG...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ image —Ç–µ–≥–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            patterns = [
                r'<image([^>]*?)(?<!/)>(?!</image>)',  # <image ...> –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è
                r'<image([^>]*?)\\s*>(?!</image>)',     # <image ...> —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                r'<image([^>]*?)(?<!/)\\s*>',          # <image ...> –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            ]
            
            for pattern in patterns:
                cleaned_svg = re.sub(pattern, r'<image\\\\1/>', cleaned_svg)
            
            # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
            self_closing_tags = ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop', 'feOffset', 'feGaussianBlur', 'feFlood', 'feComposite', 'feMorphology']
            
            for tag in self_closing_tags:
                pattern = f'<{tag}([^>]*?)(?<!/)>(?!</{tag}>)'
                cleaned_svg = re.sub(pattern, f'<{tag}\\\\1/>', cleaned_svg)
            
            # 5. –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
            cleaned_svg = re.sub(r'\\s+\\w+=""', '', cleaned_svg)
            cleaned_svg = re.sub(r'(\\w+)=([^"\\s>]+)(?=\\s|>)', r'\\\\1="\\\\2"', cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üßπ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥
    if old_cleaning_code in content:
        content = content.replace(old_cleaning_code, new_cleaning_code)
        print("‚úÖ –ö–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open('app.py', 'w') as f:
        f.write(content)
    
    print("üíæ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
    return True

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ
    test_svg = '''<svg><image href="test.jpg" x="0" y="0"><use href="#test"><rect width="100" height="100"></svg>'''
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—á–∏—Å—Ç–∫—É:")
    print(f"–î–æ: {test_svg}")
    
    cleaned = clean_svg_ultimate(test_svg)
    print(f"–ü–æ—Å–ª–µ: {cleaned}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º app.py
    print("\nüìù –û–±–Ω–æ–≤–ª—è—é app.py...")
    update_app_with_ultimate_cleaning()