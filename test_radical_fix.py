#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SVG
"""

import requests
import time

def test_radical_svg_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    test_data = {
        "main_template_id": "main_template_1",
        "photo_template_id": "photo_template_1", 
        "data": {
            "propertyaddress": "123 Test Street, Test City",
            "price": "$500,000",
            "beds": "3",
            "baths": "2",
            "sqft": "1,500",
            "propertyimage2": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
        }
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SVG...")
    print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞: {api_url}")
    
    try:
        start_time = time.time()
        response = requests.post(api_url, json=test_data, timeout=60)
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"Response: {response.text[:1000]}")
            return False
        
        result = response.json()
        
        print(f"‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(result.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if 'success' in result and result['success']:
            print("‚úÖ success: True")
        else:
            print("‚ùå success: False –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        if 'urls' in result and len(result['urls']) > 0:
            print(f"‚úÖ URLs: {len(result['urls'])} —Ñ–∞–π–ª–æ–≤")
            for i, url in enumerate(result['urls']):
                print(f"  {i+1}: {url}")
        else:
            print("‚ùå –ù–µ—Ç URLs –≤ –æ—Ç–≤–µ—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SVG –¥–æ—Å—Ç—É–ø–Ω—ã
        if 'urls' in result:
            for i, url in enumerate(result['urls'][:2]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL {i+1}...")
                try:
                    svg_response = requests.get(url, timeout=10)
                    if svg_response.status_code == 200:
                        svg_content = svg_response.text
                        print(f"‚úÖ SVG {i+1} –¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–≥–æ–≤
                        if '<image' in svg_content:
                            print(f"‚ö†Ô∏è SVG {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç image —Ç–µ–≥–∏ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!)")
                        else:
                            print(f"‚úÖ SVG {i+1} –æ—á–∏—â–µ–Ω –æ—Ç image —Ç–µ–≥–æ–≤")
                            
                        if '<use' in svg_content:
                            print(f"‚ö†Ô∏è SVG {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç use —Ç–µ–≥–∏ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!)")
                        else:
                            print(f"‚úÖ SVG {i+1} –æ—á–∏—â–µ–Ω –æ—Ç use —Ç–µ–≥–æ–≤")
                            
                    else:
                        print(f"‚ùå SVG {i+1} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {svg_response.status_code}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SVG {i+1}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_png_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"""
    
    print("\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É—é PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
    
    # –ü—Ä–æ—Å—Ç–æ–π SVG –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–≥–æ–≤
    clean_svg = '''<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="white"/>
        <text x="200" y="150" text-anchor="middle" font-size="24" fill="black">Test PNG</text>
        <circle cx="200" cy="200" r="50" fill="blue"/>
    </svg>'''
    
    api_url = "https://new-api-generator.onrender.com/api/convert-to-png"
    
    test_data = {
        "svg_content": clean_svg,
        "width": 400,
        "height": 300
    }
    
    try:
        response = requests.post(api_url, json=test_data, timeout=30)
        
        print(f"üìä PNG API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'png_url' in result:
                print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {result['png_url']}")
                return True
            else:
                print(f"‚ùå –ù–µ—Ç png_url –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
        else:
            print(f"‚ùå PNG API –æ—à–∏–±–∫–∞: {response.text[:500]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PNG —Ç–µ—Å—Ç–∞: {e}")
    
    return False

if __name__ == "__main__":
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–î–ò–ö–ê–õ–¨–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π API
    success1 = test_radical_svg_fix()
    
    # –¢–µ—Å—Ç 2: PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    success2 = test_png_conversion()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"‚úÖ Carousel API: {'–†–ê–ë–û–¢–ê–ï–¢' if success1 else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"‚úÖ PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {'–†–ê–ë–û–¢–ê–ï–¢' if success2 else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")