#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–ï–í–¨–Æ
======================

–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
"""

import requests
import json

def test_preview_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–µ–≤—å—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    print("üß™ –¢–ï–°–¢ API –ü–†–ï–í–¨–Æ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò")
    print("=" * 50)
    
    # URL API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    api_url = "http://localhost:5000"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    print("1. –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤...")
    try:
        response = requests.get(f"{api_url}/api/templates/all-previews")
        if response.status_code == 200:
            templates = response.json().get('templates', [])
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
            
            if templates:
                template_id = templates[0]['id']
                template_name = templates[0]['name']
                print(f"   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω: {template_name} ({template_id})")
            else:
                print("   ‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –í–°–ï–ú–ò –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    test_data = {
        "template_id": template_id,
        "replacements": {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            "dyno.agentName": "John Smith",
            "dyno.propertyAddress": "123 Main Street, Beverly Hills, CA 90210",
            "dyno.price": "$450,000",
            "dyno.bedrooms": "3",
            "dyno.bathrooms": "2",
            "dyno.sqft": "1,850",
            "dyno.agentPhone": "(555) 123-4567",
            "dyno.agentEmail": "john@realty.com",
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL
            "dyno.agentPhoto": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
            "dyno.propertyImage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop",
            
            # –õ–æ–≥–æ - –ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            "dyno.companyLogo": "https://via.placeholder.com/200x100/007bff/ffffff?text=COMPANY+LOGO",
            "dyno.logo": "https://via.placeholder.com/200x100/28a745/ffffff?text=LOGO",
            "dyno.brandLogo": "https://via.placeholder.com/200x100/dc3545/ffffff?text=BRAND",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è headshot
            "dyno.headshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
            "dyno.agentHeadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è property
            "dyno.propertyimage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop",
            "dyno.houseImage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop"
        },
        "type": "png",
        "width": 400,
        "height": 300
    }
    
    print(f"\n2. –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–≤—å—é...")
    print(f"   üìã –ü–æ–ª–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã: {len(test_data['replacements'])}")
    
    try:
        response = requests.post(
            f"{api_url}/api/preview/with-data",
            headers={"Content-Type": "application/json"},
            json=test_data
        )
        
        print(f"   üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('success'):
                print("   ‚úÖ –ü—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üñºÔ∏è URL –ø—Ä–µ–≤—å—é: {result.get('url', 'N/A')}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {result.get('width')}x{result.get('height')}")
                print(f"   üìä –ó–∞–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {result.get('replacements_count', 'N/A')}")
                print(f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {result.get('file_size', 'N/A')} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if result.get('url'):
                    file_url = f"{api_url}{result['url']}"
                    file_response = requests.head(file_url)
                    if file_response.status_code == 200:
                        print(f"   ‚úÖ –§–∞–π–ª –ø—Ä–µ–≤—å—é –¥–æ—Å—Ç—É–ø–µ–Ω: {file_url}")
                    else:
                        print(f"   ‚ùå –§–∞–π–ª –ø—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {file_response.status_code}")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {result.get('error', 'Unknown error')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"   üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_specific_fields():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è"""
    print("\nüéØ –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–û–õ–ï–ô")
    print("=" * 50)
    
    problematic_fields = [
        {
            "name": "–õ–æ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏",
            "fields": ["dyno.companyLogo", "dyno.logo", "dyno.brandLogo"],
            "test_url": "https://via.placeholder.com/200x100/007bff/ffffff?text=TEST+LOGO"
        },
        {
            "name": "–§–æ—Ç–æ –∞–≥–µ–Ω—Ç–∞ (headshot)",
            "fields": ["dyno.agentPhoto", "dyno.headshot", "dyno.agentHeadshot"],
            "test_url": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face"
        },
        {
            "name": "–§–æ—Ç–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "fields": ["dyno.propertyImage", "dyno.propertyimage", "dyno.houseImage"],
            "test_url": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop"
        }
    ]
    
    for field_group in problematic_fields:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É—é: {field_group['name']}")
        print(f"   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π: {field_group['fields']}")
        print(f"   üñºÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π URL: {field_group['test_url']}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        # –ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É SVG —à–∞–±–ª–æ–Ω–∞

def create_debug_html():
    """–°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("\nüìÑ –°–û–ó–î–ê–ù–ò–ï HTML –î–õ–Ø –û–¢–õ–ê–î–ö–ò")
    print("=" * 50)
    
    debug_html = '''<!DOCTYPE html>
<html>
<head>
    <title>Debug Preview Issues</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; }
        .error { color: red; }
        .success { color: green; }
        button { padding: 10px 20px; margin: 5px; }
        #result { margin-top: 20px; }
        img { max-width: 500px; border: 1px solid #ccc; }
    </style>
</head>
<body>
    <h1>üîç Debug Preview Issues</h1>
    
    <div class="test-section">
        <h2>Test Preview Generation</h2>
        <button onclick="testPreview()">Test Preview API</button>
        <button onclick="testWithDifferentFields()">Test Different Field Names</button>
        <div id="result"></div>
    </div>
    
    <script>
        async function testPreview() {
            const result = document.getElementById('result');
            result.innerHTML = '<p>Testing...</p>';
            
            try {
                const response = await fetch('/api/preview/with-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        template_id: 'your-template-id-here',
                        replacements: {
                            'dyno.agentPhoto': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
                            'dyno.propertyImage': 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop',
                            'dyno.companyLogo': 'https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO',
                            'dyno.agentName': 'John Smith Test',
                            'dyno.price': '$999,999'
                        },
                        type: 'png'
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    result.innerHTML = `
                        <div class="success">
                            <h3>‚úÖ Success!</h3>
                            <p>Preview URL: <a href="${data.url}" target="_blank">${data.url}</a></p>
                            <img src="${data.url}" alt="Preview">
                            <p>Replacements: ${data.replacements_count}</p>
                        </div>
                    `;
                } else {
                    result.innerHTML = `<div class="error">‚ùå Error: ${data.error}</div>`;
                }
            } catch (error) {
                result.innerHTML = `<div class="error">‚ùå Request failed: ${error.message}</div>`;
            }
        }
        
        async function testWithDifferentFields() {
            // Test with different field name variations
            const fieldVariations = [
                { 'dyno.logo': 'https://via.placeholder.com/200x100/007bff/ffffff?text=LOGO1' },
                { 'dyno.companyLogo': 'https://via.placeholder.com/200x100/28a745/ffffff?text=LOGO2' },
                { 'dyno.brandLogo': 'https://via.placeholder.com/200x100/dc3545/ffffff?text=LOGO3' }
            ];
            
            // Implementation for testing different field variations
            console.log('Testing field variations:', fieldVariations);
        }
    </script>
</body>
</html>'''
    
    with open('debug_preview.html', 'w', encoding='utf-8') as f:
        f.write(debug_html)
    
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª debug_preview.html")
    print("   üåê –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–ï–í–¨–Æ")
    print("=" * 60)
    
    test_preview_api()
    test_specific_fields()
    create_debug_html()
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python app.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ debug_preview.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()