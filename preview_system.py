#!/usr/bin/env python3
"""
–°–ò–°–¢–ï–ú–ê –ü–†–ï–í–¨–Æ –î–õ–Ø SVG –§–õ–ê–ï–†–û–í
=============================

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–¥–µ—Ç—å –ø—Ä–µ–≤—å—é SVG –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
–í–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL –∏ base64
"""

import os
import uuid
import cairosvg
from PIL import Image, ImageDraw, ImageFont
import io
import base64
import re
import requests
import time

def generate_svg_preview(svg_content, preview_type='png', width=400, height=300):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é SVG –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    
    Args:
        svg_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        preview_type: 'png', 'base64', 'thumbnail'
        width: –®–∏—Ä–∏–Ω–∞ –ø—Ä–µ–≤—å—é
        height: –í—ã—Å–æ—Ç–∞ –ø—Ä–µ–≤—å—é
    
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
    """
    try:
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é SVG ({preview_type}, {width}x{height})")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ SVG –≤–∞–ª–∏–¥–Ω—ã–π
        if not svg_content.strip().startswith('<svg'):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SVG –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º namespace –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'xmlns=' not in svg_content:
            svg_content = svg_content.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"')
        
        if preview_type == 'png':
            return generate_png_preview(svg_content, width, height)
        elif preview_type == 'base64':
            return generate_base64_preview(svg_content, width, height)
        elif preview_type == 'thumbnail':
            return generate_thumbnail_preview(svg_content)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–µ–≤—å—é: {preview_type}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_png_preview(svg_content, width=400, height=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –ø—Ä–µ–≤—å—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        preview_id = str(uuid.uuid4())
        preview_filename = f"preview_{preview_id}.png"
        preview_path = os.path.join('output', 'previews', preview_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(preview_path), exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(preview_path, 'wb') as f:
            f.write(png_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(preview_path)
        
        print(f"‚úÖ PNG –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {preview_path} ({file_size} –±–∞–π—Ç)")
        
        return {
            'success': True,
            'preview_id': preview_id,
            'filename': preview_filename,
            'path': preview_path,
            'url': f'/output/previews/{preview_filename}',
            'width': width,
            'height': height,
            'file_size': file_size,
            'format': 'png'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_base64_preview(svg_content, width=400, height=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç base64 –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        base64_data = base64.b64encode(png_data).decode('utf-8')
        data_url = f"data:image/png;base64,{base64_data}"
        
        print(f"‚úÖ Base64 –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ ({len(base64_data)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return {
            'success': True,
            'base64': base64_data,
            'data_url': data_url,
            'width': width,
            'height': height,
            'format': 'base64'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è base64 –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_thumbnail_preview(svg_content):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π thumbnail –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
    try:
        # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è thumbnail
        width, height = 150, 100
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PIL
        img = Image.open(io.BytesIO(png_data))
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è –≤–µ–±–∞
        output_buffer = io.BytesIO()
        img.save(output_buffer, format='PNG', optimize=True, quality=85)
        optimized_data = output_buffer.getvalue()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        thumbnail_id = str(uuid.uuid4())
        thumbnail_filename = f"thumb_{thumbnail_id}.png"
        thumbnail_path = os.path.join('output', 'previews', thumbnail_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(thumbnail_path), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π thumbnail
        with open(thumbnail_path, 'wb') as f:
            f.write(optimized_data)
        
        file_size = os.path.getsize(thumbnail_path)
        
        print(f"‚úÖ Thumbnail —Å–æ–∑–¥–∞–Ω: {thumbnail_path} ({file_size} –±–∞–π—Ç)")
        
        return {
            'success': True,
            'thumbnail_id': thumbnail_id,
            'filename': thumbnail_filename,
            'path': thumbnail_path,
            'url': f'/output/previews/{thumbnail_filename}',
            'width': width,
            'height': height,
            'file_size': file_size,
            'format': 'thumbnail'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thumbnail: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def create_preview_with_data(svg_content, replacements, preview_type='png'):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é SVG —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    Args:
        svg_content: –ò—Å—Ö–æ–¥–Ω—ã–π SVG —à–∞–±–ª–æ–Ω
        replacements: –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è dyno –ø–æ–ª–µ–π
        preview_type: –¢–∏–ø –ø—Ä–µ–≤—å—é
    
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
    """
    try:
        print(f"üé® –°–æ–∑–¥–∞—é –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏ ({len(replacements)} –∑–∞–º–µ–Ω)")
        print(f"üìã –ü–æ–ª—è –¥–ª—è –∑–∞–º–µ–Ω—ã: {list(replacements.keys())}")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        print("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–º–µ–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        processed_svg = process_image_replacements(svg_content, replacements)
        
        # –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        try:
            from app import process_svg_font_perfect
            print("‚úÖ –ò–º–ø–æ—Ä—Ç process_svg_font_perfect —É—Å–ø–µ—à–µ–Ω")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ process_svg_font_perfect: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processed_svg = simple_svg_replacement(processed_svg, replacements)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏ —Ç–µ–∫—Å—Ç–∞
            print("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ process_svg_font_perfect...")
            processed_svg = process_svg_font_perfect(processed_svg, replacements)
            print("‚úÖ –ó–∞–º–µ–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_svg_preview(processed_svg, preview_type)
        
        if preview_result['success']:
            preview_result['replacements_count'] = len(replacements)
            preview_result['has_data'] = True
            print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return preview_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        import traceback
        traceback.print_exc()
        return {
            'success': False,
            'error': str(e)
        }

def simple_svg_replacement(svg_content, replacements):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ dyno –ø–æ–ª–µ–π –≤ SVG (fallback —Ñ—É–Ω–∫—Ü–∏—è)
    """
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É (fallback)")
    
    processed_svg = svg_content
    
    for dyno_field, replacement in replacements.items():
        print(f"üîÑ –ó–∞–º–µ–Ω—è—é {dyno_field} ‚Üí {str(replacement)[:50]}...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        safe_replacement = str(replacement).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
        patterns = [
            dyno_field,  # –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞
            f'{{{{{dyno_field}}}}}',  # {{dyno.field}}
            f'{{{dyno_field}}}',     # {dyno.field}
        ]
        
        for pattern in patterns:
            if pattern in processed_svg:
                processed_svg = processed_svg.replace(pattern, safe_replacement)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
    
    return processed_svg

def cleanup_old_previews(max_age_hours=24):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã"""
    try:
        import time
        
        preview_dir = os.path.join('output', 'previews')
        if not os.path.exists(preview_dir):
            return
        
        current_time = time.time()
        max_age_seconds = max_age_hours * 3600
        deleted_count = 0
        
        for filename in os.listdir(preview_dir):
            file_path = os.path.join(preview_dir, filename)
            
            if os.path.isfile(file_path):
                file_age = current_time - os.path.getmtime(file_path)
                
                if file_age > max_age_seconds:
                    os.remove(file_path)
                    deleted_count += 1
        
        if deleted_count > 0:
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–≤—å—é: {e}")

# ========================================
# –°–ò–°–¢–ï–ú–ê –ó–ê–ú–ï–ù–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
# ========================================

def create_placeholder_image(width=142, height=56, color='#4F46E5', text='LOGO'):
    """–°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (width, height), color=color)
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        try:
            # –î–ª—è macOS
            font = ImageFont.truetype('/System/Library/Fonts/Arial.ttf', 20)
        except:
            try:
                # –î–ª—è Linux
                font = ImageFont.truetype('/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', 20)
            except:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.load_default()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        draw.text((x, y), text, fill='white', font=font)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        buffer.seek(0)
        
        img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
        return f"data:image/jpeg;base64,{img_base64}"
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return None

def download_and_convert_image(url, timeout=10, retries=3):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ fallback'–∞–º–∏"""
    
    # –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ placeholder'–æ–≤
    placeholder_alternatives = [
        'https://picsum.photos/142/56',  # Lorem Picsum
        'https://dummyimage.com/142x56/4F46E5/FFFFFF&text=LOGO',  # DummyImage
        'https://fakeimg.pl/142x56/4F46E5/FFFFFF/?text=LOGO'  # FakeImg
    ]
    
    urls_to_try = [url]
    
    # –ï—Å–ª–∏ —ç—Ç–æ via.placeholder.com, –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if 'via.placeholder.com' in url:
        print(f"üîÑ via.placeholder.com –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
        urls_to_try.extend(placeholder_alternatives)
    
    for attempt_url in urls_to_try:
        for attempt in range(retries):
            try:
                print(f"üì• –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}: {attempt_url[:50]}...")
                
                response = requests.get(attempt_url, timeout=timeout, headers={
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                })
                response.raise_for_status()
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(io.BytesIO(response.content))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ JPEG
                buffer = io.BytesIO()
                img.save(buffer, format='JPEG', quality=85)
                buffer.seek(0)
                
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
                base64_url = f"data:image/jpeg;base64,{img_base64}"
                
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ({len(base64_url)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return base64_url
                
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)[:100]}...")
                if attempt < retries - 1:
                    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                break
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, —Å–æ–∑–¥–∞–µ–º placeholder –ª–æ–∫–∞–ª—å–Ω–æ
    print(f"üé® –°–æ–∑–¥–∞—é placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ...")
    if 'placeholder' in url.lower() or 'logo' in url.lower():
        return create_placeholder_image()
    
    return None

def replace_image_in_svg(svg_content, field_name, new_image_url):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG —Ñ–∞–π–ª–µ.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä—è–º—É—é –∑–∞–º–µ–Ω—É URL, —Ç–∞–∫ –∏ –∑–∞–º–µ–Ω—É —á–µ—Ä–µ–∑ pattern -> image —Å–≤—è–∑–∏.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–ø–ø –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π aspect ratio –¥–ª—è headshot.
    
    Args:
        svg_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        field_name: –ò–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'dyno.propertyimage')
        new_image_url: URL –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ base64 –¥–∞–Ω–Ω—ã–µ
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
    """
    print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {field_name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if 'headshot' in field_name.lower() or 'agent' in field_name.lower():
        image_type = 'headshot'
        aspect_ratio = None  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º aspect ratio –¥–ª—è headshot
    elif 'property' in field_name.lower():
        image_type = 'property'
        aspect_ratio = 'xMidYMid slice'  # slice –¥–ª—è property (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ–±–ª–∞—Å—Ç—å)
    else:
        image_type = 'other'
        aspect_ratio = None  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º aspect ratio –¥–ª—è –¥—Ä—É–≥–∏—Ö
    
    print(f"üéØ –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_type}, aspect ratio: {aspect_ratio}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URL –≤ base64 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if new_image_url.startswith('http'):
        replacement_data = download_and_convert_image(new_image_url)
        if not replacement_data:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å—Ö–æ–¥–Ω—ã–π URL")
            replacement_data = new_image_url
    else:
        replacement_data = new_image_url
    
    # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å id –∏ href
    direct_pattern = rf'(<[^>]*id="{re.escape(field_name)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    direct_match = re.search(direct_pattern, svg_content)
    
    if direct_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å id: {field_name}")
        new_svg = re.sub(direct_pattern, 
                        lambda m: m.group(1) + replacement_data + m.group(2), 
                        svg_content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º aspect ratio —Ç–æ–ª—å–∫–æ –¥–ª—è property –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_type == 'property' and aspect_ratio:
            aspect_pattern = rf'(<[^>]*id="{re.escape(field_name)}"[^>]*preserveAspectRatio=")[^"]*("[^>]*>)'
            new_svg = re.sub(aspect_pattern,
                            lambda m: m.group(1) + aspect_ratio + m.group(2),
                            new_svg)
            print(f"üîß Aspect ratio –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {aspect_ratio} –¥–ª—è {image_type}")
        elif image_type == 'headshot':
            print(f"‚ÑπÔ∏è Aspect ratio –¥–ª—è headshot –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç—Å—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)")
        
        if new_svg != svg_content:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –∑–∞–º–µ–Ω–µ–Ω–æ!")
            return new_svg
    
    # –ú–µ—Ç–æ–¥ 2: –ù–û–í–û–ï - –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É (–¥–ª—è photo.svg)
    group_pattern = rf'<g[^>]*id="[^"]*{re.escape(field_name)}[^"]*"[^>]*>'
    group_match = re.search(group_pattern, svg_content, re.IGNORECASE)
    
    if group_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ —Å id: {field_name}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã
        group_start = group_match.end()
        group_end_match = re.search(r'</g>', svg_content[group_start:])
        
        if group_end_match:
            group_content = svg_content[group_start:group_start + group_end_match.start()]
            
            # –ò—â–µ–º fill="url(#pattern_id)" –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
            fill_match = re.search(r'fill="url\(#([^)]+)\)"', group_content)
            
            if fill_match:
                pattern_id = fill_match.group(1)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                
                return replace_via_pattern(svg_content, pattern_id, replacement_data, image_type, aspect_ratio)
            else:
                print("‚ùå Fill —Å pattern –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ")
        else:
            print("‚ùå –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ </g> –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å fill="url(#pattern_id)"
    element_pattern = rf'<[^>]*id="[^"]*{re.escape(field_name)}[^"]*"[^>]*fill="url\(#([^)]+)\)"[^>]*>'
    element_match = re.search(element_pattern, svg_content, re.IGNORECASE)
    
    if element_match:
        pattern_id = element_match.group(1)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
        
        return replace_via_pattern(svg_content, pattern_id, replacement_data, image_type, aspect_ratio)
    
    print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return svg_content

def replace_via_pattern(svg_content, pattern_id, replacement_data, image_type, aspect_ratio):
    """–ó–∞–º–µ–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pattern -> image —Å–≤—è–∑—å"""
    
    # –ò—â–µ–º pattern —Å –¥–∞–Ω–Ω—ã–º ID
    pattern_pattern = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
    pattern_match = re.search(pattern_pattern, svg_content, re.DOTALL)
    
    if not pattern_match:
        print(f"‚ùå Pattern —Å ID {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_content = pattern_match.group(1)
    
    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern
    use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"[^>]*/?>', pattern_content)
    if not use_match:
        print(f"‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern {pattern_id}")
        return svg_content
    
    image_id = use_match.group(1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω image ID: {image_id}")
    
    # –ó–∞–º–µ–Ω—è–µ–º image —ç–ª–µ–º–µ–Ω—Ç
    image_pattern = rf'(<image[^>]*id="{re.escape(image_id)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    
    def replace_image_href(match):
        return match.group(1) + replacement_data + match.group(2)
    
    new_svg = re.sub(image_pattern, replace_image_href, svg_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º aspect ratio —Ç–æ–ª—å–∫–æ –¥–ª—è property –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if image_type == 'property' and aspect_ratio:
        aspect_pattern = rf'(<image[^>]*id="{re.escape(image_id)}"[^>]*preserveAspectRatio=")[^"]*("[^>]*>)'
        new_svg = re.sub(aspect_pattern,
                        lambda m: m.group(1) + aspect_ratio + m.group(2),
                        new_svg)
        print(f"üîß Aspect ratio –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {aspect_ratio} –¥–ª—è {image_type}")
    elif image_type == 'headshot':
        print(f"‚ÑπÔ∏è Headshot aspect ratio –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)")
    
    if new_svg != svg_content:
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ pattern!")
        return new_svg
    else:
        print(f"‚ùå –ó–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ pattern –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return svg_content

def process_image_replacements(svg_content, image_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG (–ò–°–ö–õ–Æ–ß–ê–Ø headshot - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
    
    Args:
        svg_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        image_data: –°–ª–æ–≤–∞—Ä—å {field_name: image_url}
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
    """
    if not image_data:
        return svg_content
    
    print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(image_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    modified_svg = svg_content
    successful_replacements = 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ù–û –ò–°–ö–õ–Æ–ß–ê–ï–ú headshot
    image_fields = {}
    for k, v in image_data.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        is_image = any(word in k.lower() for word in ['image', 'photo', 'picture', 'logo', 'headshot'])
        
        if is_image:
            # –ò–°–ö–õ–Æ–ß–ê–ï–ú headshot –ø–æ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ö–µ–¥—à–æ—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
            if any(word in k.lower() for word in ['headshot', 'agent']):
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {k} (headshot) - –ø–æ–∫–∞–∑—ã–≤–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–∑ —à–∞–±–ª–æ–Ω–∞")
            else:
                image_fields[k] = v
    
    for field_name, image_url in image_fields.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {field_name}")
        
        original_size = len(modified_svg)
        modified_svg = replace_image_in_svg(modified_svg, field_name, image_url)
        new_size = len(modified_svg)
        
        if new_size != original_size:
            successful_replacements += 1
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {new_size - original_size:+d} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\n‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {successful_replacements}/{len(image_fields)}")
    print(f"‚ÑπÔ∏è Headshot –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ")
    return modified_svg

# ========================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–†–ï–í–¨–Æ
# ========================================

def test_preview_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–≤—å—é"""
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ï–í–¨–Æ")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π SVG
    test_svg = '''<svg width="400" height="300" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg">
        <rect width="400" height="300" fill="#f8f9fa"/>
        <circle cx="200" cy="100" r="50" fill="#007bff"/>
        <text x="200" y="200" text-anchor="middle" fill="#333" font-family="Arial" font-size="18">
            Test Preview
        </text>
        <text x="200" y="230" text-anchor="middle" fill="#666" font-family="Arial" font-size="14">
            dyno.agentName
        </text>
    </svg>'''
    
    # –¢–µ—Å—Ç 1: PNG –ø—Ä–µ–≤—å—é
    print("\n1. –¢–µ—Å—Ç PNG –ø—Ä–µ–≤—å—é:")
    png_result = generate_svg_preview(test_svg, 'png')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {png_result}")
    
    # –¢–µ—Å—Ç 2: Base64 –ø—Ä–µ–≤—å—é
    print("\n2. –¢–µ—Å—Ç Base64 –ø—Ä–µ–≤—å—é:")
    base64_result = generate_svg_preview(test_svg, 'base64')
    if base64_result['success']:
        print(f"   –£—Å–ø–µ—Ö: {len(base64_result['base64'])} —Å–∏–º–≤–æ–ª–æ–≤ base64")
    else:
        print(f"   –û—à–∏–±–∫–∞: {base64_result['error']}")
    
    # –¢–µ—Å—Ç 3: Thumbnail –ø—Ä–µ–≤—å—é
    print("\n3. –¢–µ—Å—Ç Thumbnail –ø—Ä–µ–≤—å—é:")
    thumb_result = generate_svg_preview(test_svg, 'thumbnail')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {thumb_result}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\n4. –¢–µ—Å—Ç –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏:")
    test_replacements = {
        'dyno.agentName': 'John Smith'
    }
    data_result = create_preview_with_data(test_svg, test_replacements)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {data_result}")

if __name__ == "__main__":
    test_preview_system()