#!/usr/bin/env python3
"""
–°–ò–°–¢–ï–ú–ê –ü–†–ï–í–¨–Æ –î–õ–Ø SVG –§–õ–ê–ï–†–û–í
=============================

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–¥–µ—Ç—å –ø—Ä–µ–≤—å—é SVG –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
"""

import os
import uuid
import cairosvg
from PIL import Image
import io
import base64

def generate_svg_preview(svg_content, preview_type='png', width=400, height=300):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é SVG –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    
    Args:
        svg_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG
        preview_type: 'png', 'base64', 'thumbnail'
        width: –®–∏—Ä–∏–Ω–∞ –ø—Ä–µ–≤—å—é
        height: –í—ã—Å–æ—Ç–∞ –ø—Ä–µ–≤—å—é
    
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
    """
    try:
        print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–≤—å—é SVG ({preview_type}, {width}x{height})")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ SVG –≤–∞–ª–∏–¥–Ω—ã–π
        if not svg_content.strip().startswith('<svg'):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SVG –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º namespace –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'xmlns=' not in svg_content:
            svg_content = svg_content.replace('<svg', '<svg xmlns="http://www.w3.org/2000/svg"')
        
        if preview_type == 'png':
            return generate_png_preview(svg_content, width, height)
        elif preview_type == 'base64':
            return generate_base64_preview(svg_content, width, height)
        elif preview_type == 'thumbnail':
            return generate_thumbnail_preview(svg_content)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–µ–≤—å—é: {preview_type}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_png_preview(svg_content, width=400, height=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –ø—Ä–µ–≤—å—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        preview_id = str(uuid.uuid4())
        preview_filename = f"preview_{preview_id}.png"
        preview_path = os.path.join('output', 'previews', preview_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(preview_path), exist_ok=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(preview_path, 'wb') as f:
            f.write(png_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(preview_path)
        
        print(f"‚úÖ PNG –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {preview_path} ({file_size} –±–∞–π—Ç)")
        
        return {
            'success': True,
            'preview_id': preview_id,
            'filename': preview_filename,
            'path': preview_path,
            'url': f'/output/previews/{preview_filename}',
            'width': width,
            'height': height,
            'file_size': file_size,
            'format': 'png'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_base64_preview(svg_content, width=400, height=300):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç base64 –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        base64_data = base64.b64encode(png_data).decode('utf-8')
        data_url = f"data:image/png;base64,{base64_data}"
        
        print(f"‚úÖ Base64 –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ ({len(base64_data)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        return {
            'success': True,
            'base64': base64_data,
            'data_url': data_url,
            'width': width,
            'height': height,
            'format': 'base64'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è base64 –ø—Ä–µ–≤—å—é: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def generate_thumbnail_preview(svg_content):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–π thumbnail –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
    try:
        # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è thumbnail
        width, height = 150, 100
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        png_data = cairosvg.svg2png(
            bytestring=svg_content.encode('utf-8'),
            output_width=width,
            output_height=height,
            background_color='white'
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PIL
        img = Image.open(io.BytesIO(png_data))
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è –≤–µ–±–∞
        output_buffer = io.BytesIO()
        img.save(output_buffer, format='PNG', optimize=True, quality=85)
        optimized_data = output_buffer.getvalue()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        thumbnail_id = str(uuid.uuid4())
        thumbnail_filename = f"thumb_{thumbnail_id}.png"
        thumbnail_path = os.path.join('output', 'previews', thumbnail_filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(thumbnail_path), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π thumbnail
        with open(thumbnail_path, 'wb') as f:
            f.write(optimized_data)
        
        file_size = os.path.getsize(thumbnail_path)
        
        print(f"‚úÖ Thumbnail —Å–æ–∑–¥–∞–Ω: {thumbnail_path} ({file_size} –±–∞–π—Ç)")
        
        return {
            'success': True,
            'thumbnail_id': thumbnail_id,
            'filename': thumbnail_filename,
            'path': thumbnail_path,
            'url': f'/output/previews/{thumbnail_filename}',
            'width': width,
            'height': height,
            'file_size': file_size,
            'format': 'thumbnail'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thumbnail: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def create_preview_with_data(svg_content, replacements, preview_type='png'):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é SVG —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    Args:
        svg_content: –ò—Å—Ö–æ–¥–Ω—ã–π SVG —à–∞–±–ª–æ–Ω
        replacements: –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è dyno –ø–æ–ª–µ–π
        preview_type: –¢–∏–ø –ø—Ä–µ–≤—å—é
    
    Returns:
        dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
    """
    try:
        print(f"üé® –°–æ–∑–¥–∞—é –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏ ({len(replacements)} –∑–∞–º–µ–Ω)")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ SVG
        from app import process_svg_font_perfect
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏
        processed_svg = process_svg_font_perfect(svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview_result = generate_svg_preview(processed_svg, preview_type)
        
        if preview_result['success']:
            preview_result['replacements_count'] = len(replacements)
            preview_result['has_data'] = True
            print(f"‚úÖ –ü—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return preview_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def cleanup_old_previews(max_age_hours=24):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã"""
    try:
        import time
        
        preview_dir = os.path.join('output', 'previews')
        if not os.path.exists(preview_dir):
            return
        
        current_time = time.time()
        max_age_seconds = max_age_hours * 3600
        deleted_count = 0
        
        for filename in os.listdir(preview_dir):
            file_path = os.path.join(preview_dir, filename)
            
            if os.path.isfile(file_path):
                file_age = current_time - os.path.getmtime(file_path)
                
                if file_age > max_age_seconds:
                    os.remove(file_path)
                    deleted_count += 1
        
        if deleted_count > 0:
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–≤—å—é: {e}")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–≤—å—é
def test_preview_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–≤—å—é"""
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ï–í–¨–Æ")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π SVG
    test_svg = '''<svg width="400" height="300" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg">
        <rect width="400" height="300" fill="#f8f9fa"/>
        <circle cx="200" cy="100" r="50" fill="#007bff"/>
        <text x="200" y="200" text-anchor="middle" fill="#333" font-family="Arial" font-size="18">
            Test Preview
        </text>
        <text x="200" y="230" text-anchor="middle" fill="#666" font-family="Arial" font-size="14">
            dyno.agentName
        </text>
    </svg>'''
    
    # –¢–µ—Å—Ç 1: PNG –ø—Ä–µ–≤—å—é
    print("\n1. –¢–µ—Å—Ç PNG –ø—Ä–µ–≤—å—é:")
    png_result = generate_svg_preview(test_svg, 'png')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {png_result}")
    
    # –¢–µ—Å—Ç 2: Base64 –ø—Ä–µ–≤—å—é
    print("\n2. –¢–µ—Å—Ç Base64 –ø—Ä–µ–≤—å—é:")
    base64_result = generate_svg_preview(test_svg, 'base64')
    if base64_result['success']:
        print(f"   –£—Å–ø–µ—Ö: {len(base64_result['base64'])} —Å–∏–º–≤–æ–ª–æ–≤ base64")
    else:
        print(f"   –û—à–∏–±–∫–∞: {base64_result['error']}")
    
    # –¢–µ—Å—Ç 3: Thumbnail –ø—Ä–µ–≤—å—é
    print("\n3. –¢–µ—Å—Ç Thumbnail –ø—Ä–µ–≤—å—é:")
    thumb_result = generate_svg_preview(test_svg, 'thumbnail')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {thumb_result}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\n4. –¢–µ—Å—Ç –ø—Ä–µ–≤—å—é —Å –¥–∞–Ω–Ω—ã–º–∏:")
    test_replacements = {
        'dyno.agentName': 'John Smith'
    }
    data_result = create_preview_with_data(test_svg, test_replacements)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {data_result}")

if __name__ == "__main__":
    test_preview_system()