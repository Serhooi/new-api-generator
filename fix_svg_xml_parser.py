#!/usr/bin/env python3
"""
–†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SVG —á–µ—Ä–µ–∑ XML –ø–∞—Ä—Å–µ—Ä
"""

import re
import xml.etree.ElementTree as ET
from xml.dom import minidom

def fix_svg_with_xml_parser(svg_content):
    """
    –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG —á–µ—Ä–µ–∑ XML –ø–∞—Ä—Å–µ—Ä
    """
    print("üî• –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG —á–µ—Ä–µ–∑ XML –ø–∞—Ä—Å–µ—Ä...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
        cleaned = svg_content
        
        # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
        cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
        
        # 3. –ê–ì–†–ï–°–°–ò–í–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏ image –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
        cleaned = re.sub(r'<image([^>]*?)(?<!/)>', r'<image\1/>', cleaned)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
        self_closing_tags = ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop', 'feOffset', 'feGaussianBlur', 'feFlood', 'feComposite', 'feMorphology']
        
        for tag in self_closing_tags:
            cleaned = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\1/>', cleaned)
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # 4. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ XML
        try:
            root = ET.fromstring(cleaned)
            print("‚úÖ XML –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
            cleaned = ET.tostring(root, encoding='unicode')
            print("‚úÖ XML —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
        except ET.ParseError as e:
            print(f"‚ö†Ô∏è XML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ú–ï–†–ê - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
            print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê - —É–±–∏—Ä–∞—é –≤—Å–µ image —Ç–µ–≥–∏!")
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ image —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            cleaned = re.sub(r'<image[^>]*/?>', '', cleaned)
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ use —Ç–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            cleaned = re.sub(r'<use[^>]*/?>', '', cleaned)
            
            print("üö® –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!")
        
        print(f"üéØ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
        return cleaned
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return svg_content

def update_app_with_xml_parser():
    """–û–±–Ω–æ–≤–ª—è–µ–º app.py —Å XML –ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    print("üìù –ß–∏—Ç–∞—é app.py...")
    
    with open('app.py', 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
    old_cleaning_pattern = r'            # –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG.*?print\(f"üßπ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: \{len\(cleaned_svg\)\} —Å–∏–º–≤–æ–ª–æ–≤"\)'
    
    new_cleaning_code = '''            # –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG –ß–ï–†–ï–ó XML –ü–ê–†–°–ï–†
            print("üî• –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG —á–µ—Ä–µ–∑ XML –ø–∞—Ä—Å–µ—Ä...")
            cleaned_svg = svg_content
            
            import re
            import xml.etree.ElementTree as ET
            
            try:
                # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
                
                # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
                cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
                
                # 3. –ê–ì–†–ï–°–°–ò–í–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
                cleaned_svg = re.sub(r'<image([^>]*?)(?<!/)>', r'<image\\\\1/>', cleaned_svg)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
                self_closing_tags = ['use', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop', 'feOffset', 'feGaussianBlur', 'feFlood', 'feComposite', 'feMorphology']
                
                for tag in self_closing_tags:
                    cleaned_svg = re.sub(f'<{tag}([^>]*?)(?<!/)>', f'<{tag}\\\\1/>', cleaned_svg)
                
                # 4. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ XML
                try:
                    root = ET.fromstring(cleaned_svg)
                    cleaned_svg = ET.tostring(root, encoding='unicode')
                    print("‚úÖ XML –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω—ã!")
                    
                except ET.ParseError as xml_error:
                    print(f"‚ö†Ô∏è XML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {xml_error}")
                    
                    # –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ú–ï–†–ê - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏
                    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê - —É–±–∏—Ä–∞—é –≤—Å–µ image —Ç–µ–≥–∏!")
                    cleaned_svg = re.sub(r'<image[^>]*/?>', '', cleaned_svg)
                    cleaned_svg = re.sub(r'<use[^>]*/?>', '', cleaned_svg)
                    print("üö® –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!")
                
            except Exception as critical_error:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {critical_error}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                cleaned_svg = svg_content
            
            print(f"üî• –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥
    import re as regex
    content = regex.sub(old_cleaning_pattern, new_cleaning_code, content, flags=regex.DOTALL)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open('app.py', 'w') as f:
        f.write(content)
    
    print("üíæ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å XML –ø–∞—Ä—Å–µ—Ä–æ–º")
    return True

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
    test_svg = '''<svg><image href="test.jpg" x="0" y="0" width="100" height="100"><use href="#test"><rect width="100" height="100"></svg>'''
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–¥–∏–∫–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É:")
    print(f"–î–æ: {test_svg}")
    
    cleaned = fix_svg_with_xml_parser(test_svg)
    print(f"–ü–æ—Å–ª–µ: {cleaned}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º app.py
    print("\nüìù –û–±–Ω–æ–≤–ª—è—é app.py...")
    update_app_with_xml_parser()