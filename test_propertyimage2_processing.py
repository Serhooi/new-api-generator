#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ dyno.propertyimage2
"""

import sqlite3
from app import process_svg_font_perfect

DATABASE_PATH = 'templates.db'

def test_propertyimage2_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É dyno.propertyimage2"""
    
    print("üß™ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò DYNO.PROPERTYIMAGE2")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º photo —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, name, svg_content FROM templates WHERE template_role = 'photo' LIMIT 1")
    result = cursor.fetchone()
    
    if not result:
        print("‚ùå Photo —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    template_id, name, svg_content = result
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É—é —à–∞–±–ª–æ–Ω: {name} ({template_id})")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_replacements = {
        'dyno.propertyimage2': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop',
        'dyno.agentheadshot': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
        'dyno.propertyaddress': '123 Main Street, Beverly Hills, CA 90210',
        'dyno.name': 'John Smith',
        'dyno.phone': '(555) 123-4567'
    }
    
    print(f"\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for field, value in test_replacements.items():
        print(f"   {field}: {value[:50]}...")
    
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É SVG...")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG
        processed_svg = process_svg_font_perfect(svg_content, test_replacements)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∑–∞–º–µ–Ω–∏–ª—Å—è
        if test_replacements['dyno.propertyimage2'] in processed_svg:
            print(f"‚úÖ dyno.propertyimage2 URL –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
        else:
            print(f"‚ùå dyno.propertyimage2 URL –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ dyno –ø–æ–ª—è
        import re
        remaining_dyno = re.findall(r'dyno\.[a-zA-Z][a-zA-Z0-9]*', processed_svg)
        if remaining_dyno:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ dyno –ø–æ–ª—è: {remaining_dyno}")
        else:
            print(f"‚úÖ –í—Å–µ dyno –ø–æ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with open('test_propertyimage2_result.svg', 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_propertyimage2_result.svg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
    
    conn.close()

if __name__ == "__main__":
    test_propertyimage2_processing()