#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê HEADSHOT –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø
===============================================

–£–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform –∑–Ω–∞—á–µ–Ω–∏—è –∏ —É–ª—É—á—à–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import re

def process_headshot_improved(svg_content, dyno_field, image_url):
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ headshot –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π
    """
    print(f"üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ headshot: {dyno_field}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    field_lower = dyno_field.lower()
    is_headshot = any(keyword in field_lower for keyword in ['headshot', 'agent', 'profile', 'portrait'])
    
    if not is_headshot:
        print("   ‚ö†Ô∏è –ù–µ headshot –ø–æ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return svg_content
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL
    safe_url = str(image_url).replace('&', '&amp;')
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id
    element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
    match = re.search(element_pattern, svg_content)
    
    if not match:
        print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_id = match.group(1)
    print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)
    element_shape = determine_element_shape(svg_content, pattern_id)
    print(f"   üîç –§–æ—Ä–º–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {element_shape}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headshot
    if element_shape == 'circular':
        # –î–ª—è –∫—Ä—É–≥–ª—ã—Ö headshot - –∑–∞–ø–æ–ª–Ω—è–µ–º –∫—Ä—É–≥, –Ω–æ –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π
        aspect_ratio = 'xMidYMid slice'
        use_transform = False  # –£–ë–ò–†–ê–ï–ú —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform!
        print(f"   ‚öôÔ∏è –ö—Ä—É–≥–ª—ã–π headshot: {aspect_ratio}, –±–µ–∑ transform")
    else:
        # –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö headshot - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë –ª–∏—Ü–æ
        aspect_ratio = 'xMidYMid meet'
        use_transform = False
        print(f"   ‚öôÔ∏è –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π headshot: {aspect_ratio}")
    
    # –ò—â–µ–º pattern –±–ª–æ–∫
    pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
    pattern_match = re.search(pattern_block_pattern, svg_content, re.DOTALL)
    
    if not pattern_match:
        print(f"   ‚ùå Pattern –±–ª–æ–∫ {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_content = pattern_match.group(1)
    pattern_full = pattern_match.group(0)
    
    # –£–ë–ò–†–ê–ï–ú –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ patternTransform
    old_pattern = pattern_full
    
    # –£–¥–∞–ª—è–µ–º patternTransform –µ—Å–ª–∏ –µ—Å—Ç—å
    new_pattern = re.sub(r'\s*patternTransform="[^"]*"', '', old_pattern)
    
    # –£–¥–∞–ª—è–µ–º transform –µ—Å–ª–∏ –µ—Å—Ç—å
    new_pattern = re.sub(r'\s*transform="[^"]*"', '', new_pattern)
    
    if new_pattern != old_pattern:
        svg_content = svg_content.replace(old_pattern, new_pattern)
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform –∏–∑ pattern")
    
    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ pattern
    use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
    use_match = re.search(use_pattern, pattern_content)
    
    if use_match:
        image_id = use_match.group(1)
        print(f"   üîó –ù–∞–π–¥–µ–Ω use —ç–ª–µ–º–µ–Ω—Ç: #{image_id}")
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
        image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
        image_match = re.search(image_pattern, svg_content)
        
        if image_match:
            old_image = image_match.group(0)
            new_image = old_image
            
            # –ó–∞–º–µ–Ω—è–µ–º URL
            new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
            new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π preserveAspectRatio
            if 'preserveAspectRatio=' in new_image:
                new_image = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', new_image)
            else:
                if new_image.endswith('/>'):
                    new_image = new_image[:-2] + f' preserveAspectRatio="{aspect_ratio}"/>'
                elif new_image.endswith('>'):
                    new_image = new_image[:-1] + f' preserveAspectRatio="{aspect_ratio}">'
            
            svg_content = svg_content.replace(old_image, new_image)
            print(f"   ‚úÖ Headshot –∑–∞–º–µ–Ω–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π: {aspect_ratio}")
            print(f"   üéØ –ë–ï–ó —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            print(f"   ‚ùå Image —ç–ª–µ–º–µ–Ω—Ç #{image_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"   ‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return svg_content

def determine_element_shape(svg_content, pattern_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫—Ä—É–≥–ª—ã–π –∏–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π)"""
    
    # –ò—â–µ–º clipPath —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å pattern
    clip_pattern = f'<clipPath[^>]*id="[^"]*{re.escape(pattern_id)}[^"]*"[^>]*>(.*?)</clipPath>'
    clip_match = re.search(clip_pattern, svg_content, re.DOTALL)
    
    if clip_match:
        clip_content = clip_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ circle –∏–ª–∏ ellipse
        if '<circle' in clip_content or '<ellipse' in clip_content:
            return 'circular'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rect —Å –±–æ–ª—å—à–∏–º–∏ rx/ry (—Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã)
        rect_pattern = r'<rect[^>]*rx="([^"]*)"[^>]*ry="([^"]*)"[^>]*>'
        rect_match = re.search(rect_pattern, clip_content)
        if rect_match:
            try:
                rx = float(rect_match.group(1) or 0)
                ry = float(rect_match.group(2) or 0)
                
                # –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–π, —Å—á–∏—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–º
                if rx > 20 or ry > 20:
                    return 'circular'
            except:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º path —Å –∫—Ä—É–≥–ª—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
        if '<path' in clip_content:
            path_pattern = r'd="([^"]*)"'
            path_match = re.search(path_pattern, clip_content)
            if path_match:
                path_data = path_match.group(1)
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –¥—É–≥ (A) –∏–ª–∏ –º–Ω–æ–≥–æ –∫—Ä–∏–≤—ã—Ö (C)
                if 'A' in path_data or path_data.count('C') > 4:
                    return 'circular'
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ pattern
    pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*width="([^"]*)"[^>]*height="([^"]*)"[^>]*>'
    pattern_match = re.search(pattern_pattern, svg_content)
    
    if pattern_match:
        try:
            width = float(pattern_match.group(1) or 0)
            height = float(pattern_match.group(2) or 0)
            
            # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫—Ä—É–≥–ª—ã–π
            if abs(width - height) < 5:
                return 'circular'
        except:
            pass
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
    return 'rectangular'

def create_improved_headshot_function():
    """–°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ"""
    
    improved_function = '''
def process_headshot_without_fixed_transforms(svg_content, dyno_field, image_url):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ headshot:
    - –£–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ transform –∑–Ω–∞—á–µ–Ω–∏—è
    - –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ preserveAspectRatio –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    - –õ—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    
    field_lower = dyno_field.lower()
    is_headshot = any(keyword in field_lower for keyword in ['headshot', 'agent', 'profile', 'portrait'])
    
    if not is_headshot:
        return svg_content
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL
    safe_url = str(image_url).replace('&', '&amp;')
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å pattern
    element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*fill="url\\\\(#([^)]+)\\\\)"[^>]*>'
    match = re.search(element_pattern, svg_content)
    
    if not match:
        return svg_content
    
    pattern_id = match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞
    element_shape = determine_element_shape(svg_content, pattern_id)
    
    # –í—ã–±–∏—Ä–∞–µ–º aspect ratio –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π
    if element_shape == 'circular':
        aspect_ratio = 'xMidYMid slice'  # –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫—Ä—É–≥, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    else:
        aspect_ratio = 'xMidYMid meet'   # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ patternTransform –∏–∑ pattern
    pattern_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>'
    pattern_match = re.search(pattern_pattern, svg_content)
    
    if pattern_match:
        old_pattern_tag = pattern_match.group(0)
        # –£–¥–∞–ª—è–µ–º patternTransform –∏ transform
        new_pattern_tag = re.sub(r'\\s*patternTransform="[^"]*"', '', old_pattern_tag)
        new_pattern_tag = re.sub(r'\\s*transform="[^"]*"', '', new_pattern_tag)
        
        if new_pattern_tag != old_pattern_tag:
            svg_content = svg_content.replace(old_pattern_tag, new_pattern_tag)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º image —ç–ª–µ–º–µ–Ω—Ç
    use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
    pattern_content_match = re.search(f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>', svg_content, re.DOTALL)
    
    if pattern_content_match:
        pattern_content = pattern_content_match.group(1)
        use_match = re.search(use_pattern, pattern_content)
        
        if use_match:
            image_id = use_match.group(1)
            image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
            image_match = re.search(image_pattern, svg_content)
            
            if image_match:
                old_image = image_match.group(0)
                new_image = old_image
                
                # –û–±–Ω–æ–≤–ª—è–µ–º URL –∏ aspect ratio
                new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
                new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                
                if 'preserveAspectRatio=' in new_image:
                    new_image = re.sub(r'preserveAspectRatio="[^"]*"', f'preserveAspectRatio="{aspect_ratio}"', new_image)
                else:
                    if new_image.endswith('/>'):
                        new_image = new_image[:-2] + f' preserveAspectRatio="{aspect_ratio}"/>'
                    elif new_image.endswith('>'):
                        new_image = new_image[:-1] + f' preserveAspectRatio="{aspect_ratio}">'
                
                svg_content = svg_content.replace(old_image, new_image)
    
    return svg_content
    '''
    
    return improved_function

def test_improved_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É"""
    print("\nüß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò")
    print("=" * 50)
    
    test_svg = '''<svg width="200" height="200">
  <defs>
    <pattern id="agent_pattern" patternUnits="objectBoundingBox" width="1" height="1" 
             patternTransform="scale(0.7) translate(0.15, 0.05)">
      <use xlink:href="#agent_image"/>
    </pattern>
    <image id="agent_image" href="old_url.jpg" width="1" height="1" 
           preserveAspectRatio="xMidYMid meet"/>
    <clipPath id="circle_clip">
      <circle cx="100" cy="100" r="80"/>
    </clipPath>
  </defs>
  
  <rect id="dyno.agentPhoto" x="20" y="20" width="160" height="160" 
        fill="url(#agent_pattern)" clip-path="url(#circle_clip)"/>
</svg>'''
    
    print("üìù –ò—Å—Ö–æ–¥–Ω—ã–π SVG (—Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º patternTransform):")
    print(test_svg)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    result = process_headshot_improved(test_svg, "dyno.agentPhoto", "https://example.com/new_agent.jpg")
    
    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(result)
    
    print("\nüìã –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:")
    print("1. ‚ùå –£–¥–∞–ª–µ–Ω patternTransform='scale(0.7) translate(0.15, 0.05)'")
    print("2. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("3. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω preserveAspectRatio='xMidYMid slice' –¥–ª—è –∫—Ä—É–≥–ª–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    print("4. ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° HEADSHOT –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 70)
    
    print("üéØ –ü–†–û–ë–õ–ï–ú–ê:")
    print("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è transform='scale(0.7) translate(0.15, 0.05)' –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    print("–≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–º–µ—â–µ–Ω–∏—é headshot –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –≤ –∫—Ä—É–≥–ª—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö")
    
    print("\nüí° –†–ï–®–ï–ù–ò–ï:")
    print("1. –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ patternTransform –∏ transform")
    print("2. –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ preserveAspectRatio –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–µ–º 'xMidYMid slice' –¥–ª—è –∫—Ä—É–≥–ª—ã—Ö headshot")
    print("4. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫—Ä—É–≥")
    
    test_improved_logic()
    
    improved_code = create_improved_headshot_function()
    print(f"\nüìù –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´ –í –ö–û–î–ï:")
    print(improved_code)
    
    print("\nüéØ –ö–ê–ö –ü–†–ò–ú–ï–ù–ò–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
    print("1. –ù–∞–π—Ç–∏ –≤ app.py —Å—Ç—Ä–æ–∫–∏ —Å patternTransform –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ translate")
    print("2. –ó–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    print("3. –£–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è")
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

if __name__ == "__main__":
    main()