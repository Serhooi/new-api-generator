#!/usr/bin/env python3
"""
–£—Å—Ç–æ–π—á–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å fallback'–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
"""

import re
import requests
import base64
from PIL import Image
import io
import time

def create_placeholder_image(width=142, height=56, color='#4F46E5', text='LOGO'):
    """–°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        from PIL import ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (width, height), color=color)
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        try:
            # –î–ª—è macOS
            font = ImageFont.truetype('/System/Library/Fonts/Arial.ttf', 20)
        except:
            try:
                # –î–ª—è Linux
                font = ImageFont.truetype('/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', 20)
            except:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.load_default()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        draw.text((x, y), text, fill='white', font=font)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=85)
        buffer.seek(0)
        
        img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
        return f"data:image/jpeg;base64,{img_base64}"
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return None

def download_and_convert_image(url, timeout=10, retries=3):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    
    # –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ placeholder'–æ–≤
    placeholder_alternatives = [
        'https://picsum.photos/142/56',  # Lorem Picsum
        'https://dummyimage.com/142x56/4F46E5/FFFFFF&text=LOGO',  # DummyImage
        'https://fakeimg.pl/142x56/4F46E5/FFFFFF/?text=LOGO'  # FakeImg
    ]
    
    urls_to_try = [url]
    
    # –ï—Å–ª–∏ —ç—Ç–æ via.placeholder.com, –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if 'via.placeholder.com' in url:
        print(f"üîÑ via.placeholder.com –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
        urls_to_try.extend(placeholder_alternatives)
    
    for attempt_url in urls_to_try:
        for attempt in range(retries):
            try:
                print(f"üì• –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}: {attempt_url}")
                
                response = requests.get(attempt_url, timeout=timeout, headers={
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                })
                response.raise_for_status()
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(io.BytesIO(response.content))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ JPEG
                buffer = io.BytesIO()
                img.save(buffer, format='JPEG', quality=85)
                buffer.seek(0)
                
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                img_base64 = base64.b64encode(buffer.read()).decode('utf-8')
                base64_url = f"data:image/jpeg;base64,{img_base64}"
                
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ({len(base64_url)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return base64_url
                
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < retries - 1:
                    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                break
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, —Å–æ–∑–¥–∞–µ–º placeholder –ª–æ–∫–∞–ª—å–Ω–æ
    print(f"üé® –°–æ–∑–¥–∞—é placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ...")
    if 'placeholder' in url.lower() or 'logo' in url.lower():
        return create_placeholder_image()
    
    return None

def replace_image_url_in_svg_robust(svg_content, field_name, new_image_url):
    """
    –£—Å—Ç–æ–π—á–∏–≤–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {field_name}")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id —Ä–∞–≤–Ω—ã–º field_name (–ø—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)
    direct_element_regex = rf'(<[^>]*id="{re.escape(field_name)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    direct_match = re.search(direct_element_regex, svg_content)
    
    if direct_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å id: {field_name}")
        # –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞ URL
        new_svg_content = re.sub(direct_element_regex, 
                                lambda m: m.group(1) + new_image_url + m.group(2), 
                                svg_content)
        
        if new_svg_content != svg_content:
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_image_url[:50]}...")
            return new_svg_content
    
    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ pattern
    print(f"üîç –ò—â—É —á–µ—Ä–µ–∑ pattern –¥–ª—è –ø–æ–ª—è: {field_name}")
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º field_name –∏ fill="url(#pattern_id)"
    element_regex = rf'<[^>]*id="[^"]*{re.escape(field_name)}[^"]*"[^>]*fill="url\(#([^)]+)\)"[^>]*>'
    element_match = re.search(element_regex, svg_content, re.IGNORECASE)
    
    if not element_match:
        print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_id = element_match.group(1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
    
    # –ò—â–µ–º pattern —Å —ç—Ç–∏–º ID
    pattern_regex = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
    pattern_match = re.search(pattern_regex, svg_content, re.DOTALL)
    
    if not pattern_match:
        print(f"‚ùå Pattern —Å ID {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return svg_content
    
    pattern_content = pattern_match.group(1)
    
    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤ pattern
    use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"[^>]*/?>', pattern_content)
    if not use_match:
        print(f"‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern {pattern_id}")
        return svg_content
    
    image_id = use_match.group(1)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω image ID: {image_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if new_image_url.startswith('http'):
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        replacement_url = download_and_convert_image(new_image_url)
        if not replacement_url:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å—Ö–æ–¥–Ω—ã–π URL")
            replacement_url = new_image_url
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ base64 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        replacement_url = new_image_url
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º image —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º ID
    image_regex = rf'(<image[^>]*id="{re.escape(image_id)}"[^>]*(?:xlink:href|href)=")[^"]*("[^>]*>)'
    
    def replace_image_href(match):
        return match.group(1) + replacement_url + match.group(2)
    
    new_svg_content = re.sub(image_regex, replace_image_href, svg_content)
    
    if new_svg_content != svg_content:
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –∑–∞–º–µ–Ω–µ–Ω–æ!")
        return new_svg_content
    else:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {field_name} –Ω–µ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ")
        return svg_content

def test_robust_replacement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—É—é –∑–∞–º–µ–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("üõ°Ô∏è –¢–ï–°–¢ –£–°–¢–û–ô–ß–ò–í–û–ô –ó–ê–ú–ï–ù–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
    try:
        with open('main.svg', 'r', encoding='utf-8') as f:
            svg_content = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª main.svg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä SVG —Ñ–∞–π–ª–∞: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ URL
    test_data = {
        'dyno.logo': 'https://via.placeholder.com/142x56/4F46E5/FFFFFF?text=LOGO',  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL
        'dyno.propertyimage': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300',  # –†–∞–±–æ—á–∏–π URL
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    modified_svg = svg_content
    
    for field_name, image_url in test_data.items():
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é: {field_name} = {image_url}")
        
        original_size = len(modified_svg)
        modified_svg = replace_image_url_in_svg_robust(modified_svg, field_name, image_url)
        new_size = len(modified_svg)
        
        if new_size != original_size:
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {new_size - original_size:+d} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("-" * 40)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = 'main_robust_replacement.svg'
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(modified_svg)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")

if __name__ == "__main__":
    test_robust_replacement()