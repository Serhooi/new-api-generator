#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
"""

import sqlite3
from test_simple_propertyimage2 import simple_process_svg

DATABASE_PATH = 'templates.db'

def test_uploaded_templates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    cursor.execute("SELECT id, name, template_role, svg_content FROM templates WHERE category = 'uploaded' ORDER BY created_at DESC")
    templates = cursor.fetchall()
    
    if not templates:
        print("‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã —Å –ø–æ–º–æ—â—å—é: python3 upload_templates.py")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(templates)} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        # –î–ª—è main —Å–ª–∞–π–¥–∞
        "dyno.propertyimage": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1080&h=600&fit=crop",
        "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face",
        
        # –î–ª—è photo —Å–ª–∞–π–¥–∞
        "dyno.propertyimage2": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop",
        "dyno.propertyimage3": "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=1080&h=800&fit=crop",
        
        # –û–±—â–∏–µ –ø–æ–ª—è
        "dyno.propertyaddress": "123 Main Street, Beverly Hills, CA 90210",
        "dyno.price": "$450,000",
        "dyno.name": "John Smith",
        "dyno.phone": "(555) 123-4567",
        "dyno.email": "john@example.com",
        "dyno.agentName": "John Smith",
        "dyno.agentPhone": "(555) 123-4567",
        "dyno.agentEmail": "john@example.com"
    }
    
    for template_id, name, role, svg_content in templates:
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É—é: {name} ({role.upper()})")
        print(f"   ID: {template_id}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
            processed_svg = simple_process_svg(svg_content, test_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_filename = f"test_uploaded_{role}_{template_id[:8]}.svg"
            with open(output_filename, 'w', encoding='utf-8') as f:
                f.write(processed_svg)
            
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {output_filename}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è photo —à–∞–±–ª–æ–Ω–∞
            if role == 'photo':
                if 'dyno.propertyimage2' in test_data:
                    test_url = test_data['dyno.propertyimage2']
                    escaped_url = test_url.replace('&', '&amp;')
                    
                    if escaped_url in processed_svg:
                        print(f"   ‚úÖ dyno.propertyimage2 –ù–ê–ô–î–ï–ù –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
                    else:
                        print(f"   ‚ùå dyno.propertyimage2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                        
                        # –ò—â–µ–º —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å
                        import re
                        image_urls = re.findall(r'href="([^"]*)"', processed_svg)
                        print(f"      üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ URL: {image_urls}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            import traceback
            traceback.print_exc()
    
    conn.close()

if __name__ == "__main__":
    test_uploaded_templates()