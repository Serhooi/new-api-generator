#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ PNG –ø—Ä–µ–≤—å—é –±–µ–∑ Cairo - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
"""

import os
import subprocess
import tempfile
from PIL import Image, ImageDraw, ImageFont
import io
import base64

def svg_to_png_with_wkhtmltopdf(svg_content, output_path, width=400, height=600):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG –≤ PNG –∏—Å–ø–æ–ª—å–∑—É—è wkhtmltopdf"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª —Å SVG
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ margin: 0; padding: 0; }}
                svg {{ width: {width}px; height: {height}px; }}
            </style>
        </head>
        <body>
            {svg_content}
        </body>
        </html>
        """
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
            f.write(html_content)
            html_path = f.name
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ PNG
            subprocess.run([
                'wkhtmltoimage',
                '--width', str(width),
                '--height', str(height),
                '--format', 'png',
                html_path,
                output_path
            ], check=True, capture_output=True)
            
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ wkhtmltoimage: {output_path}")
            return True
            
        finally:
            os.unlink(html_path)
            
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"‚ö†Ô∏è wkhtmltoimage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def svg_to_png_with_chrome(svg_content, output_path, width=400, height=600):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG –≤ PNG –∏—Å–ø–æ–ª—å–∑—É—è headless Chrome"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ margin: 0; padding: 0; background: white; }}
                svg {{ width: {width}px; height: {height}px; }}
            </style>
        </head>
        <body>
            {svg_content}
        </body>
        </html>
        """
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
            f.write(html_content)
            html_path = f.name
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Chrome –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            subprocess.run([
                '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',
                '--headless',
                '--disable-gpu',
                '--screenshot=' + output_path,
                '--window-size=' + f"{width},{height}",
                '--default-background-color=0',
                'file://' + html_path
            ], check=True, capture_output=True)
            
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Chrome: {output_path}")
            return True
            
        finally:
            os.unlink(html_path)
            
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"‚ö†Ô∏è Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def create_fallback_png(svg_content, output_path, width=400, height=600):
    """–°–æ–∑–¥–∞–µ—Ç PNG –∑–∞–≥–ª—É—à–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫—É
        img = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ SVG
        import re
        title_match = re.search(r'<title[^>]*>([^<]+)</title>', svg_content, re.IGNORECASE)
        title = title_match.group(1) if title_match else "Template Preview"
        
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
        draw.rectangle([10, 10, width-10, height-10], outline='#cccccc', width=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            font = ImageFont.load_default()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_bbox = draw.textbbox((0, 0), title, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        draw.text((x, y), title, fill='#333333', font=font)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É SVG
        draw.text((x, y - 30), "üìÑ SVG Template", fill='#666666', font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        img.save(output_path, 'PNG')
        print(f"‚úÖ Fallback PNG —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback PNG: {e}")
        return False

def convert_svg_to_png_advanced(svg_content, output_path, width=400, height=600):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    print(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é SVG –≤ PNG: {output_path}")
    
    # –ú–µ—Ç–æ–¥ 1: wkhtmltoimage
    if svg_to_png_with_wkhtmltopdf(svg_content, output_path, width, height):
        return True
    
    # –ú–µ—Ç–æ–¥ 2: Chrome headless
    if svg_to_png_with_chrome(svg_content, output_path, width, height):
        return True
    
    # –ú–µ—Ç–æ–¥ 3: Fallback –∑–∞–≥–ª—É—à–∫–∞
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –º–µ—Ç–æ–¥ –¥–ª—è PNG")
    return create_fallback_png(svg_content, output_path, width, height)

def update_app_with_png_previews():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç app.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PNG –ø—Ä–µ–≤—å—é"""
    
    print("üîß –û–±–Ω–æ–≤–ª—è—é app.py –¥–ª—è PNG –ø—Ä–µ–≤—å—é...")
    
    with open('app.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_svg_preview
    new_preview_function = '''
def generate_svg_preview(svg_content, width=400, height=600):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG –ø—Ä–µ–≤—å—é –∏–∑ SVG"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PNG —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as f:
            temp_png_path = f.name
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG
        from create_png_previews import convert_svg_to_png_advanced
        if convert_svg_to_png_advanced(svg_content, temp_png_path, width, height):
            # –ß–∏—Ç–∞–µ–º PNG —Ñ–∞–π–ª
            with open(temp_png_path, 'rb') as f:
                png_data = f.read()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_png_path)
            return png_data
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PNG –ø—Ä–µ–≤—å—é")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG –ø—Ä–µ–≤—å—é: {e}")
        return None
'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–¥–µ
    import re
    content = re.sub(
        r'def generate_svg_preview\(svg_content, width=400, height=600\):.*?return svg_content',
        new_preview_function.strip(),
        content,
        flags=re.DOTALL
    )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º API endpoints –¥–ª—è PNG
    content = content.replace('preview_url = f\'/output/previews/{template_id}_preview.svg\'', 
                             'preview_url = f\'/output/previews/{template_id}_preview.png\'')
    
    content = content.replace('svg_path = preview_path.replace(\'.png\', \'.svg\')',
                             'png_path = preview_path')
    
    content = content.replace('with open(svg_path, \'w\', encoding=\'utf-8\') as f:\\n                        f.write(svg_data)',
                             'with open(png_path, \'wb\') as f:\\n                        f.write(png_data)')
    
    with open('app.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ app.py –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è PNG –ø—Ä–µ–≤—å—é!")

if __name__ == "__main__":
    print("üé® –ù–ê–°–¢–†–û–ô–ö–ê PNG –ü–†–ï–í–¨–Æ –ë–ï–ó CAIRO")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    test_svg = '''<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
        <rect width="400" height="600" fill="#f0f0f0"/>
        <text x="200" y="300" text-anchor="middle" font-size="24">Test Preview</text>
    </svg>'''
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–µ—Ç–æ–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç wkhtmltoimage
    if svg_to_png_with_wkhtmltopdf(test_svg, 'test_wkhtml.png'):
        print("‚úÖ wkhtmltoimage —Ä–∞–±–æ—Ç–∞–µ—Ç")
        os.remove('test_wkhtml.png')
    
    # –¢–µ—Å—Ç Chrome
    if svg_to_png_with_chrome(test_svg, 'test_chrome.png'):
        print("‚úÖ Chrome headless —Ä–∞–±–æ—Ç–∞–µ—Ç")
        os.remove('test_chrome.png')
    
    # –¢–µ—Å—Ç fallback
    if create_fallback_png(test_svg, 'test_fallback.png'):
        print("‚úÖ Fallback –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        os.remove('test_fallback.png')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º app.py
    update_app_with_png_previews()
    
    print("\nüéâ PNG –ø—Ä–µ–≤—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
    print("  1. wkhtmltoimage (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    print("  2. Chrome headless (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
    print("  3. Fallback –∑–∞–≥–ª—É—à–∫–∏ (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")