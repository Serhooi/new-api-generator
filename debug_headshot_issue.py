#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å headshot –Ω–∞ –ø—Ä–µ–≤—å—é
"""

import requests
import re

def debug_headshot_on_preview():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å headshot"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê HEADSHOT –ù–ê –ü–†–ï–í–¨–Æ")
    print("=" * 35)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SVG —Å API
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    test_data = {
        "main_template_id": "9cb08943-8d1e-440c-a712-92111ec23048",
        "photo_template_id": "f6ed8d52-3bbf-495e-8b67-61dc7d4ff47d", 
        "data": {
            "propertyaddress": "Debug Headshot Test",
            "price": "$999,999",
            "beds": "3",
            "baths": "2",
            "name": "Test Agent",
            "phone": "+1 555 123 4567",
            "email": "test@agent.com",
            "agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face",
            "propertyimage2": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
        }
    }
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å —Å headshot...")
        response = requests.post(api_url, json=test_data, timeout=60)
        
        if response.status_code != 200:
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            return
        
        result = response.json()
        
        if not result.get('success'):
            print("‚ùå API –≤–µ—Ä–Ω—É–ª success: false")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º main SVG
        main_svg_url = result['urls'][0]
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é main SVG: {main_svg_url}")
        
        svg_response = requests.get(main_svg_url, timeout=10)
        svg_content = svg_response.text
        
        print(f"üìä SVG —Ä–∞–∑–º–µ—Ä: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º headshot –≤ SVG
        print("\nüîç –ê–ù–ê–õ–ò–ó HEADSHOT –í SVG:")
        
        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è headshot
        headshot_mentions = re.findall(r'[^>]*headshot[^<]*', svg_content, re.IGNORECASE)
        print(f"üìã –£–ø–æ–º–∏–Ω–∞–Ω–∏–π 'headshot': {len(headshot_mentions)}")
        
        for i, mention in enumerate(headshot_mentions[:3]):
            print(f"  {i+1}: {mention[:100]}...")
        
        # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è agent
        agent_mentions = re.findall(r'[^>]*agent[^<]*', svg_content, re.IGNORECASE)
        print(f"üìã –£–ø–æ–º–∏–Ω–∞–Ω–∏–π 'agent': {len(agent_mentions)}")
        
        for i, mention in enumerate(agent_mentions[:3]):
            print(f"  {i+1}: {mention[:100]}...")
        
        # –ò—â–µ–º image —Ç–µ–≥–∏ —Å headshot –∏–ª–∏ agent
        image_tags = re.findall(r'<image[^>]*(?:headshot|agent)[^>]*>', svg_content, re.IGNORECASE)
        print(f"üìã Image —Ç–µ–≥–æ–≤ —Å headshot/agent: {len(image_tags)}")
        
        for i, tag in enumerate(image_tags):
            print(f"  {i+1}: {tag[:150]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ href
            if 'href=' in tag:
                href_match = re.search(r'href="([^"]*)"', tag)
                if href_match:
                    href = href_match.group(1)
                    if href.startswith('data:image'):
                        print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç base64 –¥–∞–Ω–Ω—ã–µ ({len(href)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    elif href.startswith('http'):
                        print(f"    ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç URL: {href[:50]}...")
                    else:
                        print(f"    ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π href: {href[:50]}...")
                else:
                    print(f"    ‚ùå –ù–µ—Ç href –≤ —Ç–µ–≥–µ")
            else:
                print(f"    ‚ùå –ù–µ—Ç href –∞—Ç—Ä–∏–±—É—Ç–∞")
        
        # –ò—â–µ–º pattern —ç–ª–µ–º–µ–Ω—Ç—ã —Å headshot
        pattern_tags = re.findall(r'<pattern[^>]*>[^<]*<use[^>]*(?:headshot|agent)[^>]*>', svg_content, re.IGNORECASE)
        print(f"üìã Pattern —Ç–µ–≥–æ–≤ —Å headshot/agent: {len(pattern_tags)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG
        all_images = re.findall(r'<image[^>]*>', svg_content)
        print(f"üìã –í—Å–µ–≥–æ image —Ç–µ–≥–æ–≤: {len(all_images)}")
        
        base64_images = len(re.findall(r'data:image/[^;]+;base64,', svg_content))
        print(f"üìã Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {base64_images}")
        
        url_images = len(re.findall(r'https?://[^"\'>\s]+\.(jpg|jpeg|png|gif)', svg_content))
        print(f"üìã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {url_images}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open('debug_headshot_svg.svg', 'w') as f:
            f.write(svg_content)
        
        print("üíæ SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug_headshot_svg.svg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_headshot_in_template():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º headshot –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó HEADSHOT –í –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú –®–ê–ë–õ–û–ù–ï")
    print("=" * 45)
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π main.svg
    with open('main.svg', 'r') as f:
        template_content = f.read()
    
    print(f"üìä –†–∞–∑–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: {len(template_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ò—â–µ–º headshot —ç–ª–µ–º–µ–Ω—Ç—ã
    headshot_elements = re.findall(r'[^>]*headshot[^<]*', template_content, re.IGNORECASE)
    print(f"üìã Headshot —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(headshot_elements)}")
    
    for i, element in enumerate(headshot_elements):
        print(f"  {i+1}: {element[:100]}...")
    
    # –ò—â–µ–º agent —ç–ª–µ–º–µ–Ω—Ç—ã
    agent_elements = re.findall(r'[^>]*agent[^<]*', template_content, re.IGNORECASE)
    print(f"üìã Agent —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(agent_elements)}")
    
    for i, element in enumerate(agent_elements):
        print(f"  {i+1}: {element[:100]}...")

if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
    analyze_headshot_in_template()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç API
    debug_headshot_on_preview()