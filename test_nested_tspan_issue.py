#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò TSPAN –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò
===========================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º r'(<tspan[^>]*>)([^<]*)(</tspan>)'
–∫–æ—Ç–æ—Ä–æ–µ –ù–ï –£–ß–ò–¢–´–í–ê–ï–¢ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ tspan —ç–ª–µ–º–µ–Ω—Ç—ã!
"""

import re

def test_nested_tspan_problem():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ tspan"""
    print("üö® –ü–†–û–ë–õ–ï–ú–ê –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò TSPAN")
    print("=" * 50)
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π SVG —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ tspan
    problematic_svg = '''<text id="dyno.price">
        <tspan x="100" y="50">
            <tspan fill="green">$</tspan>dyno.price
        </tspan>
    </text>'''
    
    print("üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–π SVG:")
    print(problematic_svg)
    
    # –¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ –∫–æ–¥–∞
    current_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
    
    print(f"\nüîç –¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {current_pattern}")
    print("   –≠—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –∏—â–µ—Ç: [^<]* - –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –ö–†–û–ú–ï <")
    print("   –ü–†–û–ë–õ–ï–ú–ê: –û–Ω –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º < (–æ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ tspan)!")
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    matches = re.findall(current_pattern, problematic_svg)
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {len(matches)}")
    
    for i, match in enumerate(matches):
        print(f"   {i+1}: Opening='{match[0]}', Content='{match[1]}', Closing='{match[2]}'")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–º–µ–Ω–µ
    print(f"\nüîÑ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–º–µ–Ω–µ:")
    
    def replace_tspan_content(tspan_match):
        opening_tag = tspan_match.group(1)
        old_content = tspan_match.group(2)  # –≠–¢–û –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê!
        closing_tag = tspan_match.group(3)
        
        replacement = "NEW_VALUE"
        print(f"      üéØ –ó–∞–º–µ–Ω—è—é: '{old_content}' ‚Üí '{replacement}'")
        print(f"         –ü–†–û–ë–õ–ï–ú–ê: old_content –ø—É—Å—Ç–æ–π –∏–∑-–∑–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ <tspan>!")
        
        return opening_tag + replacement + closing_tag
    
    result = re.sub(current_pattern, replace_tspan_content, problematic_svg, count=1)
    print(f"\n‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(result)

def test_correct_solution():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
    print("\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï")
    print("=" * 50)
    
    problematic_svg = '''<text id="dyno.price">
        <tspan x="100" y="50">
            <tspan fill="green">$</tspan>dyno.price
        </tspan>
    </text>'''
    
    print("üìù –¢–æ—Ç –∂–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG:")
    print(problematic_svg)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º tspan
    # –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–ª–∏ –±–æ–ª–µ–µ —É–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    
    def find_and_replace_dyno_in_tspan(svg_content, dyno_field, replacement):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print(f"\nüîß –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ {dyno_field} ‚Üí {replacement}")
        
        # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
        text_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
        text_match = re.search(text_pattern, svg_content, re.DOTALL)
        
        if not text_match:
            print("‚ùå Text —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return svg_content
        
        text_content = text_match.group(1)
        print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ text —ç–ª–µ–º–µ–Ω—Ç–∞:")
        print(f"   '{text_content.strip()}'")
        
        # –í–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ regex, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º dyno –ø–æ–ª–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
        # –≥–¥–µ –±—ã –æ–Ω–æ –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–æ—Å—å –≤ —Ç–µ–∫—Å—Ç–µ
        if dyno_field in text_content:
            new_text_content = text_content.replace(dyno_field, replacement)
            new_svg = svg_content.replace(text_content, new_text_content)
            
            print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"   {dyno_field} ‚Üí {replacement}")
            
            return new_svg
        else:
            print(f"‚ö†Ô∏è {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º")
            return svg_content
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    result = find_and_replace_dyno_in_tspan(problematic_svg, "dyno.price", "$450,000")
    print(f"\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(result)

def test_real_world_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    print("\nüåç –†–ï–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò")
    print("=" * 50)
    
    real_cases = [
        {
            "name": "–¶–µ–Ω–∞ —Å —Å–∏–º–≤–æ–ª–æ–º –¥–æ–ª–ª–∞—Ä–∞",
            "svg": '''<text id="dyno.price">
                <tspan x="100" y="50">
                    <tspan fill="green" font-weight="bold">$</tspan>dyno.price
                </tspan>
            </text>''',
            "field": "dyno.price",
            "replacement": "450,000"
        },
        {
            "name": "–ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å –∏–∫–æ–Ω–∫–æ–π",
            "svg": '''<text id="dyno.agentName">
                <tspan x="100" y="50">
                    <tspan>üë§</tspan> dyno.agentName
                </tspan>
            </text>''',
            "field": "dyno.agentName", 
            "replacement": "John Smith"
        },
        {
            "name": "–ê–¥—Ä–µ—Å —Å –∏–∫–æ–Ω–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏",
            "svg": '''<text id="dyno.address">
                <tspan x="100" y="50">
                    <tspan fill="blue">üìç</tspan> dyno.address
                </tspan>
            </text>''',
            "field": "dyno.address",
            "replacement": "123 Main Street, Beverly Hills, CA"
        }
    ]
    
    for case in real_cases:
        print(f"\nüìã –°–ª—É—á–∞–π: {case['name']}")
        print(f"   –ü–æ–ª–µ: {case['field']}")
        print(f"   –ó–∞–º–µ–Ω–∞: {case['replacement']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–µ–∫—É—â–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
        current_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
        matches = re.findall(current_pattern, case['svg'])
        
        print(f"   üîç –¢–µ–∫—É—â–∏–π regex –Ω–∞—Ö–æ–¥–∏—Ç {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for i, match in enumerate(matches):
            content = match[1] if len(match) > 1 else "N/A"
            print(f"      {i+1}: '{content}'")
            if case['field'] in content:
                print(f"         ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç {case['field']}")
            else:
                print(f"         ‚ùå –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç {case['field']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if case['field'] in case['svg']:
            result = case['svg'].replace(case['field'], case['replacement'])
            print(f"   ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print(f"   ‚ùå –ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–º –ø–æ–∏—Å–∫–æ–º")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –í–õ–û–ñ–ï–ù–ù–´–ú–ò TSPAN")
    print("=" * 60)
    
    test_nested_tspan_problem()
    test_correct_solution()
    test_real_world_cases()
    
    print("\nüí° –í–´–í–û–î–´:")
    print("1. –¢–µ–∫—É—â–∏–π regex r'(<tspan[^>]*>)([^<]*)(</tspan>)' –ù–ï –†–ê–ë–û–¢–ê–ï–¢ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ tspan")
    print("2. –ü–∞—Ç—Ç–µ—Ä–Ω [^<]* –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º < –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
    print("3. –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É—Å—Ç–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
    print("4. –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É —Å—Ç—Ä–æ–∫ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ regex")
    print("5. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —É–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ XML/SVG")

if __name__ == "__main__":
    main()