#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –û–ë–†–ê–ë–û–¢–ö–û–ô –¢–ï–ö–°–¢–ê –í SVG
==============================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≥–¥–µ "–ø—Ä–æ–ø–∞–¥–∞—é—Ç" —Å–ª–æ–≤–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SVG
"""

import re

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    text = str(text)
    print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
    
    text = text.replace('&', '&amp;')  # –í–ê–ñ–ù–û: & –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    print(f"üîí –ü–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: '{text}'")
    return text

def test_tspan_replacement():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ tspan"""
    print("üß™ –¢–ï–°–¢: –ó–∞–º–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ tspan")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä SVG —Å tspan
    test_svg = '''<text id="dyno.agentName" x="100" y="50">
        <tspan x="100" y="50">dyno.agentName</tspan>
    </text>'''
    
    replacement_text = "John Smith & Associates"
    dyno_field = "dyno.agentName"
    
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π SVG:\n{test_svg}")
    print(f"üìù –ó–∞–º–µ–Ω–∞: {dyno_field} ‚Üí {replacement_text}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    safe_replacement = safe_escape_for_svg(replacement_text)
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
    element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
    match = re.search(element_pattern, test_svg, re.DOTALL)
    
    if match:
        element_content = match.group(1)
        print(f"üéØ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: '{element_content.strip()}'")
        
        # –ò—â–µ–º tspan
        tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
        tspan_match = re.search(tspan_pattern, element_content)
        
        if tspan_match:
            opening_tag = tspan_match.group(1)
            old_content = tspan_match.group(2)
            closing_tag = tspan_match.group(3)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω tspan:")
            print(f"   Opening: {opening_tag}")
            print(f"   Content: '{old_content}'")
            print(f"   Closing: {closing_tag}")
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            new_tspan = opening_tag + safe_replacement + closing_tag
            new_element_content = element_content.replace(tspan_match.group(0), new_tspan)
            new_svg = test_svg.replace(element_content, new_element_content)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{new_svg}")
        else:
            print("‚ùå tspan –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_address_wrapping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∞–¥—Ä–µ—Å–æ–≤"""
    print("\nüè† –¢–ï–°–¢: –ü–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–æ–≤")
    print("=" * 50)
    
    def wrap_address_text(address_text, max_length=35):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∞–¥—Ä–µ—Å–∞ –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏"""
        print(f"üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥—Ä–µ—Å: '{address_text}' (–¥–ª–∏–Ω–∞: {len(address_text)})")
        
        if not address_text or len(address_text) <= max_length:
            print("‚úÖ –ê–¥—Ä–µ—Å –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ –Ω—É–∂–µ–Ω")
            return address_text, ""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        words = address_text.split()
        print(f"üî§ –°–ª–æ–≤–∞: {words}")
        
        if len(words) <= 1:
            print("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return address_text, ""
        
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        best_break = len(words) // 2
        print(f"üéØ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞: {best_break}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
        for i, word in enumerate(words):
            if ',' in word and i > 0 and i < len(words) - 1:
                first_part = ' '.join(words[:i+1])
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è –≤ —Å–ª–æ–≤–µ '{word}' (–ø–æ–∑–∏—Ü–∏—è {i})")
                print(f"    –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: '{first_part}' (–¥–ª–∏–Ω–∞: {len(first_part)})")
                
                if len(first_part) >= 15:  # –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                    best_break = i + 1
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—Ä—ã–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π: {best_break}")
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–ø—è—Ç—É—é, –∏—â–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if best_break == len(words) // 2:
            print("üîç –ó–∞–ø—è—Ç–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤...")
            for i, word in enumerate(words):
                if i > 0 and i < len(words) - 1:
                    first_part = ' '.join(words[:i+1])
                    if 20 <= len(first_part) <= max_length:
                        best_break = i + 1
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤: {best_break}")
                        break
        
        first_line = ' '.join(words[:best_break])
        second_line = ' '.join(words[best_break:])
        
        print(f"üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: '{first_line}' (–¥–ª–∏–Ω–∞: {len(first_line)})")
        print(f"üìù –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: '{second_line}' (–¥–ª–∏–Ω–∞: {len(second_line)})")
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        if len(second_line) > max_length:
            print("‚ùå –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
            return address_text, ""
        
        return first_line, second_line
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    test_addresses = [
        "123 Main Street, Beverly Hills, CA 90210",
        "456 Very Long Property Address That Should Be Wrapped, Los Angeles, California 90028",
        "789 Short St, NYC 10001",
        "1000 Extremely Long Property Address With Many Words That Definitely Needs Wrapping, San Francisco, California 94102"
    ]
    
    for addr in test_addresses:
        print(f"\nüè† –¢–µ—Å—Ç–∏—Ä—É—é –∞–¥—Ä–µ—Å: {addr}")
        first, second = wrap_address_text(addr)
        if second:
            print(f"‚úÖ –†–∞–∑–±–∏—Ç–æ –Ω–∞:")
            print(f"   1: {first}")
            print(f"   2: {second}")
        else:
            print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –µ—Å—Ç—å: {first}")

def test_regex_patterns():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüîç –¢–ï–°–¢: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
    print("=" * 50)
    
    test_svg = '''<text id="dyno.agentName" x="100" y="50" font-family="Inter">
        <tspan x="100" y="50">dyno.agentName</tspan>
    </text>
    <text id="dyno.propertyAddress" x="100" y="100">
        <tspan x="100" y="100">dyno.propertyAddress</tspan>
    </text>'''
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = [
        r'<text[^>]*id="dyno\.agentName"[^>]*>(.*?)</text>',
        r'<text[^>]*id="dyno\.propertyAddress"[^>]*>(.*?)</text>',
        r'(<tspan[^>]*>)([^<]*)(</tspan>)'
    ]
    
    for i, pattern in enumerate(patterns):
        print(f"\nüîç –ü–∞—Ç—Ç–µ—Ä–Ω {i+1}: {pattern}")
        matches = re.findall(pattern, test_svg, re.DOTALL)
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        for j, match in enumerate(matches):
            print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {j+1}: {match}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê –í SVG")
    print("=" * 60)
    
    test_tspan_replacement()
    test_address_wrapping()
    test_regex_patterns()
    
    print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()