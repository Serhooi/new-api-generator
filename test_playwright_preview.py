#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Playwright –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é
"""

import os
import tempfile

def test_playwright_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Playwright"""
    
    print("üé≠ –¢–ï–°–¢ PLAYWRIGHT")
    print("=" * 50)
    
    try:
        from playwright.sync_api import sync_playwright
        print("‚úÖ Playwright –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
        with sync_playwright() as p:
            print("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã:")
            
            try:
                browser = p.chromium.launch()
                print("  ‚úÖ Chromium —Ä–∞–±–æ—Ç–∞–µ—Ç")
                browser.close()
            except Exception as e:
                print(f"  ‚ùå Chromium: {e}")
            
            try:
                browser = p.firefox.launch()
                print("  ‚úÖ Firefox —Ä–∞–±–æ—Ç–∞–µ—Ç")
                browser.close()
            except Exception as e:
                print(f"  ‚ùå Firefox: {e}")
                
        return True
        
    except ImportError as e:
        print(f"‚ùå Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}")
        return False

def test_svg_to_png_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é SVG –≤ PNG"""
    
    print("\nüñºÔ∏è –¢–ï–°–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò SVG ‚Üí PNG")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π SVG
    test_svg = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <rect width="400" height="600" fill="#f0f8ff"/>
  <rect x="20" y="20" width="360" height="560" fill="white" stroke="#ddd" stroke-width="2"/>
  <text x="200" y="100" text-anchor="middle" font-family="Arial" font-size="24" fill="#333">
    Test Template
  </text>
  <rect x="50" y="150" width="300" height="200" fill="#e6f3ff" stroke="#4a90e2" stroke-width="2"/>
  <text x="200" y="260" text-anchor="middle" font-family="Arial" font-size="16" fill="#4a90e2">
    Preview Content
  </text>
  <circle cx="200" cy="450" r="50" fill="#ff6b6b"/>
  <text x="200" y="455" text-anchor="middle" font-family="Arial" font-size="14" fill="white">
    Logo
  </text>
</svg>'''
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
        output_path = tmp_file.name
    
    try:
        from png_preview_with_playwright import svg_to_png_with_playwright
        
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π SVG...")
        success = svg_to_png_with_playwright(test_svg, output_path, 400, 600)
        
        if success and os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ PNG —Å–æ–∑–¥–∞–Ω: {output_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} bytes")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π PNG
            try:
                from PIL import Image
                img = Image.open(output_path)
                print(f"üìê –†–∞–∑–º–µ—Ä—ã PNG: {img.size}")
                print(f"üé® –†–µ–∂–∏–º: {img.mode}")
                img.close()
                print("‚úÖ PNG —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π")
            except Exception as e:
                print(f"‚ùå PNG —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
            
            return True
        else:
            print("‚ùå PNG –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å png_preview_with_playwright –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(output_path)
        except:
            pass

def test_pil_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PIL fallback"""
    
    print("\nüé® –¢–ï–°–¢ PIL FALLBACK")
    print("=" * 40)
    
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (400, 600), color='#f8f9fa')
        draw = ImageDraw.Draw(img)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç
        for y in range(600):
            color_val = int(248 - (y * 20 / 600))
            draw.line([(0, y), (400, y)], fill=(color_val, color_val + 2, color_val + 5))
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        draw.rectangle([20, 20, 380, 580], outline='#dee2e6', width=3)
        draw.text((200, 300), "PIL Fallback Test", fill='#2d3748', anchor='mm')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
            output_path = tmp_file.name
        
        img.save(output_path)
        
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ PIL –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} bytes")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            os.unlink(output_path)
            return True
        else:
            print("‚ùå PIL –ø—Ä–µ–≤—å—é –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PIL: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–ï–í–¨–Æ")
    print("=" * 60)
    
    playwright_ok = test_playwright_installation()
    conversion_ok = test_svg_to_png_conversion() if playwright_ok else False
    pil_ok = test_pil_fallback()
    
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"üé≠ Playwright: {'‚úÖ' if playwright_ok else '‚ùå'}")
    print(f"üñºÔ∏è SVG ‚Üí PNG: {'‚úÖ' if conversion_ok else '‚ùå'}")
    print(f"üé® PIL Fallback: {'‚úÖ' if pil_ok else '‚ùå'}")
    
    if conversion_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–≤—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
    elif pil_ok:
        print("\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ PIL fallback —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–µ–≤—å—é –±—É–¥—É—Ç –ø—Ä–æ—Å—Ç—ã–º–∏")
    else:
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–≤—å—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    main()