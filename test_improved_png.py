#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
"""

import requests
import json
import os

def test_png_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    
    print("üß™ –¢–ï–°–¢–ò–†–£–Æ –£–õ–£–ß–®–ï–ù–ù–£–Æ PNG –ö–û–ù–í–ï–†–¢–ê–¶–ò–Æ")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "main_template_id": "1",
        "photo_template_id": "2", 
        "format": "png",
        "replacements": {
            "dyno.agentheadshot": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop&crop=face",
            "dyno.propertyimage1": "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
            "dyno.address": "123 Test Street",
            "dyno.price": "$750,000",
            "dyno.beds": "3",
            "dyno.baths": "2",
            "dyno.sqft": "2,500"
        }
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PNG –∫–∞—Ä—É—Å–µ–ª–∏...")
        
        response = requests.post(
            'http://localhost:5002/api/generate/carousel',
            json=test_data,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if 'image_urls' in result:
                for i, url in enumerate(result['image_urls']):
                    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PNG
                    if '.png' in url:
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG")
                        
                        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä
                        try:
                            img_response = requests.get(url, timeout=10)
                            if img_response.status_code == 200:
                                size = len(img_response.content)
                                print(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {size} bytes")
                                
                                if size > 5000:  # –ë–æ–ª—å—à–µ 5KB - –∑–Ω–∞—á–∏—Ç –Ω–µ –ø—É—Å—Ç–æ–µ
                                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ!")
                                else:
                                    print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ")
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
                    else:
                        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_svg_to_png_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–£–Æ SVG ‚Üí PNG API")
    print("=" * 30)
    
    # –ü–æ–ª—É—á–∞–µ–º SVG URL –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_data = {
        "main_template_id": "1",
        "photo_template_id": "2", 
        "format": "svg",  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º SVG
        "replacements": {
            "dyno.address": "Test Address for PNG",
            "dyno.price": "$999,999"
        }
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º SVG
        response = requests.post(
            'http://localhost:5002/api/generate/carousel',
            json=test_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if 'image_urls' in result and result['image_urls']:
                svg_url = result['image_urls'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π SVG
                print(f"üì• SVG URL: {svg_url}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
                convert_data = {"svg_url": svg_url}
                
                convert_response = requests.post(
                    'http://localhost:5002/api/convert-to-png',
                    json=convert_data,
                    timeout=30
                )
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_response.status_code}")
                
                if convert_response.status_code == 200:
                    convert_result = convert_response.json()
                    print("‚úÖ SVG ‚Üí PNG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(convert_result, indent=2)}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {convert_response.text}")
                    return False
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ SVG ‚Üí PNG: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô PNG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get('http://localhost:5002/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            exit(1)
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 app.py")
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PNG –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    png_success = test_png_conversion()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º SVG ‚Üí PNG API
    api_success = test_svg_to_png_api()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ PNG –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'–†–∞–±–æ—Ç–∞–µ—Ç' if png_success else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"‚úÖ SVG ‚Üí PNG API: {'–†–∞–±–æ—Ç–∞–µ—Ç' if api_success else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if png_success and api_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è PNG —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ PIL fallback —Å–æ–∑–¥–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å PNG —Å–∏—Å—Ç–µ–º–æ–π")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")