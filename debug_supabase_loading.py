#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase
"""

import requests
import json

def test_supabase_url():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –∏–∑ Supabase"""
    
    print("üîç –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í –ò–ó SUPABASE")
    print("=" * 50)
    
    # URL –∏–∑ –æ—à–∏–±–∫–∏ (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π)
    test_url = "https://vahgmyuowsilbxqdjjii.supabase.co/storage/v1/object/public/carousel-templates/carousel_1f1cdfc1-f788-4c5c-898d-351c20d6ae09_main.svg"
    
    print(f"üåê –¢–µ—Å—Ç–∏—Ä—É—é URL: {test_url}")
    
    try:
        # –î–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        response = requests.head(test_url, timeout=10)
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìã Headers:")
        for key, value in response.headers.items():
            print(f"  {key}: {value}")
        
        if response.status_code == 200:
            print("‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            content_type = response.headers.get('content-type', 'unknown')
            print(f"üìÑ Content-Type: {content_type}")
            
            if 'svg' not in content_type.lower():
                print("‚ö†Ô∏è Content-Type –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –¥–ª—è SVG")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            cors_origin = response.headers.get('access-control-allow-origin')
            if cors_origin:
                print(f"üåê CORS Origin: {cors_origin}")
            else:
                print("‚ùå CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                
        else:
            print(f"‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_local_server_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    
    print("\nüè† –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get("http://localhost:5000/api/templates", timeout=5)
        print(f"üìä –°–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            templates = response.json()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates.get('templates', []))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
            if templates.get('templates'):
                template = templates['templates'][0]
                print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω: {template.get('name')}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                test_data = {
                    "template_id": template.get('id'),
                    "data": {
                        "dyno.propertyaddress": "123 Test Street",
                        "dyno.price": "$500,000",
                        "dyno.propertyimage": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300"
                    }
                }
                
                print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
                gen_response = requests.post("http://localhost:5000/api/generate", 
                                           json=test_data, timeout=30)
                
                print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å: {gen_response.status_code}")
                
                if gen_response.status_code == 200:
                    result = gen_response.json()
                    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    
                    if 'slides' in result:
                        for i, slide in enumerate(result['slides']):
                            slide_url = slide.get('url', '')
                            print(f"üñºÔ∏è –°–ª–∞–π–¥ {i+1}: {slide_url}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–∞–π–¥–∞
                            if slide_url:
                                try:
                                    slide_response = requests.head(slide_url, timeout=5)
                                    print(f"  üìä –°—Ç–∞—Ç—É—Å: {slide_response.status_code}")
                                    
                                    if slide_response.status_code != 200:
                                        print(f"  ‚ùå –°–ª–∞–π–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                                except:
                                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–∞–π–¥—É")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_response.text}")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")

def check_output_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output"""
    
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ò OUTPUT")
    print("=" * 35)
    
    import os
    
    output_dir = "output"
    if os.path.exists(output_dir):
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {output_dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        files = os.listdir(output_dir)
        print(f"üìã –§–∞–π–ª–æ–≤ –≤ output: {len(files)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        svg_files = [f for f in files if f.endswith('.svg')]
        print(f"üñºÔ∏è SVG —Ñ–∞–π–ª–æ–≤: {len(svg_files)}")
        
        if svg_files:
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ SVG —Ñ–∞–π–ª—ã:")
            for f in sorted(svg_files)[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                file_path = os.path.join(output_dir, f)
                size = os.path.getsize(file_path)
                print(f"  {f} ({size} bytes)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        import stat
        dir_stat = os.stat(output_dir)
        permissions = stat.filemode(dir_stat.st_mode)
        print(f"üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {permissions}")
        
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {output_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    test_supabase_url()
    test_local_server_files()
    check_output_directory()