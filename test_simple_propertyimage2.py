#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ dyno.propertyimage2 –±–µ–∑ Cairo
"""

import sqlite3
import re

DATABASE_PATH = 'templates.db'

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    text = str(text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def simple_process_svg(svg_content, replacements):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    processed_svg = svg_content
    
    for dyno_field, replacement in replacements.items():
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {dyno_field} = {replacement}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if any(keyword in dyno_field.lower() for keyword in ['image', 'photo', 'headshot']):
            print(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {dyno_field}")
            
            safe_url = str(replacement).replace('&', '&amp;')
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id
            element_pattern = f'<[^>]*id="{re.escape(dyno_field)}"[^>]*>'
            match = re.search(element_pattern, processed_svg)
            
            if match:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {dyno_field}")
                
                # –ò—â–µ–º pattern –≤ fill –∞—Ç—Ä–∏–±—É—Ç–µ
                fill_pattern = f'fill="url\\(#([^)]+)\\)"'
                fill_match = re.search(fill_pattern, match.group(0))
                
                if fill_match:
                    pattern_id = fill_match.group(1)
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                    
                    # –ò—â–µ–º pattern –±–ª–æ–∫
                    pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                    pattern_match = re.search(pattern_block_pattern, processed_svg, re.DOTALL)
                    
                    if pattern_match:
                        pattern_content = pattern_match.group(1)
                        
                        # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ pattern
                        image_pattern = r'<image[^>]*href="[^"]*"[^>]*/?>'
                        image_match = re.search(image_pattern, pattern_content)
                        
                        if image_match:
                            old_image = image_match.group(0)
                            new_image = old_image
                            
                            # –ó–∞–º–µ–Ω—è–µ–º URL
                            new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
                            processed_svg = processed_svg.replace(old_image, new_image)
                            print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ: {safe_url[:50]}...")
                        else:
                            print(f"   ‚ö†Ô∏è Image —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern")
                    else:
                        print(f"   ‚ö†Ô∏è Pattern –±–ª–æ–∫ {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"   ‚ö†Ô∏è Fill —Å pattern –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            print(f"üî§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {dyno_field}")
            
            safe_replacement = safe_escape_for_svg(str(replacement))
            
            # –ò—â–µ–º text —ç–ª–µ–º–µ–Ω—Ç
            element_pattern = f'<text[^>]*id="{re.escape(dyno_field)}"[^>]*>(.*?)</text>'
            
            def replace_element_content(match):
                full_element = match.group(0)
                element_content = match.group(1)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ tspan
                def replace_tspan_content(tspan_match):
                    opening_tag = tspan_match.group(1)
                    old_content = tspan_match.group(2)
                    closing_tag = tspan_match.group(3)
                    
                    return opening_tag + safe_replacement + closing_tag
                
                tspan_pattern = r'(<tspan[^>]*>)([^<]*)(</tspan>)'
                new_content = re.sub(tspan_pattern, replace_tspan_content, element_content, count=1)
                
                return full_element.replace(element_content, new_content)
            
            new_svg = re.sub(element_pattern, replace_element_content, processed_svg, flags=re.DOTALL)
            
            if new_svg != processed_svg:
                processed_svg = new_svg
                print(f"   ‚úÖ –ü–æ–ª–µ {dyno_field} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!")
            else:
                print(f"   ‚ùå –ü–æ–ª–µ {dyno_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return processed_svg

def test_propertyimage2_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É dyno.propertyimage2"""
    
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò DYNO.PROPERTYIMAGE2")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º photo —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, name, svg_content FROM templates WHERE template_role = 'photo' LIMIT 1")
    result = cursor.fetchone()
    
    if not result:
        print("‚ùå Photo —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    template_id, name, svg_content = result
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É—é —à–∞–±–ª–æ–Ω: {name} ({template_id})")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_replacements = {
        'dyno.propertyimage2': 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=1080&h=800&fit=crop',
        'dyno.agentheadshot': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
        'dyno.propertyaddress': '123 Main Street, Beverly Hills, CA 90210',
        'dyno.name': 'John Smith',
        'dyno.phone': '(555) 123-4567'
    }
    
    print(f"\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for field, value in test_replacements.items():
        print(f"   {field}: {value[:50]}...")
    
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É SVG...")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG
        processed_svg = simple_process_svg(svg_content, test_replacements)
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if test_replacements['dyno.propertyimage2'] in processed_svg:
            print(f"‚úÖ dyno.propertyimage2 URL –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
        else:
            print(f"‚ùå dyno.propertyimage2 URL –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('test_simple_propertyimage2_result.svg', 'w', encoding='utf-8') as f:
            f.write(processed_svg)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_simple_propertyimage2_result.svg")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
    
    conn.close()

if __name__ == "__main__":
    test_propertyimage2_processing()