#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import re

def test_aspect_ratio_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è aspect ratio"""
    
    print("üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò ASPECT RATIO")
    print("=" * 40)
    
    test_cases = [
        ('dyno.agentheadshot', 'headshot', 'xMidYMid slice'),
        ('dyno.propertyimage2', 'property', 'xMidYMid slice'),
        ('dyno.logo', 'other', 'xMidYMid meet'),
    ]
    
    for field_name, expected_type, expected_aspect in test_cases:
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if 'headshot' in field_name.lower():
            image_type = 'headshot'
            aspect_ratio = 'xMidYMid slice'
        elif 'property' in field_name.lower():
            image_type = 'property'
            aspect_ratio = 'xMidYMid slice'
        else:
            image_type = 'other'
            aspect_ratio = 'xMidYMid meet'
        
        print(f"üìã {field_name}:")
        print(f"   –¢–∏–ø: {image_type} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_type})")
        print(f"   Aspect: {aspect_ratio} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_aspect})")
        
        if image_type == expected_type and aspect_ratio == expected_aspect:
            print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê!")
        print()

def test_group_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ photo.svg"""
    
    print("üß™ –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ì–†–£–ü–ü")
    print("=" * 40)
    
    try:
        with open('photo.svg', 'r', encoding='utf-8') as f:
            photo_svg = f.read()
    except FileNotFoundError:
        print("‚ùå photo.svg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    field_name = 'dyno.propertyimage2'
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    group_pattern = rf'<g[^>]*id="[^"]*{re.escape(field_name)}[^"]*"[^>]*>'
    group_match = re.search(group_pattern, photo_svg, re.IGNORECASE)
    
    if group_match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_match.group()}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã
        group_start = group_match.end()
        group_end_match = re.search(r'</g>', photo_svg[group_start:])
        
        if group_end_match:
            group_content = photo_svg[group_start:group_start + group_end_match.start()]
            print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã: {group_content.strip()[:100]}...")
            
            # –ò—â–µ–º fill="url(#pattern_id)" –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
            fill_match = re.search(r'fill="url\(#([^)]+)\)"', group_content)
            
            if fill_match:
                pattern_id = fill_match.group(1)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                
                # –ò—â–µ–º pattern –≤ SVG
                pattern_pattern = rf'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
                pattern_match = re.search(pattern_pattern, photo_svg, re.DOTALL)
                
                if pattern_match:
                    pattern_content = pattern_match.group(1)
                    print(f"‚úÖ Pattern –Ω–∞–π–¥–µ–Ω: {pattern_content.strip()}")
                    
                    # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç
                    use_match = re.search(r'<use[^>]*xlink:href="#([^"]+)"[^>]*/?>', pattern_content)
                    if use_match:
                        image_id = use_match.group(1)
                        print(f"‚úÖ Image ID: {image_id}")
                        print("üéâ –í–°–Ø –¶–ï–ü–û–ß–ö–ê –ù–ê–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
                    else:
                        print("‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ùå Pattern {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå Fill —Å pattern –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ")
        else:
            print("‚ùå –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ </g> –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def test_headshot_pattern():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ headshot –≤ main.svg"""
    
    print("\nüß™ –¢–ï–°–¢ HEADSHOT PATTERN")
    print("=" * 40)
    
    try:
        with open('main.svg', 'r', encoding='utf-8') as f:
            main_svg = f.read()
    except FileNotFoundError:
        print("‚ùå main.svg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    field_name = 'dyno.agentheadshot'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π aspect ratio
    image_pattern = r'<image[^>]*id="image2_294_4"[^>]*preserveAspectRatio="([^"]*)"[^>]*>'
    current_match = re.search(image_pattern, main_svg)
    
    if current_match:
        current_aspect = current_match.group(1)
        print(f"üìã –¢–µ–∫—É—â–∏–π aspect ratio: {current_aspect}")
        
        if current_aspect == 'xMidYMid meet':
            print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'meet' –≤–º–µ—Å—Ç–æ 'slice'")
            print("üîß –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'xMidYMid slice'")
        elif current_aspect == 'xMidYMid slice':
            print("‚úÖ Aspect ratio —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
        else:
            print(f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π aspect ratio: {current_aspect}")
    else:
        print("‚ùå Image —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    
    print("üöÄ –ü–†–û–°–¢–´–ï –¢–ï–°–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    test_aspect_ratio_logic()
    test_group_detection()
    test_headshot_pattern()
    
    print("\nüéØ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")

if __name__ == "__main__":
    main()