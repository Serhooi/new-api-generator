#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π SVG
"""

import requests
import re

def debug_real_svg_from_api():
    """–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG —Å API"""
    
    print("üîç –ü–æ–ª—É—á–∞—é —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG —Å API...")
    
    api_url = "https://new-api-generator.onrender.com/api/generate/carousel"
    
    test_data = {
        "main_template_id": "9cb08943-8d1e-440c-a712-92111ec23048",
        "photo_template_id": "f6ed8d52-3bbf-495e-8b67-61dc7d4ff47d", 
        "data": {
            "propertyaddress": "123 Test Street, Test City",
            "price": "$500,000",
            "beds": "3",
            "baths": "2",
            "sqft": "1,500",
            "propertyimage2": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
        }
    }
    
    try:
        response = requests.post(api_url, json=test_data, timeout=60)
        
        if response.status_code != 200:
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            return None
        
        result = response.json()
        
        if 'urls' not in result or len(result['urls']) == 0:
            print("‚ùå –ù–µ—Ç URLs –≤ –æ—Ç–≤–µ—Ç–µ")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º main SVG (–ø–µ—Ä–≤—ã–π URL)
        main_svg_url = result['urls'][0]
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é main SVG: {main_svg_url}")
        
        svg_response = requests.get(main_svg_url, timeout=10)
        svg_content = svg_response.text
        
        print(f"üìä SVG —Ä–∞–∑–º–µ—Ä: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return svg_content
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SVG: {e}")
        return None

def analyze_problematic_svg(svg_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG...")
    
    # –ò—â–µ–º –≤—Å–µ image —Ç–µ–≥–∏
    image_tags = re.findall(r'<image[^>]*>', svg_content)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(image_tags)} image —Ç–µ–≥–æ–≤:")
    
    for i, tag in enumerate(image_tags[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"  {i+1}: {tag[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç –ª–∏ —Ç–µ–≥
        if tag.endswith('/>'):
            print(f"    ‚úÖ –¢–µ–≥ –∑–∞–∫—Ä—ã—Ç")
        elif tag.endswith('>') and not tag.endswith('/>'):
            print(f"    ‚ùå –¢–µ–≥ –ù–ï –∑–∞–∫—Ä—ã—Ç!")
        else:
            print(f"    ‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    
    # –ò—â–µ–º use —Ç–µ–≥–∏
    use_tags = re.findall(r'<use[^>]*>', svg_content)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(use_tags)} use —Ç–µ–≥–æ–≤:")
    
    for i, tag in enumerate(use_tags[:5]):
        print(f"  {i+1}: {tag[:100]}...")
        
        if tag.endswith('/>'):
            print(f"    ‚úÖ –¢–µ–≥ –∑–∞–∫—Ä—ã—Ç")
        elif tag.endswith('>') and not tag.endswith('/>'):
            print(f"    ‚ùå –¢–µ–≥ –ù–ï –∑–∞–∫—Ä—ã—Ç!")
    
    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ –ø–æ–∑–∏—Ü–∏–∏ 373076
    if len(svg_content) >= 373076:
        problem_area = svg_content[373070:373090]
        print(f"üéØ –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–ø–æ–∑–∏—Ü–∏—è 373076): '{problem_area}'")
    
    return image_tags, use_tags

def test_improved_smart_cleaning(svg_content):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É"""
    
    print("üß† –¢–µ—Å—Ç–∏—Ä—É—é –£–õ–£–ß–®–ï–ù–ù–£–Æ —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
    
    cleaned = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
    cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
    
    # 3. –ë–û–õ–ï–ï –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ image —Ç–µ–≥–æ–≤
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é image —Ç–µ–≥–∏...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: <image ...> (–±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è)
    pattern1 = r'<image([^>]*?)(?<!/)>'
    matches1 = re.findall(pattern1, cleaned)
    print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö image —Ç–µ–≥–æ–≤ (–ø–∞—Ç—Ç–µ—Ä–Ω 1): {len(matches1)}")
    cleaned = re.sub(pattern1, r'<image\1/>', cleaned)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: <image ...> —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    pattern2 = r'<image([^>]*?)\s+>'
    matches2 = re.findall(pattern2, cleaned)
    print(f"  –ù–∞–π–¥–µ–Ω–æ image —Ç–µ–≥–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω 2): {len(matches2)}")
    cleaned = re.sub(pattern2, r'<image\1/>', cleaned)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –õ—é–±—ã–µ image —Ç–µ–≥–∏ –±–µ–∑ />
    pattern3 = r'<image([^>]*?[^/])>'
    matches3 = re.findall(pattern3, cleaned)
    print(f"  –ù–∞–π–¥–µ–Ω–æ image —Ç–µ–≥–æ–≤ –±–µ–∑ / (–ø–∞—Ç—Ç–µ—Ä–Ω 3): {len(matches3)}")
    cleaned = re.sub(pattern3, r'<image\1/>', cleaned)
    
    # 4. –¢–æ –∂–µ –¥–ª—è use —Ç–µ–≥–æ–≤
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é use —Ç–µ–≥–∏...")
    
    use_pattern1 = r'<use([^>]*?)(?<!/)>'
    use_matches1 = re.findall(use_pattern1, cleaned)
    print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö use —Ç–µ–≥–æ–≤: {len(use_matches1)}")
    cleaned = re.sub(use_pattern1, r'<use\1/>', cleaned)
    
    # 5. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    
    print(f"üß† –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    remaining_image = len(re.findall(r'<image[^>]*[^/]>', cleaned))
    remaining_use = len(re.findall(r'<use[^>]*[^/]>', cleaned))
    
    print(f"üîç –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
    print(f"  - –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö image —Ç–µ–≥–æ–≤: {remaining_image}")
    print(f"  - –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö use —Ç–µ–≥–æ–≤: {remaining_use}")
    
    if remaining_image == 0 and remaining_use == 0:
        print("‚úÖ –í—Å–µ —Ç–µ–≥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return cleaned, True
    else:
        print("‚ùå –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏!")
        return cleaned, False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú –° –£–ú–ù–û–ô –û–ß–ò–°–¢–ö–û–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π SVG
    svg_content = debug_real_svg_from_api()
    
    if not svg_content:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SVG –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    image_tags, use_tags = analyze_problematic_svg(svg_content)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    cleaned_svg, success = test_improved_smart_cleaning(svg_content)
    
    if success:
        print("\n‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('debug_improved_cleaned.svg', 'w') as f:
            f.write(cleaned_svg)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: debug_improved_cleaned.svg")
    else:
        print("\n‚ùå –ù—É–∂–Ω—ã –µ—â–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    main()