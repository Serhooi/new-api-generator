#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å base64 –¥–∞–Ω–Ω—ã–º–∏ –≤ SVG
"""

import re

def clean_base64_in_svg(svg_content):
    """
    –û—á–∏—â–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ –≤ SVG –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    print("üßπ –û—á–∏—â–∞—é base64 –¥–∞–Ω–Ω—ã–µ –≤ SVG...")
    
    cleaned = svg_content
    
    # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', cleaned)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
    cleaned = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned)
    
    # 3. –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ base64 –¥–∞–Ω–Ω—ã—Ö
    def clean_base64_data(match):
        base64_data = match.group(1)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ base64
        # –í–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã base64: A-Z, a-z, 0-9, +, /, =
        cleaned_base64 = re.sub(r'[^A-Za-z0-9+/=]', '', base64_data)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã = –≤ –∫–æ–Ω—Ü–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 2)
        cleaned_base64 = re.sub(r'=+$', '', cleaned_base64)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        remainder = len(cleaned_base64) % 4
        if remainder == 2:
            cleaned_base64 += '=='
        elif remainder == 3:
            cleaned_base64 += '='
        
        return f'data:image/jpeg;base64,{cleaned_base64}'
    
    # –ò—â–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ base64 –¥–∞–Ω–Ω—ã–µ
    pattern = r'data:image/[^;]+;base64,([^"\'>\s]+)'
    matches = re.findall(pattern, cleaned)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    cleaned = re.sub(pattern, clean_base64_data, cleaned)
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    def fix_image_tag(match):
        tag_content = match.group(1)
        if tag_content.endswith('/'):
            return match.group(0)
        return f'<image{tag_content}/>'
    
    cleaned = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
    def fix_use_tag(match):
        tag_content = match.group(1)
        if tag_content.endswith('/'):
            return match.group(0)
        return f'<use{tag_content}/>'
    
    cleaned = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned)
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    
    print(f"üßπ Base64 –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(svg_content)} ‚Üí {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return cleaned

def update_app_with_base64_cleaning():
    """–û–±–Ω–æ–≤–ª—è–µ–º app.py —Å –æ—á–∏—Å—Ç–∫–æ–π base64"""
    
    print("üìù –ß–∏—Ç–∞—é app.py...")
    
    with open('app.py', 'r') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —É–º–Ω—É—é –æ—á–∏—Å—Ç–∫—É –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å base64
    old_cleaning = '''            # –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –¢–ï–ì–ò, –ù–û –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
            print("üß† –£–ú–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG - –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏ - –ù–ï —É–¥–∞–ª—è–µ–º, –∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            def fix_image_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<image{tag_content}/>'
            
            cleaned_svg = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned_svg)
            
            # 4. –£–ú–ù–û –∏—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
            def fix_use_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<use{tag_content}/>'
            
            cleaned_svg = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
            self_closing_tags = ['rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path', 'stop']
            
            for tag in self_closing_tags:
                def fix_tag_func(match):
                    tag_content = match.group(1)
                    if tag_content.endswith('/'):
                        return match.group(0)
                    return f'<{tag}{tag_content}/>'
                
                cleaned_svg = re.sub(f'<{tag}([^>]*?)>', fix_tag_func, cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üß† –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    new_cleaning = '''            # –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê SVG + BASE64
            print("üßπ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ SVG + base64 –¥–∞–Ω–Ω—ã—Ö...")
            cleaned_svg = svg_content
            
            import re
            
            # 1. –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned_svg = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', cleaned_svg)
            
            # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
            cleaned_svg = re.sub(r'&(?!amp;|lt;|gt;|quot;|apos;|#\\d+;|#x[0-9a-fA-F]+;)', '&amp;', cleaned_svg)
            
            # 3. –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ base64 –¥–∞–Ω–Ω—ã—Ö
            def clean_base64_data(match):
                base64_data = match.group(1)
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ base64
                cleaned_base64 = re.sub(r'[^A-Za-z0-9+/=]', '', base64_data)
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ = –≤ –∫–æ–Ω—Ü–µ
                cleaned_base64 = re.sub(r'=+$', '', cleaned_base64)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                remainder = len(cleaned_base64) % 4
                if remainder == 2:
                    cleaned_base64 += '=='
                elif remainder == 3:
                    cleaned_base64 += '='
                return f'data:image/jpeg;base64,{cleaned_base64}'
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ base64 –¥–∞–Ω–Ω—ã–µ
            pattern = r'data:image/[^;]+;base64,([^"\\'>\\s]+)'
            cleaned_svg = re.sub(pattern, clean_base64_data, cleaned_svg)
            
            # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º image —Ç–µ–≥–∏
            def fix_image_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<image{tag_content}/>'
            
            cleaned_svg = re.sub(r'<image([^>]*?)>', fix_image_tag, cleaned_svg)
            
            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º use —Ç–µ–≥–∏
            def fix_use_tag(match):
                tag_content = match.group(1)
                if tag_content.endswith('/'):
                    return match.group(0)
                return f'<use{tag_content}/>'
            
            cleaned_svg = re.sub(r'<use([^>]*?)>', fix_use_tag, cleaned_svg)
            
            # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_svg = re.sub(r'\\s+', ' ', cleaned_svg)
            
            print(f"üßπ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(cleaned_svg)} —Å–∏–º–≤–æ–ª–æ–≤")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–¥
    if old_cleaning in content:
        content = content.replace(old_cleaning, new_cleaning)
        print("‚úÖ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—É—é —Å base64!")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ —É–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open('app.py', 'w') as f:
        f.write(content)
    
    print("üíæ app.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π base64")
    return True

def test_base64_cleaning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É base64 –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ—á–∏—Å—Ç–∫—É base64 –Ω–∞ debug_improved_cleaned.svg...")
    
    with open('debug_improved_cleaned.svg', 'r') as f:
        svg_content = f.read()
    
    print(f"üìä –†–∞–∑–º–µ—Ä –¥–æ –æ—á–∏—Å—Ç–∫–∏: {len(svg_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É base64
    cleaned = clean_base64_in_svg(svg_content)
    
    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('debug_base64_cleaned.svg', 'w') as f:
        f.write(cleaned)
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: debug_base64_cleaned.svg")
    
    return True

if __name__ == "__main__":
    print("üßπ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BASE64 –î–ê–ù–ù–´–• –í SVG")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ base64
    success = test_base64_cleaning()
    
    if success:
        print("\n‚úÖ Base64 –æ—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üìù –û–±–Ω–æ–≤–ª—è—é app.py...")
        update_app_with_base64_cleaning()
    else:
        print("\n‚ùå Base64 –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")