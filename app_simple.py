"""
–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø API –ë–ï–ó CAIROSVG
====================================

–í–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ JPG
"""

import os
import re
import uuid
import sqlite3
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import base64
import io
from PIL import Image, ImageDraw, ImageFont

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    from supabase import create_client, Client
    SUPABASE_URL = os.environ.get('SUPABASE_URL', 'https://vahgmyuowsilbxqdjjii.supabase.co')
    SUPABASE_KEY = os.environ.get('SUPABASE_ANON_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZhaGdteXVvd3NpbGJ4cWRqamlpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQwMTU5NzQsImV4cCI6MjA0OTU5MTk3NH0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8')
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
    supabase = None

app = Flask(__name__)
CORS(app, origins="*")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (20MB)
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_PATH = 'templates.db'
OUTPUT_DIR = 'output'
ALLOWED_EXTENSIONS = {'svg'}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs('output/single', exist_ok=True)
os.makedirs('output/carousel', exist_ok=True)
os.makedirs('output/previews', exist_ok=True)

def has_dyno_fields_simple(svg_content):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è dyno –ø–æ–ª–µ–π –≤ SVG"""
    patterns = [
        r'\{\{dyno\.[^}]+\}\}',     # {{dyno.field}}
        r'\{dyno\.[^}]+\}',         # {dyno.field}
        r'id="dyno\.[^"]*"',        # id="dyno.field"
        r"id='dyno\.[^']*'",        # id='dyno.field'
        r'dyno\.[a-zA-Z][a-zA-Z0-9]*'  # dyno.field
    ]
    
    for pattern in patterns:
        if re.search(pattern, svg_content):
            return True
    return False

def extract_dyno_fields_simple(svg_content):
    """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ dyno –ø–æ–ª–µ–π –∏–∑ SVG"""
    fields = set()
    
    patterns = [
        r'\{\{(dyno\.[^}]+)\}\}',     # {{dyno.field}}
        r'\{(dyno\.[^}]+)\}',         # {dyno.field}
        r'id="(dyno\.[^"]*)"',        # id="dyno.field"
        r"id='(dyno\.[^']*)'",        # id='dyno.field'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, svg_content)
        for match in matches:
            fields.add(match)
    
    return list(fields)

def safe_escape_for_svg(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è SVG"""
    if not text:
        return text
    
    text = str(text)
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&apos;')
    
    return text

def process_svg_simple(svg_content, replacements):
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SVG —Å –∑–∞–º–µ–Ω–∞–º–∏"""
    result = svg_content
    
    for key, value in replacements.items():
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª–µ: {key} = {value}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        safe_value = safe_escape_for_svg(str(value))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if 'image' in key.lower() or 'photo' in key.lower() or 'headshot' in key.lower() or 'logo' in key.lower():
            print(f"   üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {key}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL
            safe_url = str(value).replace('&', '&amp;')
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id="key" –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            element_pattern = f'<[^>]*id="{re.escape(key)}"[^>]*fill="url\\(#([^)]+)\\)"[^>]*>'
            match = re.search(element_pattern, result)
            
            if match:
                pattern_id = match.group(1)
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
                
                # –ò—â–µ–º image —ç–ª–µ–º–µ–Ω—Ç –≤ pattern
                image_pattern = f'<image[^>]*id="[^"]*image[^"]*"[^>]*>'
                image_match = re.search(image_pattern, result)
                
                if image_match:
                    old_image = image_match.group(0)
                    new_image = old_image
                    
                    # –ó–∞–º–µ–Ω—è–µ–º URL
                    new_image = re.sub(r'href="[^"]*"', f'href="{safe_url}"', new_image)
                    new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{safe_url}"', new_image)
                    
                    result = result.replace(old_image, new_image)
                    print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {key} –∑–∞–º–µ–Ω–µ–Ω–æ!")
                else:
                    print(f"   ‚ùå Image —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å id {key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            print(f"   üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: {key}")
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id="key" –≤ SVG
            element_pattern = f'<text[^>]*id="{re.escape(key)}"[^>]*>(.*?)</text>'
            match = re.search(element_pattern, result, re.DOTALL)
            
            if match:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id: {key}")
                old_element = match.group(0)
                old_content = match.group(1)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                new_content = old_content.replace(f"{{{key}}}", safe_value)
                new_element = old_element.replace(old_content, new_content)
                
                result = result.replace(old_element, new_element)
                print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {key} ‚Üí {safe_value}")
            else:
                print(f"   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å id='{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # Fallback: –∏—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {dyno.field}
                patterns = [
                    f"{{{{{key}}}}}",
                    f"{{{{dyno.{key.replace('dyno.', '')}}}}}",
                    f"{{dyno.{key.replace('dyno.', '')}}}",
                    f"{{{key}}}"
                ]
                
                for pattern in patterns:
                    if pattern in result:
                        result = result.replace(pattern, safe_value)
                        print(f"   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ fallback: {pattern} ‚Üí {safe_value}")
                        break
    
    return result

def convert_svg_to_jpg_simple(svg_content, output_path, width=1200, height=800):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ JPG —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    """
    try:
        print(f"üñºÔ∏è –°–æ–∑–¥–∞—é JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {output_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
        img = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(img)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ SVG
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ SVG –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text_content = re.sub(r'<[^>]+>', '', svg_content)
        text_content = text_content.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
        text_content = text_content[:100] + "..." if len(text_content) > 100 else text_content
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        draw.text((50, 50), f"SVG Content Preview:", fill='black', font=font)
        draw.text((50, 100), text_content, fill='blue', font=font)
        draw.text((50, height - 100), f"Size: {width}x{height}", fill='gray', font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPG
        img.save(output_path, 'JPEG', quality=95, optimize=True)
        
        print(f"‚úÖ JPG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JPG: {e}")
        return False

def ensure_db_exists():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS templates (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT,
            template_role TEXT,
            svg_content TEXT NOT NULL,
            dyno_fields TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carousels (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            category TEXT,
            main_template_id TEXT,
            photo_template_id TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (main_template_id) REFERENCES templates (id),
            FOREIGN KEY (photo_template_id) REFERENCES templates (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def save_file_locally_or_supabase(content, filename, folder="carousel"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) –∏–ª–∏ –≤ Supabase (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render
    is_render = os.environ.get('RENDER', False) or (os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_URL') != 'https://vahgmyuowsilbxqdjjii.supabase.co')
    
    if is_render and supabase:
        # –ù–∞ Render - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
        return upload_to_supabase_storage(content, filename, folder)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        local_path = os.path.join(OUTPUT_DIR, folder, filename)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            mode = 'wb' if isinstance(content, bytes) else 'w'
            encoding = None if isinstance(content, bytes) else 'utf-8'
            
            with open(local_path, mode, encoding=encoding) as f:
                f.write(content)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {local_path}")
            return f"/output/{folder}/{filename}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
            return None

def upload_to_supabase_storage(file_content, filename, folder="generated"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage
    """
    if not supabase:
        print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = f"{folder}/{filename}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
        if filename.lower().endswith('.jpg') or filename.lower().endswith('.jpeg'):
            # JPG —Ñ–∞–π–ª - –ø–µ—Ä–µ–¥–∞–µ–º bytes –∫–∞–∫ –µ—Å—Ç—å
            file_data = file_content
            content_type = "image/jpeg"
        elif filename.lower().endswith('.png'):
            # PNG —Ñ–∞–π–ª - –ø–µ—Ä–µ–¥–∞–µ–º bytes –∫–∞–∫ –µ—Å—Ç—å
            file_data = file_content
            content_type = "image/png"
        else:
            # SVG –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –∫–æ–¥–∏—Ä—É–µ–º –≤ UTF-8
            file_data = file_content.encode('utf-8') if isinstance(file_content, str) else file_content
            content_type = "image/svg+xml"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Storage
        result = supabase.storage.from_("images").upload(
            path=file_path,
            file=file_data,
            file_options={"content-type": content_type}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = supabase.storage.from_("images").get_public_url(file_path)
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {public_url}")
        return public_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
        return None

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
def create_test_templates():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_db_exists()
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    cursor.execute('SELECT id FROM templates WHERE id IN (?, ?)', 
                   ['test-main-template', 'test-photo-template'])
    existing = cursor.fetchall()
    
    if len(existing) < 2:
        # –°–æ–∑–¥–∞–µ–º main template
        main_svg = '''<svg width="1080" height="1080" xmlns="http://www.w3.org/2000/svg">
            <rect width="1080" height="1080" fill="#667eea"/>
            <text x="540" y="300" text-anchor="middle" fill="white" font-size="48" font-weight="bold">MAIN TEMPLATE</text>
            <text x="540" y="400" text-anchor="middle" fill="white" font-size="32">{{dyno.propertyAddress}}</text>
            <text x="540" y="500" text-anchor="middle" fill="white" font-size="28">{{dyno.price}}</text>
            <text x="540" y="600" text-anchor="middle" fill="white" font-size="24">{{dyno.agentName}}</text>
            <text x="540" y="700" text-anchor="middle" fill="white" font-size="20">{{dyno.agentPhone}}</text>
        </svg>'''
        
        # –°–æ–∑–¥–∞–µ–º photo template
        photo_svg = '''<svg width="1080" height="1080" xmlns="http://www.w3.org/2000/svg">
            <rect width="1080" height="1080" fill="#764ba2"/>
            <rect x="90" y="90" width="900" height="600" fill="#f0f0f0" stroke="#333" stroke-width="2"/>
            <text x="540" y="750" text-anchor="middle" fill="white" font-size="32">{{dyno.propertyAddress}}</text>
            <text x="540" y="800" text-anchor="middle" fill="white" font-size="24">{{dyno.agentName}}</text>
            <text x="540" y="850" text-anchor="middle" fill="white" font-size="20">{{dyno.agentPhone}}</text>
            <text x="540" y="400" text-anchor="middle" fill="#666" font-size="24">PHOTO TEMPLATE</text>
        </svg>'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º main template
        cursor.execute('''
            INSERT OR REPLACE INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', ['test-main-template', 'Test Main Template', 'test', 'main', main_svg, 'dyno.propertyAddress,dyno.price,dyno.agentName,dyno.agentPhone'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º photo template
        cursor.execute('''
            INSERT OR REPLACE INTO templates (id, name, category, template_role, svg_content, dyno_fields)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', ['test-photo-template', 'Test Photo Template', 'test', 'photo', photo_svg, 'dyno.propertyAddress,dyno.agentName,dyno.agentPhone'])
        
        conn.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    conn.close()

def create_dynamic_template(template_id, template_role):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–∞ –ª–µ—Ç—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
    cursor.execute('SELECT id FROM templates WHERE id = ?', (template_id,))
    if cursor.fetchone():
        conn.close()
        return True
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    if template_role == 'main':
        content = '''<svg width="1200" height="800" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="white"/>
            <text x="600" y="200" text-anchor="middle" font-size="48" fill="black">Dynamic Main Template</text>
            <text id="dyno.agentName" x="600" y="300" text-anchor="middle" font-size="24" fill="blue">Agent: {dyno.agentName}</text>
            <text id="dyno.propertyAddress" x="600" y="350" text-anchor="middle" font-size="20" fill="green">Address: {dyno.propertyAddress}</text>
            <text id="dyno.price" x="600" y="400" text-anchor="middle" font-size="32" fill="red">Price: {dyno.price}</text>
            <text id="dyno.agentPhone" x="600" y="450" text-anchor="middle" font-size="18" fill="purple">Phone: {dyno.agentPhone}</text>
            <text id="dyno.agentEmail" x="600" y="500" text-anchor="middle" font-size="16" fill="orange">Email: {dyno.agentEmail}</text>
            <text id="dyno.bedrooms" x="600" y="550" text-anchor="middle" font-size="20" fill="brown">Bedrooms: {dyno.bedrooms}</text>
            <text id="dyno.bathrooms" x="600" y="580" text-anchor="middle" font-size="20" fill="brown">Bathrooms: {dyno.bathrooms}</text>
            <text id="dyno.date" x="600" y="620" text-anchor="middle" font-size="18" fill="darkgreen">Date: {dyno.date}</text>
            <text id="dyno.time" x="600" y="650" text-anchor="middle" font-size="18" fill="darkgreen">Time: {dyno.time}</text>
            <text id="dyno.propertyfeatures" x="600" y="680" text-anchor="middle" font-size="14" fill="gray">Features: {dyno.propertyfeatures}</text>
        </svg>'''
        name = f"Dynamic Main Template ({template_id[:8]})"
    else:
        content = '''<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="lightblue"/>
            <text x="400" y="200" text-anchor="middle" font-size="36" fill="black">Dynamic Photo Template</text>
            <rect id="dyno.propertyimage1" x="100" y="250" width="600" height="300" fill="url(#property_pattern)"/>
            <defs>
                <pattern id="property_pattern" patternUnits="objectBoundingBox" width="1" height="1">
                    <image id="property_image" href="https://via.placeholder.com/600x300/cccccc/666666?text=Property+Image" preserveAspectRatio="xMidYMid slice"/>
                </pattern>
            </defs>
        </svg>'''
        name = f"Dynamic Photo Template ({template_id[:8]})"
    
    cursor.execute('''
        INSERT INTO templates (id, name, category, template_role, svg_content, dyno_fields)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (template_id, name, 'dynamic', template_role, content, 'dyno.propertyimage1'))
    
    conn.commit()
    conn.close()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω: {template_id}")
    return True

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/demo_solution.html')
def demo_solution():
    return render_template('demo_solution.html')

@app.route('/test_jpg_urls.html')
def test_jpg_urls():
    return render_template('test_jpg_urls.html')

@app.route('/test_frontend_access.html')
def test_frontend_access():
    return render_template('test_frontend_access.html')

@app.route('/test_fixed_processing.html')
def test_fixed_processing():
    return render_template('test_fixed_processing.html')

@app.route('/api/health')
def health():
    return jsonify({'status': 'ok', 'message': 'API —Ä–∞–±–æ—Ç–∞–µ—Ç'})

@app.route('/output/<path:filename>')
def serve_output(filename):
    return send_from_directory(OUTPUT_DIR, filename)

@app.route('/api/generate/carousel', methods=['POST'])
def generate_carousel():
    try:
        data = request.get_json()
        main_template_id = data.get('main_template_id')
        photo_template_id = data.get('photo_template_id')
        replacements = data.get('data', data.get('replacements', {}))
        
        print(f"üîç Received data: {data}")
        print(f"üìã Replacements: {replacements}")
        
        if not main_template_id or not photo_template_id:
            return jsonify({'error': 'main_template_id –∏ photo_template_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
        main_result = cursor.fetchone()
        
        cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
        photo_result = cursor.fetchone()
        
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        if not main_result:
            print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω {main_template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π")
            create_dynamic_template(main_template_id, 'main')
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [main_template_id])
            main_result = cursor.fetchone()
        
        if not photo_result:
            print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω {photo_template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π")
            create_dynamic_template(photo_template_id, 'photo')
            cursor.execute('SELECT name, svg_content FROM templates WHERE id = ?', [photo_template_id])
            photo_result = cursor.fetchone()
        
        conn.close()
        
        if not main_result or not photo_result:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —à–∞–±–ª–æ–Ω–∞'}), 500
        
        main_name, main_svg_content = main_result
        photo_name, photo_svg_content = photo_result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG —Å –∑–∞–º–µ–Ω–∞–º–∏
        processed_main_svg = process_svg_simple(main_svg_content, replacements)
        processed_photo_svg = process_svg_simple(photo_svg_content, replacements)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ä—É—Å–µ–ª–∏
        carousel_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SVG –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
        main_svg_filename = f"carousel_{carousel_id}_main.svg"
        photo_svg_filename = f"carousel_{carousel_id}_photo.svg"
        main_jpg_filename = f"carousel_{carousel_id}_main.jpg"
        photo_jpg_filename = f"carousel_{carousel_id}_photo.jpg"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É carousel –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        carousel_output_dir = os.path.join(OUTPUT_DIR, 'carousel')
        os.makedirs(carousel_output_dir, exist_ok=True)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        main_url = save_file_locally_or_supabase(processed_main_svg, main_svg_filename, "carousel")
        photo_url = save_file_locally_or_supabase(processed_photo_svg, photo_svg_filename, "carousel")
        
        if not main_url or not photo_url:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'}), 500
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
        main_jpg_path = os.path.join(carousel_output_dir, main_jpg_filename)
        photo_jpg_path = os.path.join(carousel_output_dir, photo_jpg_filename)
        
        main_jpg_success = convert_svg_to_jpg_simple(processed_main_svg, main_jpg_path)
        photo_jpg_success = convert_svg_to_jpg_simple(processed_photo_svg, photo_jpg_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Render (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL)
        is_render = os.environ.get('RENDER', False) or (os.environ.get('SUPABASE_URL') and os.environ.get('SUPABASE_URL') != 'https://vahgmyuowsilbxqdjjii.supabase.co')
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SVG
        if is_render and supabase:
            # –ù–∞ Render - –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG URL –∏–∑ Supabase
            main_image_url = main_url
            photo_image_url = photo_url
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG URL
            main_image_url = f'/output/carousel/{main_svg_filename}'
            photo_image_url = f'/output/carousel/{photo_svg_filename}'
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL)
        image_urls = [main_image_url, photo_image_url]
        
        response_data = {
            'success': True,
            'carousel_id': carousel_id,
            'main_template_name': main_name,
            'photo_template_name': photo_name,
            'main_url': main_image_url,
            'photo_url': photo_image_url,
            'replacements_applied': len(replacements),
            'images': image_urls,
            'slides': image_urls,
            'urls': image_urls,
            'image_url': image_urls[0],
            'data': {'images': image_urls},
            'slides_count': 2,
            'status': 'completed',
            'format': 'svg'
        }
        
        print(f"üîç /api/generate/carousel response: {response_data}")
        print(f"üìä Images count: {len(image_urls)}")
        
        return jsonify(response_data)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {str(e)}'}), 500

@app.route('/api/carousels', methods=['GET'])
def get_carousels():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π"""
    try:
        ensure_db_exists()
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, category, main_template_id, photo_template_id, created_at
            FROM carousels
            ORDER BY created_at DESC
        ''')
        
        carousels = []
        for row in cursor.fetchall():
            carousels.append({
                'id': row[0],
                'name': row[1],
                'category': row[2],
                'main_template_id': row[3],
                'photo_template_id': row[4],
                'created_at': row[5]
            })
        
        conn.close()
        
        return jsonify({
            'success': True,
            'carousels': carousels
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–µ–π: {str(e)}'}), 500

if __name__ == '__main__':
    create_test_templates()
    app.run(debug=True, host='0.0.0.0', port=5001) 