#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL —Å –ª–∏—à–Ω–∏–º –∑–Ω–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–∞
"""

import requests
import json

def test_carousel_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø URL")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        health_response = requests.get("http://localhost:5000/api/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    test_data = {
        "main_template_id": "09cd9071-8c36-4ea6-9922-ce367c78980f",
        "photo_template_id": "69ef8dc1-a58c-41e0-97cc-88f8e5ddba45", 
        "data": {
            "dyno.propertyaddress": "123 Test Street",
            "dyno.price": "$500,000",
            "dyno.propertyimage": "https://images.unsplash.com/photo-1570129477492-45c003edd2be?w=400&h=300"
        }
    }
    
    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    try:
        response = requests.post(
            "http://localhost:5000/api/generate/carousel",
            json=test_data,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤ –æ—Ç–≤–µ—Ç–µ
            images = result.get('images', [])
            print(f"\nüñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
            
            for i, url in enumerate(images, 1):
                print(f"\nüîç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}:")
                print(f"URL: {url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
                if url.endswith('?'):
                    print("‚ùå URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ!")
                else:
                    print("‚úÖ URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
                try:
                    url_response = requests.head(url, timeout=10)
                    print(f"üìä URL —Å—Ç–∞—Ç—É—Å: {url_response.status_code}")
                    
                    if url_response.status_code == 200:
                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        content_type = url_response.headers.get('content-type', 'unknown')
                        print(f"üìÑ Content-Type: {content_type}")
                        
                        cors_origin = url_response.headers.get('access-control-allow-origin')
                        if cors_origin:
                            print(f"üåê CORS: {cors_origin}")
                        else:
                            print("‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    else:
                        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {url_response.status_code}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {e}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_template_preview():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print(f"\nüñºÔ∏è –¢–ï–°–¢ –ü–†–ï–í–¨–Æ –®–ê–ë–õ–û–ù–û–í")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    try:
        templates_response = requests.get("http://localhost:5000/api/templates/all-previews", timeout=10)
        
        if templates_response.status_code == 200:
            data = templates_response.json()
            templates = data.get('templates', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            
            if templates:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                template = templates[0]
                template_id = template.get('id')
                template_name = template.get('name')
                
                print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–µ–≤—å—é: {template_name} (ID: {template_id})")
                
                preview_response = requests.get(
                    f"http://localhost:5000/api/templates/{template_id}/preview",
                    timeout=10
                )
                
                print(f"üìä –ü—Ä–µ–≤—å—é —Å—Ç–∞—Ç—É—Å: {preview_response.status_code}")
                
                if preview_response.status_code == 200:
                    content_type = preview_response.headers.get('content-type', 'unknown')
                    print(f"üìÑ Content-Type: {content_type}")
                    
                    if 'svg' in content_type:
                        print("‚úÖ –ü—Ä–µ–≤—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ SVG")
                    elif 'png' in content_type:
                        print("‚úÖ –ü—Ä–µ–≤—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ PNG")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {content_type}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {preview_response.text}")
            else:
                print("‚ÑπÔ∏è –®–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {templates_response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–µ–≤—å—é: {e}")

if __name__ == "__main__":
    test_carousel_generation()
    test_template_preview()