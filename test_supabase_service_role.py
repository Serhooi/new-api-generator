#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase —Å service role –∫–ª—é—á–æ–º
"""

import os
import uuid
from supabase import create_client, Client

def test_service_role_upload():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å service role –∫–ª—é—á–æ–º"""
    
    print("üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –° SERVICE ROLE")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    supabase_url = os.environ.get('SUPABASE_URL')
    service_key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')
    
    if not supabase_url or not service_key:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –∫–ª—é—á–æ–º
        supabase: Client = create_client(supabase_url, service_key)
        print(f"‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å service role")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SVG
        test_svg = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
  <rect width="200" height="200" fill="green"/>
  <text x="100" y="100" text-anchor="middle" fill="white" font-size="20">SERVICE ROLE TEST</text>
</svg>'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        test_filename = f"service_test_{uuid.uuid4().hex[:8]}.svg"
        file_path = f"carousel/{test_filename}"
        
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ carousel-assets bucket
        result = supabase.storage.from_("carousel-assets").upload(
            path=file_path,
            file=test_svg.encode('utf-8'),
            file_options={"content-type": "image/svg+xml"}
        )
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {result}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        public_url = supabase.storage.from_("carousel-assets").get_public_url(file_path)
        print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: {public_url}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        import requests
        try:
            response = requests.head(public_url, timeout=10)
            print(f"üìä URL —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É URL!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                content_type = response.headers.get('content-type', 'unknown')
                print(f"üìÑ Content-Type: {content_type}")
                
                cors_origin = response.headers.get('access-control-allow-origin')
                if cors_origin:
                    print(f"üåê CORS Origin: {cors_origin}")
                else:
                    print("‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                return True
                
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False

def test_anon_key_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å anon –∫–ª—é—á–æ–º"""
    
    print("\nüß™ –¢–ï–°–¢ –î–û–°–¢–£–ü–ê –° ANON KEY")
    print("=" * 40)
    
    supabase_url = os.environ.get('SUPABASE_URL')
    anon_key = os.environ.get('SUPABASE_ANON_KEY')
    
    if not supabase_url or not anon_key:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å anon –∫–ª—é—á–æ–º
        supabase: Client = create_client(supabase_url, anon_key)
        print(f"‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å anon key")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        try:
            files = supabase.storage.from_("carousel-assets").list("carousel")
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω: {len(files)} —Ñ–∞–π–ª–æ–≤")
            
            if files:
                print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
                for file in files[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    print(f"  - {file['name']} ({file['metadata']['size']} bytes)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print(f"SUPABASE_URL: {'‚úÖ' if os.environ.get('SUPABASE_URL') else '‚ùå'}")
    print(f"SUPABASE_SERVICE_ROLE_KEY: {'‚úÖ' if os.environ.get('SUPABASE_SERVICE_ROLE_KEY') else '‚ùå'}")
    print(f"SUPABASE_ANON_KEY: {'‚úÖ' if os.environ.get('SUPABASE_ANON_KEY') else '‚ùå'}")
    
    # –¢–µ—Å—Ç —Å service role
    service_success = test_service_role_upload()
    
    # –¢–µ—Å—Ç —Å anon key
    anon_success = test_anon_key_access()
    
    print(f"\nüìä –ò–¢–û–ì–ò:")
    print(f"Service role –∑–∞–≥—Ä—É–∑–∫–∞: {'‚úÖ' if service_success else '‚ùå'}")
    print(f"Anon key –¥–æ—Å—Ç—É–ø: {'‚úÖ' if anon_success else '‚ùå'}")
    
    if service_success and anon_success:
        print("üéâ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Supabase")