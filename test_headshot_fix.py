#!/usr/bin/env python3
"""
–¢–µ—Å—Ç headshot –∑–∞–º–µ–Ω—ã
"""

import re

def test_headshot_replacement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É headshot"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π SVG —Å headshot (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
    test_svg = '''<svg>
    <g id="dyno.agentheadshot">
        <rect width="100" height="100" fill="url(#pattern1)"/>
    </g>
    <defs>
        <pattern id="pattern1">
            <use xlink:href="#image1"/>
        </pattern>
        <image id="image1" href="old-headshot.jpg" xlink:href="old-headshot.jpg"/>
    </defs>
    </svg>'''
    
    print("üîç –ò—Å—Ö–æ–¥–Ω—ã–π SVG:")
    print(test_svg)
    print("\n" + "="*50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É headshot
    new_headshot_url = "https://example.com/new-headshot.jpg"
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id="dyno.agentheadshot"
    element_pattern = r'<g[^>]*id="dyno\.agentheadshot"[^>]*>.*?</g>'
    match = re.search(element_pattern, test_svg, re.DOTALL)
    
    if match:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç headshot: {match.group(0)}")
        
        # –ò—â–µ–º pattern –≤ fill –∞—Ç—Ä–∏–±—É—Ç–µ
        fill_pattern = r'fill="url\(#([^)]+)\)"'
        fill_match = re.search(fill_pattern, match.group(0))
        
        if fill_match:
            pattern_id = fill_match.group(1)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern: {pattern_id}")
            
            # –ò—â–µ–º pattern –±–ª–æ–∫
            pattern_block_pattern = f'<pattern[^>]*id="{re.escape(pattern_id)}"[^>]*>(.*?)</pattern>'
            pattern_match = re.search(pattern_block_pattern, test_svg, re.DOTALL)
            
            if pattern_match:
                pattern_content = pattern_match.group(1)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω pattern –±–ª–æ–∫: {pattern_content}")
                
                # –ò—â–µ–º use —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ pattern
                use_pattern = r'<use[^>]*xlink:href="#([^"]*)"[^>]*/?>'
                use_match = re.search(use_pattern, pattern_content)
                
                if use_match:
                    image_id = use_match.group(1)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω use —ç–ª–µ–º–µ–Ω—Ç: #{image_id}")
                    
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π image —ç–ª–µ–º–µ–Ω—Ç
                    image_pattern = f'<image[^>]*id="{re.escape(image_id)}"[^>]*/?>'
                    image_match = re.search(image_pattern, test_svg)
                    
                    if image_match:
                        old_image = image_match.group(0)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω image —ç–ª–µ–º–µ–Ω—Ç: {old_image}")
                        
                        # –ó–∞–º–µ–Ω—è–µ–º URL
                        new_image = old_image
                        new_image = re.sub(r'href="[^"]*"', f'href="{new_headshot_url}"', new_image)
                        new_image = re.sub(r'xlink:href="[^"]*"', f'xlink:href="{new_headshot_url}"', new_image)
                        
                        print(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º: {old_image}")
                        print(f"üîÑ –ù–∞: {new_image}")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
                        new_svg = test_svg.replace(old_image, new_image)
                        
                        print("\n" + "="*50)
                        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã:")
                        print(new_svg)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
                        if new_headshot_url in new_svg:
                            print("\nüéâ HEADSHOT –ó–ê–ú–ï–ù–ï–ù –£–°–ü–ï–®–ù–û!")
                            return True
                        else:
                            print("\n‚ùå Headshot –ù–ï –∑–∞–º–µ–Ω–µ–Ω!")
                            return False
                    else:
                        print("‚ùå Image —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return False
                else:
                    print("‚ùå Use —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pattern")
                    return False
            else:
                print("‚ùå Pattern –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print("‚ùå Fill —Å pattern –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    else:
        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç headshot –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢ HEADSHOT –ó–ê–ú–ï–ù–´")
    print("="*50)
    
    success = test_headshot_replacement()
    
    if success:
        print("\nüéØ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! Headshot –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! Headshot –ù–ï –∑–∞–º–µ–Ω—è–µ—Ç—Å—è!")